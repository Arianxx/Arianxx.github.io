<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arian&#39;s Blog</title>
  
  <subtitle>独立技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arianx.me/"/>
  <updated>2019-01-26T02:21:07.528Z</updated>
  <id>https://arianx.me/</id>
  
  <author>
    <name>Arian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask 源码的二三事</title>
    <link href="https://arianx.me/2019/01/25/flask-source-code-read/"/>
    <id>https://arianx.me/2019/01/25/flask-source-code-read/</id>
    <published>2019-01-25T07:03:18.000Z</published>
    <updated>2019-01-26T02:21:07.528Z</updated>
    
    <content type="html"><![CDATA[<p>本文将基于 Flask 1.1.dev ( <a href="https://github.com/pallets/flask/commit/a74864ec229141784374f1998324d2cbac837295" target="_blank" rel="noopener">a74864</a> )，分析 Flask 源码之中一些有趣并且值得关注的部分，包括 路由机制、请求流程、上下文管理 等等。</p><a id="more"></a><h2 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h2><p>本节关注 Flask 的路由机制。首先还是先看下 Flask 的 hello world：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br></pre></td></tr></table></figure></p><p>跟进 route 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, rule, **options)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">        endpoint = options.pop(<span class="string">'endpoint'</span>, <span class="keyword">None</span>)</span><br><span class="line">        self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure></p><p>可见 route 方法实际上根据给定的参数另外调用了 add_url_rule：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_url_rule</span><span class="params">(self, rule, endpoint=None, view_func=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 provide_automatic_options=None, **options)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> endpoint <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        endpoint = view_func.__name__</span><br><span class="line">    options[<span class="string">'endpoint'</span>] = endpoint</span><br><span class="line">    methods = options.pop(<span class="string">'methods'</span>, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    rule = self.url_rule_class(rule, methods=methods, **options)</span><br><span class="line"></span><br><span class="line">    self.url_map.add(rule)</span><br><span class="line">    <span class="comment"># self.view_functions = &#123;&#125;</span></span><br><span class="line">    self.view_functions[endpoint] = view_func</span><br></pre></td></tr></table></figure></p><p>添加路由的逻辑最终由 add_url_rule 这个方法实现。它的参数里 rule 就是要匹配 url 的模式，endpoint 是这个视图的端点名，view_func 是我们定义的函数。默认情况下，endpoint 为函数的名字。我们根据这些信息调用了 self.url_rule_class 方法，并用其返回值作为参数调用了 self.url_map.add。最后，将 endpoint 作为键，我们定义的函数作为值，添加进了 self.view_functions 字典。</p><p>这里 self.url_rule_class 和 self.url_map 是什么呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> Map, Rule</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span>:</span></span><br><span class="line">    url_rule_class = Rule</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(...)</span>:</span></span><br><span class="line">        self.url_map = Map()</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>可见，Flask 路由机制的核心是 Map 和 Rule 类，而这两个类都来自 Flask 高度依赖的 werkzeug 包。因此，想要明白 Flask 路由的原理，首先我们必须对 werkzeug 有一定了解。这里我们先看下 Map 和 Rule 的简单用法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 来自 werkzeug docs</span></span><br><span class="line">url_map = Map()</span><br><span class="line">url_map.add(</span><br><span class="line">    Rule(<span class="string">'/&lt;id&gt;'</span>, endpoint=<span class="string">'user'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">   adapter = self.url_map.bind_to_environ(request.environ)</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">       endpoint, values = adapter.match()</span><br><span class="line">       <span class="keyword">return</span> getattr(self, <span class="string">'on_'</span> + endpoint)(request, **values)</span><br><span class="line">   <span class="keyword">except</span> HTTPException, e:</span><br><span class="line">       <span class="keyword">return</span> e</span><br></pre></td></tr></table></figure></p><p>这里的 request.environ 中的 evniron 是 wsgi 应用中传入 __call__ 方法的一个参数。</p><p>调用 Map.bind_to_environ，根据给定请求的 environ 字典，生成了一个 URLAdapter。然后，调用 adapter 上的 match 方法，就能够得到此次请求对应的端点名和对应 url 的参数。比如说，如果此次请求是 <code>http://localhost:5000/foo</code>，那么返回的 endpoint 和 values 就为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">endpoint == <span class="string">'user'</span></span><br><span class="line">values == &#123;<span class="string">"id"</span>: <span class="string">"foo"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>可见，这里 Rule 对应的是每一条之后需要匹配的 url 规则，Map 将这些规则收集起来，对应这些规则的映射。之后，当有请求来的时候，就绑定 environ 生成 adapter，并调用 match 得到匹配的端点和参数。</p><p>现在我们返回 Flask。前面我们在 Flask 应用的初始化过程中生成了 Map 的一个实例。之后的每一次使用 route，在默认情况下把函数名作为 endpoint，生成一个新的 Rule 对象。并将它添加进 Map 实例中。最后将 endpoint 和函数本身作为键值添加进字典。</p><p>Map 是通过遍历 Rule，并一一匹配正则表达式来匹配路由的。这点目前不详细叙述，日后在另一篇文章中讲下吧。</p><p>用户方面添加路由的流程大致是这样了。下面我们从处理请求的流程中看路由机制的另一个方面。</p><h2 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h2><p>本节关注 Flask wsgi 应用的实现。我们查看 Flask 类的 __call__ 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># 生成请求上下文</span></span><br><span class="line">        ctx = self.request_context(environ)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 推入上下文栈</span></span><br><span class="line">                ctx.push()</span><br><span class="line">                <span class="comment"># 分发路由</span></span><br><span class="line">                response = self.full_dispatch_request()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error = e</span><br><span class="line">                <span class="comment"># 处理异常</span></span><br><span class="line">                response = self.handle_exception(e)</span><br><span class="line">                <span class="comment"># 最终得到包含了返回信息的 werkzeug Response 实例，调用它完成请求。</span></span><br><span class="line">            <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 这里 finally 语句会在 return 之前执行</span></span><br><span class="line">            <span class="comment"># 弹出请求上下文对象</span></span><br><span class="line">            ctx.auto_pop(error)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>这里 __call__ 方法仅仅将逻辑交给了 wsig_app 方法。这样做的一个好处在于，如果之后要为整个应用添加中间件，就不用处理整个 Flask 实例，直接替换 wsgi_app 方法即可，不用担心实例中的大量配置被丢失或覆盖：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> middleware, app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以这样用：</span></span><br><span class="line">app.wsgi_app = middleware(app.wsgi_app)</span><br><span class="line"><span class="comment"># 而不是:</span></span><br><span class="line">app = middleware(app)</span><br></pre></td></tr></table></figure></p><p>回到 wsgi_app 方法，可以看到 response 由 self.full_dispatch_request 生成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rv = self.dispatch_request()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        rv = self.handle_user_exception(e)</span><br><span class="line">    <span class="comment"># 将视图函数返回的值转换为合法的 response</span></span><br><span class="line">    <span class="keyword">return</span> self.finalize_request(rv)</span><br></pre></td></tr></table></figure></p><p>跟进 slef.dispatch_request:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 得到请求上下文栈顶的 request 对象</span></span><br><span class="line">    req = _request_ctx_stack.top.request</span><br><span class="line">    rule = req.url_rule</span><br><span class="line">    <span class="keyword">return</span> self.view_functions[rule.endpoint](**req.view_args)</span><br></pre></td></tr></table></figure></p><p>注意到这里出现了上一节里面的 self.view_functions，它的键是视图的端点名，值是视图对应的函数。这里我们通过 rule.endpoint 和 req.view_args 调用了视图函数，说明此时我们已经通过请求相关的信息(environ)，匹配到了对应的 url 和参数。</p><p>调用我们储存在 self.view_functions 里的视图函数得到请求的返回值以后，就将它传给了 self.finalize_request，将之转化为一个合法的响应对象后返回。</p><p>然而，这里的问题是，我们明明没有显示调用 self.url_map.bind_to_environ 与 adapter.match，是怎样从 _request_ctx_stack.top.request 里得到正确信息的呢？实际上，奥秘隐藏在 Flask 的请求上下文机制里。</p><h2 id="请求上下文Ⅰ"><a href="#请求上下文Ⅰ" class="headerlink" title="请求上下文Ⅰ"></a>请求上下文Ⅰ</h2><p>用过 Flask 的同学一定对其 request 对象映像深刻。不像 django 等框架，在每个视图函数里，都需要传入一个 request 参数，在 Flask 中，可以直接使用从全局导入的 request 对象:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/show')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(request.environ)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure></p><p>request 自动适配每一个来到的请求。我们看看 request 的真面目：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> LocalStack, LocalProxy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">'request'</span>))</span><br></pre></td></tr></table></figure></p><p>这里一时间让我们不明所以。我们看到 _request_ctx_stack 原来是 werkzeug 中 LocalStack 的实例（注意 _request_ctx_stack 在上一节 dispatch_request 中出现过），request 是 LocalProxy 的实例。</p><h4 id="LocalStack"><a href="#LocalStack" class="headerlink" title="LocalStack"></a>LocalStack</h4><p>为了理解这一段代码，我们需要先了解 LocalStack 的用法。简单来说，这里的 LocalStack 类似于 <a href="https://stackoverflow.com/questions/104983/what-is-thread-local-storage-in-python-and-why-do-i-need-it" target="_blank" rel="noopener">线程本地变量</a>，在一个的线程中修改它的值，对于其它线程来说是透明的。更具体的说，这里的 LocalStack 是一个 线程本地栈，在一个线程中给这个栈推入或弹出值，并不会影响其它线程中的 LocalStack。</p><p>LocalStack 的实现依赖于 werkzeug 中的 Local 类，我们先查看 Local 类的源码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 实例中只能修改 __storage__ 和 __ident_func__ 这两个属性</span></span><br><span class="line">    <span class="comment"># 节省内存空间</span></span><br><span class="line">    __slots__ = (<span class="string">'__storage__'</span>, <span class="string">'__ident_func__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 因为本类已经有了 __setattr__ 方法，为了避免循环调用</span></span><br><span class="line">        <span class="comment"># 直接从 object.__setattr__ 给它的属性设置值</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)</span><br><span class="line">        <span class="comment"># get_ident 得到每个线程的唯一 id</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 释放线程本地变量</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># self.__ident__func 获取线程 id</span></span><br><span class="line">            <span class="comment"># 得到 __storage__ 字典里对应本线程字典中键为 name 的值</span></span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在这个实例上设置属性，会将它储存在本线程对应的字典里</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 线程 id</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        删除一个属性，删除本线程对应字典里的值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br></pre></td></tr></table></figure></p><p>Local 类的实例是一个线程本地变量。它在内部维护了一个 __storage__ 字典，这个字典的键为各线程的 id，值为字典，储存对应线程上设置的值。它通过 __setattr__ 等特殊方法，将属性访问转发给内部的 __storage__ 字典。这样，对于不同的线程，Local 的实例上储存的值是不同的。</p><p>注意到 Local 类中有一个 __slots__ 属性。这是一个特殊属性，拥有它的类的实例上不会有 __dict__ 字典，从而节省了内存空间。文档中说：</p><blockquote><p>The __slots__ declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because __dict__ is not created for each instance.</p></blockquote><p>相应的，拥有 __slots__ 的类，其实例也不被允许赋予 __slots__ 中规定外的属性。</p><p>还是让我们继续看 LocalStack 的源码吧：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 保存了上面 Local 的实例，一个线程本地变量。</span></span><br><span class="line">        self._local = Local()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 释放内部的线程本地变量</span></span><br><span class="line">        self._local.__release_local__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">'stack'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># self._local 是线程本地变量。储存在它上面的属性会储存在其内部的 __storage__ 字典中</span></span><br><span class="line">            <span class="comment"># 这样，对于不同的线程来说，self._local.stack 这个栈也是不同的</span></span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Removes the topmost item from the stack, will return the</span></span><br><span class="line"><span class="string">        old value or `None` if the stack was already empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = getattr(self._local, <span class="string">'stack'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 如果 stack 只剩最后一个，为节省内存，将内部的字典释放</span></span><br><span class="line">            self.__release_local__()</span><br><span class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 否则弹出栈顶</span></span><br><span class="line">            <span class="keyword">return</span> stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""The topmost item on the stack.  If the stack is empty,</span></span><br><span class="line"><span class="string">        `None` is returned.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._local.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">except</span> (AttributeError, IndexError):</span><br><span class="line">            <span class="comment"># 如果栈中还没有元素，不报错而是返回 None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p>结合前面的 LocalStack 看，Local 的用法就很明显了。它使用前面的线程本地变量，模仿了一个线程本地栈。与实际的栈不同的地方还在于，当栈为空时，不弹出异常，而是返回 None。同时，当弹出栈最后一个元素时，线程本地变量中维护的本地的字典将会被提前释放以节省内存空间。</p><p>现在我们了解 LocalStack 了，我们可以发现 _request_ctx_stack 实际上就是 LocalStack 的实例，一个线程本地栈。实际上，_request_ctx_stack 就是 Flask 中至关重要的<strong>请求上下文栈</strong>。当然，现在它仍然空空如也，只有当有也新的请求进入时，服务器会新建一个线程，然后使用上一节中的<code>ctx.push()</code>推入新的请求上下文。</p><h4 id="LocalProxy"><a href="#LocalProxy" class="headerlink" title="LocalProxy"></a>LocalProxy</h4><p>然而我们这里仍然没触及到我们最感兴趣的 request，它还与 LocalProxy 类相关：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalProxy</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 节省内存</span></span><br><span class="line">    __slots__ = (<span class="string">'__local'</span>, <span class="string">'__dict__'</span>, <span class="string">'__name__'</span>, <span class="string">'__wrapped__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, local, name=None)</span>:</span></span><br><span class="line">        <span class="comment"># 它本身有 __setattr__，避免循环调用</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'_LocalProxy__local'</span>, local)</span><br><span class="line">        object.__setattr__(self, <span class="string">'__name__'</span>, name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_current_object</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self.__local, <span class="string">'__release_local__'</span>):</span><br><span class="line">            <span class="comment"># 如果不是线程本地变量，作为函数调用并返回。</span></span><br><span class="line">            <span class="comment"># 例如，前面的 request ，传入的参数就不是直接的线程本地变量，而是一个 </span></span><br><span class="line">            <span class="comment"># partial 了的函数</span></span><br><span class="line">            <span class="keyword">return</span> self.__local()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(self.__local, self.__name__)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'no object bound to %s'</span> % self.__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dict__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 转发给它代理的线程本地变量</span></span><br><span class="line">            <span class="keyword">return</span> self._get_current_object().__dict__</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'__dict__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 转发给它代理的线程本地变量</span></span><br><span class="line">            <span class="keyword">return</span> bool(self._get_current_object())</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 它还有许多与上面两个方法相似的代理</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>LocalProxy 是一个有意思的类，结合前面我们给出的 <code>request = LocalProxy(partial(_lookup_req_object, &#39;request&#39;))</code> 语句就会更有意思。它接受一个线程本地变量，然后将对它的实例的几乎所有访问，都会转发给那个线程本地变量上的指定属性。并且在那个属性不存在时弹出 RuntimeError 异常。</p><p>注意到它的 __init__ 方法中的 <code>object.__setattr__(self, &#39;_LocalProxy__local&#39;, local)</code>语句。这里使用 object.__setattr__ 是为了避免循环调用，因为它自己也实现了 __setattr__ 方法（并将它转发给线程本地变量上的属性）。这里使用了 _LocalProxy__local 这个名称，然而在之后却直接以 __local 访问。这是因为 __local 是一个双下划线方法，在自身以外的类访问时，会被重命名。</p><p>前面我们提到过，__slots__ 特殊属性会删除实例的 __dict__ 字典，并以恒定空间储存实例属性，以节省内存。然而这里在 __slots__ 中，又加回了 __dict__ 方法。本来因为 __slots__ 的原因，将要删除的字典，这里又额外添加进来，这是不是有几分做无用功的意味？</p><p>实际上，这也是为了节省内存而做的努力。这里必须存在 __dict__ 原因，是因为 LocalProxy 也会将对自身的属性访问转发给其代理的对象，因此必须允许对 __dict__ 的访问。我们已经为了节省内存，在 __slots__ 中设定了 __local、__name__ 等属性，这样，这些属性将会被存放在固定的空间中而非 __dict__。然而，没有 __dict__，尝试对实例赋其它值时，就会直接引起 AttributeError，使得我们无法对其作转发。因此，我们为其添加 __dict__ 属性以重新允许对实例赋值。当然，此时所有赋值实际会被转发给其代理对象。</p><p>值得注意的是，即使重新规定了 __dict__，当对实例赋值时，规定在 __slots__ 中的其它属性，仍会被储存在固定空间而非 __dict__ 字典，从而 LocalProxy 实例上的 __dict__ 字典实际会一直为空。对线程本地变量的代理，以及 __slots__ 属性的优先级，两者一起使得实例虽然有 __dict__ 属性，却不会浪费使 __slots__ 失效的更多空间。</p><p>好，关于它的 __slots__ 的问题到此为止。我们需要知道这个类会将访问转发给线程本地变量上的一个属性。对于我们的 request 而言，我们传入了 <code>partial(_lookup_req_object, &#39;request&#39;)</code> 作为参数生成它。这里我们回顾一下 _lookup_req_object 的源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br></pre></td></tr></table></figure></p><p>它会查看栈顶是否有请求上下文，如果有，就返回想要的属性，否则弹出异常。结合 LocalProxy ，可以看出，实际上，<strong>request一直是请求上下文栈顶的对象的”request”属性</strong>。并且这个 request 对于各个请求来说是独立的。当请求上下文为空时，会弹出 RuntimeError。</p><h2 id="请求上下文Ⅱ"><a href="#请求上下文Ⅱ" class="headerlink" title="请求上下文Ⅱ"></a>请求上下文Ⅱ</h2><p>现在我们了解到 request 是 _request_ctx_stack 这个请求上下文栈的栈顶对象里面的 “request” 属性，但实际上虽然我们知晓了请求上下文栈的存在，却还不了解具体在这个上下文栈中储存了什么对象，因而不能理解它的实质。为了了解 request 的实质，我们回顾前面的请求流程。</p><p>前面提到过，Flask 也以 wsgi 的应用呈现。最后，Flask 的 app 实例会暴露出一个 __call__ 方法，给应用服务器访问。应用服务器会给 __call__ 方法传入代表请求上下文信息的 environ 字典，以及一个设置 response header 和 status 的 start_response 回调函数。</p><p>Flask 将 __call__ 方法转发给 wsgi_app 方法。注意到 wsig_app 方法中的 <code>ctx = self.request_context(environ)</code> 语句，以及之后的 <code>ctx.push()</code> 和最后的 <code>ctx.auto_pop(error)</code> 语句。实际上，就是这些语句将我们需要的对象都推入到了请求上下文栈中。</p><p>我们查看 self.request_context 的源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .ctx <span class="keyword">import</span> RequestContext</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_context</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> RequestContext(self, environ)</span><br></pre></td></tr></table></figure></p><p>跟进 RequestContext:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None, session=None)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            request = app.request_class(environ)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.url_adapter = <span class="keyword">None</span></span><br><span class="line">        self.url_adapter = app.create_url_adapter(self.request)</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.url_adapter <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.match_request()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>默认情况下，又回调了 app 实例中的 app.request_class 和 app.create_url_adapter 。先看 app.request_class:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .wrappers <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span>:</span></span><br><span class="line">    request_class = Request</span><br></pre></td></tr></table></figure></p><p>这里的 Request 对象主要是 Flask 对于 werkzeug 里面 RequestBase 对象的封装。它接受一个 environ 字典，将储存在 environ 字典中的原始信息以各种方式封装后方便用户访问。</p><p>更重要的是 app.create_url_adapter:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_url_adapter</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> self.url_map.bind_to_environ(</span><br><span class="line">        request.environ)</span><br></pre></td></tr></table></figure></p><p>饶了一个大圈子之后这里我们终于又回到了第一节路由机制里面的 self.url_map 对象。它是 werkzeug 里 Map 类的实例。根据我们前面介绍过的用法，这里绑定 environ 信息后会返回一个 adapter，调用 adapter 的 match 方法就能够得到匹配的端点名和参数。我们将 adapter 储存在了 RequestContext 的 url_adapter 属性中。</p><p>接下来看 RequestContext.match_request:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    url_rule, self.request.view_args = \</span><br><span class="line">        self.url_adapter.match(return_rule=<span class="keyword">True</span>)</span><br><span class="line">    self.request.url_rule = url_rule</span><br></pre></td></tr></table></figure></p><p>这里终于调用了 self.url_adapter 的 match 函数。调用之后，我们就已经匹配到了分发这次请求需要的信息了。将它们储存在了 self.request.url_rule 和 self.request.view_args 中。</p><p>现在 RequestContext 已经初始化完毕了。之后在正式处理请求的 <code>response = self.full_dispatch_request()</code> 语句前，先调用了 <code>ctx.push()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    _request_ctx_stack.push(self)</span><br></pre></td></tr></table></figure></p><p>这里再次出现了 _request_ctx_stack，前面分析过的线程本地栈。我们将 RequestContext 的实例推入了栈。在请求结束之后，我们又会调用 ctx.auto_pop 把这个实例弹出栈。</p><p>现在我们能够了解我们从全局导入的 reqeust 对象的实质了。它就是 Flask.wrappers 中 Request 类的实例，绑定在 RequestContext 的实例上。在每一次请求中，都会新建一个请求上下文对象 RequestContext，在它的初始化过程中，会调用绑定在 app 上的 werkzeug 里的 Map 实例 url_map 匹配 url，得到参数，将它们作为 request 的 url_rule 和 view_args 属性。然后将这个请求上下文推入请求上下文栈。我们访问到的 request 对象，就是对这个请求上下文栈顶的请求上下文里面的那个 request 的代理。这样，对于每个不同的线程而言，这个 request 对象也就自动包含了相应的请求信息。</p><p>比如说，前面的 dispatch_request 中出现过这样的语句 <code>return self.view_functions[rule.endpoint](**req.view_args)</code>，这里的 rule.endpoint 和 req.view_args 就是从绑定完毕后的 request 对象里面获取的。</p><p>关于请求上下文，还有一点值得琢磨。每一次请求都会新建一个线程，这样，在一次请求的整个流程中，明明只需要将这个线程对应的请求上下文推入一次即可，为什么要用栈来实现请求上下文呢？这一点 Flask 的源码中曾经提到过：</p><blockquote><p>Because the contexts are stacks, other contexts may be pushed to change the proxies during a request. While this is not a common pattern, it can be used in advanced applications to, for example, do internal redirects or chain different applications together.</p></blockquote><p>这样做是为了能够在多个不同的应用之间做内部重定向。虽然如此，Flask 尚没有提供与此相关的 api，可能为了以后保留的。在绝大多数的开发中，实际上请求上下文栈一直只会有最多一个上下文对象。</p><h2 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文"></a>应用上下文</h2><p>除了请求上下文之外，Flask 还存在应用上下文的概念。应用上下文随线程中第一次请求上下文的推入而创建，在前面的 <code>ctx.push</code> 方法中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    app_ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">        app_ctx = self.app.app_context()</span><br><span class="line">        app_ctx.push()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>这里的 _app_ctx_stack，应用上下文栈，原理和请求上下文栈别无二致：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_app_ctx_stack = LocalStack()</span><br></pre></td></tr></table></figure></p><p>app_ctx.push 中，推入的是 AppContext 类的实例。这个类封装了应用的一些信息，不详细叙述了。</p><p>这里值得关注的是，为什么 Flask 除了请求上下文以外，还需要一个应用上下文的概念？在一次请求中，不是可以直接调用 RequestContext 上的 app 属性获得应用相关的信息吗？要理解这一点，需要先理解 Flask 多应用的存在。</p><p>我们可以通过 Flask 中的蓝图，将一个大的应用划分为几个子板块。但有时，这样还不够，我们需要几个子板块都拥有自己的配置信息与逻辑，成为几个单独的子系统。Flask 允许这一点，比如说，可以这样使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 来自 stackoverflow</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.wsgi <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"><span class="keyword">from</span> frontend_app <span class="keyword">import</span> application <span class="keyword">as</span> frontend</span><br><span class="line"><span class="keyword">from</span> backend_app <span class="keyword">import</span> application <span class="keyword">as</span> backend</span><br><span class="line"></span><br><span class="line">application = DispatcherMiddleware(frontend, &#123;</span><br><span class="line">    <span class="string">'/backend'</span>:     backend</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样，在一次请求对应的一个解释器线程中，可能会同时存在多个逻辑上分割的 Flask 应用。而 Flask 请求还恰恰赋予了我们使用 url_for 这样的全局函数直接获取一个应用中端点名对应的 url，这就需要保持每个应用的上下文，需要时从应用上下文栈中获取。</p><p>Flask 就借助于应用上下文实现了 current_app 这样的全局对象，帮助我们获取此次请求对应的应用信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_app</span><span class="params">()</span>:</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> top.app</span><br><span class="line"></span><br><span class="line">_app_ctx_stack = LocalStack()</span><br><span class="line">current_app = LocalProxy(_find_app)</span><br></pre></td></tr></table></figure></p><p>可以发现和 request 非常相似。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将基于 Flask 1.1.dev ( &lt;a href=&quot;https://github.com/pallets/flask/commit/a74864ec229141784374f1998324d2cbac837295&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a74864&lt;/a&gt; )，分析 Flask 源码之中一些有趣并且值得关注的部分，包括 路由机制、请求流程、上下文管理 等等。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="源码" scheme="https://arianx.me/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>cpython3.7 dict 对象的内在原理</title>
    <link href="https://arianx.me/2018/12/30/walkthrough-cpython3.7-dict-source-code/"/>
    <id>https://arianx.me/2018/12/30/walkthrough-cpython3.7-dict-source-code/</id>
    <published>2018-12-30T07:31:50.000Z</published>
    <updated>2019-01-25T08:12:49.413Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，python 中有一个应用得极其广泛内建对象——dict(字典)。cpython 解释器本身，以及大量的 python 程序，都依赖于 dict 对象。因此，dict 对象在 python 中设计得极其高效，其插入、删除、查询等操作的时间复杂度都是O(1)。</p><p>dict 对象可以这样使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>scores = &#123;<span class="string">'Mike'</span>: <span class="number">90</span>, <span class="string">'Jack'</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scores[<span class="string">'Ariana'</span>] = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scores[<span class="string">'Jack'</span>]</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scores[<span class="string">'Tim'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'Tim'</span></span><br></pre></td></tr></table></figure></p><p>本文将从 cpython3.7 源码的角度出发，探讨 dict 对象的内部原理。主要将探讨以下几个内容：</p><ul><li>dict 对象的结构、组成</li><li>dict 解决哈希冲突的方式</li><li>cpython 对 dict 的内部优化，如缓冲池、split table</li><li>遍历 dict 保持插入顺序的原理</li></ul><p>本文的剖析基于 <a href="https://github.com/python/cpython/blob/bb86bf4c4eaa30b1f5192dab9f389ce0bb61114d/Objects/dictobject.c" target="_blank" rel="noopener">https://github.com/python/cpython/blob/bb86bf4c4eaa30b1f5192dab9f389ce0bb61114d/Objects/dictobject.c</a> 这份源码。<br><a id="more"></a></p><h2 id="哈希表简述"><a href="#哈希表简述" class="headerlink" title="哈希表简述"></a>哈希表简述</h2><p>cpython 采用哈希表来实现 dict（与之不同的是，c++ 采用红黑树来实现 map）。因此，想要了解 cpython 的 dict 实现，需要先对哈希表这个数据结构有所了解。</p><p>哈希表是一种实现了<a href="https://en.wikipedia.org/wiki/Associative_array" target="_blank" rel="noopener">关联数组</a>抽象数据类型的，键值形式的数据结构。哈希表通常利用一个<strong>哈希函数</strong>，将一个给定的键映射为一个值，这个值反映了与键对应的数据的储存位置。例如，将一个数组作为数据的储存位置，那么，哈希函数就将键映射为这个数组中键对应数据的下标。以后想要查找这个数据时，就不用从头遍历数组，而是直接哈希键取得下标，使得查询的时间由O(n)缩短到O(1)。</p><p>由于我们最终会将数据储存在一个确定大小的空间内，而待哈希的值又是源源不断的。因此，我们难以避免有多个不同的数据被哈希函数哈希到同一个数据地址的情况，这种情况就叫做发生了<a href="https://en.wikipedia.org/wiki/Collision_(computer_science" target="_blank" rel="noopener">冲突</a>)。衡量哈希表的冲突率的一个指标是哈希表的<strong>负载因子</strong>，它等于哈希表已使用的空间除以哈希表的总空间。直观上来说，它反映了哈希表中的一个位置平均储存的数据个数。当负载因子的值大于 2/3 时，哈希发生冲突的概率就将大大增加。因此，后面我们会看到，当 dict 中的哈希表负载因子大于 2/3 时，解释器会重新分配哈希表的大小使其负载因子小于 2/3。</p><p>我们通常使用<strong>链地址法</strong>或<strong>开放寻址法</strong>来解决哈希冲突。因为链地址法会带来分配链表的开销，而 cpython 中 dict 又运用得极其普遍，因此 dict 采用开放寻址法来实现哈希表（与之不同的是，go 使用链地址法解决哈希冲突）。dict 原本的注释说：</p><blockquote><p>Open addressing is preferred over chaining since the link overhead for<br>chaining would be substantial (100% with typical malloc overhead)</p></blockquote><p>当发生哈希冲突时，dict 中的开放寻址法将会依赖哈希值使用二次探查函数生成一段探查序列，这个探查序列覆盖了整个哈希表的下标取值。</p><p>对于开放寻址法来说，当插入值发生哈希冲突时，会依照探查序列将值和键一起储存在之后的某个空位置上。当查找某个发生冲突的值时，顺着探查序列查看储存的键是否和待查找的键相同，如果最后查找到一个储存了 null 的槽，就意味着对应的键不存在于表中，指示查找结束。当删除某个发生冲突的键时，不能直接将那个槽置为 null，因为 null 指示了结束查找。因此，在删除一个值后，通常将这个槽设为 <strong>dummy</strong>，指示查找算法应该继续查找下去直到遇到一个 null。</p><p>值得注意的是，当哈希函数选择不当时，哈希值可能堆积在一起从而产生一次聚集或二次聚集的现象。这会使落在这个聚集区间内的哈希值总要探查多次才能找到正确的位置，从而极大的降低哈希的效率，特别是对于开放寻址法来说。可见，哈希函数的选择对哈希表至关重要。虽然如此，cpython 中的哈希算法独立于哈希表实现，本文将精力聚焦在 dict 实现本身上，对哈希算法暂不做更多关注。</p><p>关于哈希表的更多信息可以参阅 <a href="https://en.wikipedia.org/wiki/Hash_table" target="_blank" rel="noopener">Hash Table</a>。</p><h2 id="dict-的结构"><a href="#dict-的结构" class="headerlink" title="dict 的结构"></a>dict 的结构</h2><h4 id="PyDictKeyEntry"><a href="#PyDictKeyEntry" class="headerlink" title="PyDictKeyEntry"></a>PyDictKeyEntry</h4><p>首先分析 dict 的数据结构。前面说过，dict 会将数据储存在一个哈希表中。这个哈希表中的元素类型，就是 PyDictKeyEntry 了:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// 缓存的 key 的 hash</span></span><br><span class="line">    Py_hash_t me_hash;</span><br><span class="line">    PyObject *me_key;</span><br><span class="line">    PyObject *me_value; </span><br><span class="line">&#125; PyDictKeyEntry;</span><br></pre></td></tr></table></figure></p><p>每一次向 dict 中插入一个数据，实际上就会向哈希表中插入一个 PyDictKeyEntry。PyDictKeyEntry 中不单储存了指向插入数据的指针(<code>PyObject *me_value</code>)，还储存了这个数据对应的键(<code>PyObject *me_key</code>)，以及键所对应的哈希(<code>Py_hash_t me_hash</code>)。</p><p>那么，这里的 Py_hash_t 类型是什么呢？<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">ssize_t</span> Py_ssize_t;</span><br><span class="line"><span class="keyword">typedef</span> Py_ssize_t Py_hash_t;</span><br></pre></td></tr></table></figure></p><p>可见，Py_hash_t 实际上是 <code>ssize_t</code> 类型。ssize_t 类型的简介可以在<a href="https://jameshfisher.com/2017/02/22/ssize_t.html" target="_blank" rel="noopener">这里</a>看到。简单来说，就是一个可以为 -1 的 size_t 类型。</p><h4 id="PyDictKeysObject"><a href="#PyDictKeysObject" class="headerlink" title="PyDictKeysObject"></a>PyDictKeysObject</h4><p>PyDictKeysObject 是 dict 中储存哈希表的结构，它的定义如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">dictkeysobject</span> &#123;</span></span><br><span class="line">    <span class="comment">// 对这个 PyDictKeysObject 的引用</span></span><br><span class="line">    <span class="comment">// 对于 split table，引用必须为1</span></span><br><span class="line">    Py_ssize_t dk_refcnt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际哈希表（dk_indices）的大小，其值必须为 2 的幂</span></span><br><span class="line">    Py_ssize_t dk_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* typedef Py_ssize_t (*dict_lookup_func)</span></span><br><span class="line"><span class="comment">        (PyDictObject *mp, PyObject *key, Py_hash_t hash, PyObject **value_addr);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// Function to lookup in the hash table (dk_indices)</span></span><br><span class="line">    dict_lookup_func dk_lookup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dk_entries 中可用条目的数目。</span></span><br><span class="line">    <span class="comment">// 每次插入值，dk_usable 都会减少，删除不会增加（删除使一个槽变为 dummy）</span></span><br><span class="line">    <span class="comment">// 当 dk_usable 减少到 0，会引发哈希表内存空间的重新分配，删除其中所有 dummy</span></span><br><span class="line">    <span class="comment">/* Number of usable entries in dk_entries. */</span></span><br><span class="line">    Py_ssize_t dk_usable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次插入，其值增加</span></span><br><span class="line">    <span class="comment">/* Number of used entries in dk_entries. */</span></span><br><span class="line">    Py_ssize_t dk_nentries;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际的哈希表，类型随哈希表的大小而变</span></span><br><span class="line">    <span class="comment">/* Actual hash table of dk_size entries. It holds indices in dk_entries,</span></span><br><span class="line"><span class="comment">       or DKIX_EMPTY(-1) or DKIX_DUMMY(-2).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Indices must be: 0 &lt;= indice &lt; USABLE_FRACTION(dk_size).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       The size in bytes of an indice depends on dk_size:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       - 1 byte if dk_size &lt;= 0xff (char*)</span></span><br><span class="line"><span class="comment">       - 2 bytes if dk_size &lt;= 0xffff (int16_t*)</span></span><br><span class="line"><span class="comment">       - 4 bytes if dk_size &lt;= 0xffffffff (int32_t*)</span></span><br><span class="line"><span class="comment">       - 8 bytes otherwise (int64_t*)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Dynamically sized, SIZEOF_VOID_P is minimum. */</span></span><br><span class="line">    <span class="keyword">char</span> dk_indices[];  <span class="comment">/* char is required to avoid strict aliasing. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dk_entries 不显示存在于定义里，新建 PyDictKeysObject，会分配与之对应的内存空间</span></span><br><span class="line">    <span class="comment">/* "PyDictKeyEntry dk_entries[dk_usable];" array follows:</span></span><br><span class="line"><span class="comment">       see the DK_ENTRIES() macro */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">dictkeysobject</span> <span class="title">PyDictKeysObject</span>;</span></span><br></pre></td></tr></table></figure></p><p>令人疑惑的是，前面说过，PyDictKeysObject 中储存了实际的哈希表，PyDictKeyEntry 是哈希表储存数据的元素类型,然而在这里的定义里面，为什么没有见到对应的 PyDictKeyEntry 数组作为哈希表，却说<code>char dk_indices[]</code>是实际的哈希表呢？</p><p>这是因为，在 cpython3.7 的实现里面，对 dict 中的键值做了两重映射。cpython3.6 以前，PyDictKeysObject 储存的哈希表就是 PyDictKeyEntry* 数组，键的哈希值直接代表了数据在哈希表中的位置。从 cpython3.6 开始，PyDictKeysObject 中储存哈希表的实际类型变成了 char dk_indices[]，另外用 PyDictKeyEntry 数组储存数据。dk_indices 里面储存的值不是真实数据 PyDictKeyEntry，而是它在 PyDictKeyEntry 数组里面的位置。</p><p>在 cpython3.6 以前，哈希表就是 PyDictKeyEntry 数组类型，因此每个键的哈希都映射了这个数组的位置。这样当遍历 dict 时，实际是遍历这个 PyDictKeyEntry* 哈希表，当然无法保持有序。cpython3.6 以后，每插入一个值时，实际是<strong>顺序</strong>将值插入这个额外的 PyDictKeyEntry* 数组，然后将这个值的位置储存在哈希表 dk_indices 里。这样，遍历 dict，遍历的不是哈希表 dk_indices，而是这个 PyDictKeyEntry*，而 PyDictKeyEntry* 中的数据已经是有序的。这里的 PyDictKeyEntry* 就是注释中所说的 <code>PyDictKeyEntry dk_entries[dk_usable]</code>。这就是 cpython3.6 以后<strong>遍历 dict 保持键插入顺序</strong>的原理。</p><p>那么为什么在 PyDictKeysObject 里面找不到对应的 dk_entries 字段呢？</p><p>首先考察 dk_indices。dk_indices 中储存的是数据的位置，因此我们必须为 dk_indices 分配足以容下这个数量的值的内存空间。考虑到实际使用中 dict 可以有不同数量的键，有时数量差距极大。因此这里使 dk_indices 的类型随哈希表的大小而变化以节约内存空间。这是解释器级别对于 dict 的优化。</p><p>dk_indices 和 dk_entries 都是可变大小的，而 c 结构体中变长的数组只能放于结构体的最后一个元素，因此这里结构体的定义中只列出了 dk_indices，实际的 dk_entries 的内存空间直接在新建时一起分配。</p><p>下面我们考察注释里面提到的 DK_ENTRIES：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DK_SIZE(dk) ((dk)-&gt;dk_size)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据哈希表的大小，判断哈希表每个元素占据的字节大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DK_IXSIZE(dk)                          \</span></span><br><span class="line">    (DK_SIZE(dk) &lt;= <span class="number">0xff</span> ?                     \</span><br><span class="line">        <span class="number">1</span> : DK_SIZE(dk) &lt;= <span class="number">0xffff</span> ?            \</span><br><span class="line">            <span class="number">2</span> : <span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 dk_indices 指针转换为int8_t，每个元素一字节。这样 DK_SIZE(dk) * DK_IXSIZE(dk) </span></span><br><span class="line"><span class="comment">// 就恰是 dk_entreis 相对于 dk_indices 的偏移地址</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DK_ENTRIES(dk) \</span></span><br><span class="line">    ((PyDictKeyEntry*)(&amp;((<span class="keyword">int8_t</span>*)((dk)-&gt;dk_indices))[DK_SIZE(dk) * DK_IXSIZE(dk)]))</span><br></pre></td></tr></table></figure></p><p>这里 DK_SIZE 是 PyDictKeysObject 中哈希表 dk_indices 的元素个数，DK_IXSIZE 是每个元素占有的字节数（注意到这里占有的字节数随哈希表大小而变化）。现在，我们终于明白了，dk_entries 在 PyDictKeysObject 紧紧跟在 dk_indices 后面。DK_ENTRIES 宏就根据这一点动态计算出 dk_entries 的内存地址，转换类型供我们使用。</p><h4 id="PyDictObject"><a href="#PyDictObject" class="headerlink" title="PyDictObject"></a>PyDictObject</h4><p>最终，暴露给解释器的对象是 PyDictObject：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字典中的元素个数，插入加一，删除减一</span></span><br><span class="line">    <span class="comment">// len 即依赖这个字段</span></span><br><span class="line">    <span class="comment">/* Number of items in the dictionary */</span></span><br><span class="line">    Py_ssize_t ma_used;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Dictionary version: globally unique, value change each time</span></span><br><span class="line"><span class="comment">       the dictionary is modified */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> ma_version_tag;</span><br><span class="line"></span><br><span class="line">    PyDictKeysObject *ma_keys;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 储存 split table 的数据</span></span><br><span class="line">    PyObject **ma_values;</span><br><span class="line">&#125; PyDictObject;</span><br></pre></td></tr></table></figure></p><p>PyDictObject 有 PyObject_HEAD 宏使其可以作为 cpython 对象而使用。此外还有一个<code>PyObject **ma_values</code>，这个字段是为了实现 split table，共用键对象，关于这一点我们之后再做剖析。</p><h2 id="操作哈希表"><a href="#操作哈希表" class="headerlink" title="操作哈希表"></a>操作哈希表</h2><p>下面我们考察 dict 中是如何直接操作哈希表的。暴露给用户的 api 都是对这些直接操作哈希表的函数的封装。</p><h4 id="读取、置位哈希表"><a href="#读取、置位哈希表" class="headerlink" title="读取、置位哈希表"></a>读取、置位哈希表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* lookup indices.  returns DKIX_EMPTY, DKIX_DUMMY, or ix &gt;=0 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> Py_ssize_t</span><br><span class="line">dk_get_index(PyDictKeysObject *keys, Py_ssize_t i)</span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t s = DK_SIZE(keys);</span><br><span class="line">    Py_ssize_t ix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据哈希表的大小，将 dk_indices 指针转换为不同类型的指针，得到其储存的数据</span></span><br><span class="line">    <span class="keyword">if</span> (s &lt;= <span class="number">0xff</span>) &#123;</span><br><span class="line">        <span class="keyword">int8_t</span> *indices = (<span class="keyword">int8_t</span>*)(keys-&gt;dk_indices);</span><br><span class="line">        ix = indices[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s &lt;= <span class="number">0xffff</span>) &#123;</span><br><span class="line">        <span class="keyword">int16_t</span> *indices = (<span class="keyword">int16_t</span>*)(keys-&gt;dk_indices);</span><br><span class="line">        ix = indices[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int32_t</span> *indices = (<span class="keyword">int32_t</span>*)(keys-&gt;dk_indices);</span><br><span class="line">        ix = indices[i];</span><br><span class="line">    &#125;</span><br><span class="line">    assert(ix &gt;= DKIX_DUMMY);</span><br><span class="line">    <span class="keyword">return</span> ix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面说过，dk_indices 是实际的哈希表，可见，dk_get_index 就是得到位置为哈希表中下标为 i 处储存的位置。</p><p>还有一个与之相关的函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">dk_set_index(PyDictKeysObject *keys, Py_ssize_t i, Py_ssize_t ix)</span><br></pre></td></tr></table></figure></p><p>将哈希表下标为 i 的元素设置为 ix。</p><h4 id="查询哈希表"><a href="#查询哈希表" class="headerlink" title="查询哈希表"></a>查询哈希表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DK_MASK(dk) (((dk)-&gt;dk_size)-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERTURB_SHIFT 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Py_ssize_t</span><br><span class="line">lookdict(PyDictObject *mp, PyObject *key,</span><br><span class="line">         Py_hash_t hash, PyObject **value_addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i, mask, perturb;</span><br><span class="line">    PyDictKeysObject *dk;</span><br><span class="line">    PyDictKeyEntry *ep0;</span><br><span class="line"></span><br><span class="line">top:</span><br><span class="line">    dk = mp-&gt;ma_keys;</span><br><span class="line">    <span class="comment">// ep0: 实际储存数据的数组</span></span><br><span class="line">    ep0 = DK_ENTRIES(dk);</span><br><span class="line">    <span class="comment">// 掩码，使哈希值落入合理范围内</span></span><br><span class="line">    mask = DK_MASK(dk);</span><br><span class="line">    <span class="comment">// perturb: 用于哈希冲突下的二次探查</span></span><br><span class="line">    perturb = hash;</span><br><span class="line">    <span class="comment">// 初始探查位置</span></span><br><span class="line">    i = (<span class="keyword">size_t</span>)hash &amp; mask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Py_ssize_t ix = dk_get_index(dk, i);</span><br><span class="line">        <span class="keyword">if</span> (ix == DKIX_EMPTY) &#123;</span><br><span class="line">            <span class="comment">// 对应位置没有值，指示探查结束</span></span><br><span class="line">            *value_addr = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span> ix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ix &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 获得 ix 位置处储存的数据</span></span><br><span class="line">            PyDictKeyEntry *ep = &amp;ep0[ix];</span><br><span class="line">            assert(ep-&gt;me_key != <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (ep-&gt;me_key == key) &#123;</span><br><span class="line">                <span class="comment">// 正是此次要寻找的数据</span></span><br><span class="line">                *value_addr = ep-&gt;me_value;</span><br><span class="line">                <span class="keyword">return</span> ix;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ep-&gt;me_hash == hash) &#123;</span><br><span class="line">                <span class="comment">// 键不直接相等，但哈希相等，可能是因为键是 python 对象，用 python 的比较方法</span></span><br><span class="line">                PyObject *startkey = ep-&gt;me_key;</span><br><span class="line">                Py_INCREF(startkey);</span><br><span class="line">                <span class="keyword">int</span> cmp = PyObject_RichCompareBool(startkey, key, Py_EQ);</span><br><span class="line">                Py_DECREF(startkey);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果 cmp 小于0，表示比较过程中发生错误</span></span><br><span class="line">                    *value_addr = <span class="literal">NULL</span>;</span><br><span class="line">                    <span class="keyword">return</span> DKIX_ERROR;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dk == mp-&gt;ma_keys &amp;&amp; ep-&gt;me_key == startkey) &#123;</span><br><span class="line">                    <span class="comment">// PyObject_RichCompareBool 可能会调用用户定义的特殊方法（__lt__ 之类的），这些方法可能会改变字典</span></span><br><span class="line">                    <span class="comment">// 这里通过检查 key 来判断要操作的元素是否在比较过程中被改变</span></span><br><span class="line">                    <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        *value_addr = ep-&gt;me_value;</span><br><span class="line">                        <span class="keyword">return</span> ix;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/* The dict was mutated, restart */</span></span><br><span class="line">                    <span class="keyword">goto</span> top;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 冲突，查看探查序列下一个位置</span></span><br><span class="line">        perturb &gt;&gt;= PERTURB_SHIFT;</span><br><span class="line">        i = (i*<span class="number">5</span> + perturb + <span class="number">1</span>) &amp; mask;</span><br><span class="line">    &#125;</span><br><span class="line">    Py_UNREACHABLE();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lookdict 是实际查找哈希表的函数，使用这个函数，需要先计算出 key 对应的哈希。若查找到，返回值会被储存在 value_addr,否则其为 NULL。</p><p>它会根据给定的哈希生成一串探查序列，然后一次查找这些探查序列对应位置的数据，如果储存的 key 和 hash 和我们要查找的 key 和 hash 相等，就把数据储存在传入的 value_addr 指针里面，否则储存 null。</p><p>可见 lookdict 在 key 不直接相等时调用了 PyObject_RichCompareBool 函数，这会带来额外的开销。cpython 为预先知道 key 只能为 unicode object 的情况下提供了 lookdict_unicode 函数，去除了对 PyObject_RichCompareBool 的调用，使用更高效的 unicode_eq 函数。</p><p>当新建一个 dict 时，cpython 会将默认的查询函数设置为 lookdict_unicode，当插入一个非 unicode object 的键时，就会使查询函数退化为 lookdict。</p><p>除此之外，cpython 还提供了 lookdict_unicode_nodummy 函数，逻辑与 lookdict_unicode 一样，只是添加了 ix 不为 dummy 的 assert。当调用 dictresize 时，会删除 dict 中的 dummy，并将查找函数设置为它。之后当插入非 unicode object 时，就会退化为 lookdict。</p><h4 id="插入哈希表"><a href="#插入哈希表" class="headerlink" title="插入哈希表"></a>插入哈希表</h4><p>直接插入哈希表的源码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> pydict_global_version = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DICT_NEXT_VERSION() (++pydict_global_version)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在知道有对应 hash 的空位的情况下，返回哈希表中那个空位的位置 </span></span><br><span class="line"><span class="comment"> * hash 代表了哈希表的下标，为什么不直接只用呢？因为可能发生哈希冲突。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> Py_ssize_t</span><br><span class="line">find_empty_slot(PyDictKeysObject *keys, Py_hash_t hash)</span><br><span class="line">&#123;</span><br><span class="line">    assert(keys != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> mask = DK_MASK(keys);</span><br><span class="line">    <span class="keyword">size_t</span> i = hash &amp; mask;</span><br><span class="line">    Py_ssize_t ix = dk_get_index(keys, i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> perturb = hash; ix &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">        <span class="comment">// 直到 ix 小于 0 时终止，也就是说为 empty 或 dummy</span></span><br><span class="line">        perturb &gt;&gt;= PERTURB_SHIFT;</span><br><span class="line">        i = (i*<span class="number">5</span> + perturb + <span class="number">1</span>) &amp; mask;</span><br><span class="line">        ix = dk_get_index(keys, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">insertdict(PyDictObject *mp, PyObject *key, Py_hash_t hash, PyObject *value)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject *old_value;</span><br><span class="line">    PyDictKeyEntry *ep;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// split table，稍后解释</span></span><br><span class="line">    <span class="keyword">if</span> (mp-&gt;ma_values != <span class="literal">NULL</span> &amp;&amp; !PyUnicode_CheckExact(key)) &#123;</span><br><span class="line">        <span class="comment">// 调整哈希表大小，使 split table 转化为 combined table</span></span><br><span class="line">        <span class="keyword">if</span> (insertion_resize(mp) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">goto</span> Fail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Py_ssize_t ix = mp-&gt;ma_keys-&gt;dk_lookup(mp, key, hash, &amp;old_value);</span><br><span class="line">    <span class="keyword">if</span> (ix == DKIX_ERROR)</span><br><span class="line">        <span class="keyword">goto</span> Fail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ix == DKIX_EMPTY) &#123;</span><br><span class="line">        <span class="comment">/* Insert into new slot. */</span></span><br><span class="line">        assert(old_value == <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (mp-&gt;ma_keys-&gt;dk_usable &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* Need to resize. */</span></span><br><span class="line">            <span class="comment">// insertion_resize： 调整哈希表大小使其符合 2/3 的装载率</span></span><br><span class="line">            <span class="keyword">if</span> (insertion_resize(mp) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> Fail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// hashpos 哈希表中待插入位置的下标</span></span><br><span class="line">        Py_ssize_t hashpos = find_empty_slot(mp-&gt;ma_keys, hash);</span><br><span class="line">        <span class="comment">// dk_nentries: dk_entries 中已使用元素的个数</span></span><br><span class="line">        <span class="comment">// 这里获得下一个元素，实现顺序插入</span></span><br><span class="line">        <span class="comment">// 稍后会看到 cpython 在调用 insertion_resize时，会清除 dk_entries 中的空元素</span></span><br><span class="line">        ep = &amp;DK_ENTRIES(mp-&gt;ma_keys)[mp-&gt;ma_keys-&gt;dk_nentries];</span><br><span class="line">        dk_set_index(mp-&gt;ma_keys, hashpos, mp-&gt;ma_keys-&gt;dk_nentries);</span><br><span class="line">        ep-&gt;me_key = key;</span><br><span class="line">        ep-&gt;me_hash = hash;</span><br><span class="line">        <span class="keyword">if</span> (mp-&gt;ma_values) &#123;</span><br><span class="line">             <span class="comment">// split table</span></span><br><span class="line">            assert (mp-&gt;ma_values[mp-&gt;ma_keys-&gt;dk_nentries] == <span class="literal">NULL</span>);</span><br><span class="line">            mp-&gt;ma_values[mp-&gt;ma_keys-&gt;dk_nentries] = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ep-&gt;me_value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新插入元素调整各项大小，删除元素不再调整，从而使 ix 为 dummy 时的操作</span></span><br><span class="line">        <span class="comment">// 和 ix 已经有元素的操作一致</span></span><br><span class="line">        mp-&gt;ma_used++;</span><br><span class="line">        mp-&gt;ma_version_tag = DICT_NEXT_VERSION();</span><br><span class="line">        mp-&gt;ma_keys-&gt;dk_usable--;</span><br><span class="line">        mp-&gt;ma_keys-&gt;dk_nentries++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为 dummy 或 已经存在的元素，直接设置值</span></span><br><span class="line">    <span class="keyword">if</span> (_PyDict_HasSplitTable(mp)) &#123;</span><br><span class="line">        <span class="comment">// split table</span></span><br><span class="line">        mp-&gt;ma_values[ix] = value;</span><br><span class="line">        <span class="keyword">if</span> (old_value == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">/* pending state */</span></span><br><span class="line">            assert(ix == mp-&gt;ma_used);</span><br><span class="line">            mp-&gt;ma_used++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        assert(old_value != <span class="literal">NULL</span>);</span><br><span class="line">        DK_ENTRIES(mp-&gt;ma_keys)[ix].me_value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mp-&gt;ma_version_tag = DICT_NEXT_VERSION();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Fail:</span><br><span class="line">    Py_DECREF(value);</span><br><span class="line">    Py_DECREF(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>insertdict 调用 lookdict 查看对应的键和哈希是否已经有值，如果没有就获取 dk_entries 中的下一个待插入条目并赋值，调用 dk_set_index 将它的位置设置到哈希表里。除此之外，同步更新了 ma_used、ma_version_tag 等的数据。</p><p>insertdict 是直接插入 dict 中哈希表的内部函数，许多其它暴露出来的 api 都会调用它。</p><h4 id="删除键值"><a href="#删除键值" class="headerlink" title="删除键值"></a>删除键值</h4><p>最内部的函数是 delitem_common，它的源码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lookdict_index 获取在 dk_entries 中哈希为 hash，位置为 index 处的数据</span></span><br><span class="line"><span class="comment">// 对应在哈希表 dk_indices 中的位置</span></span><br><span class="line"><span class="keyword">static</span> Py_ssize_t</span><br><span class="line">lookdict_index(PyDictKeysObject *k, Py_hash_t hash, Py_ssize_t index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">size_t</span> mask = DK_MASK(k);</span><br><span class="line">    <span class="keyword">size_t</span> perturb = (<span class="keyword">size_t</span>)hash;</span><br><span class="line">    <span class="keyword">size_t</span> i = (<span class="keyword">size_t</span>)hash &amp; mask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Py_ssize_t ix = dk_get_index(k, i);</span><br><span class="line">        <span class="keyword">if</span> (ix == index) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ix == DKIX_EMPTY) &#123;</span><br><span class="line">            <span class="keyword">return</span> DKIX_EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        perturb &gt;&gt;= PERTURB_SHIFT;</span><br><span class="line">        i = mask &amp; (i*<span class="number">5</span> + perturb + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Py_UNREACHABLE();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hash: 待删除元素的 hash; ix: 待删除元素位于 dk_entries 中的位置</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">delitem_common(PyDictObject *mp, Py_hash_t hash, Py_ssize_t ix,</span><br><span class="line">               PyObject *old_value)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject *old_key;</span><br><span class="line">    PyDictKeyEntry *ep;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hashpos: 待删除数据在哈希表中的下标</span></span><br><span class="line">    Py_ssize_t hashpos = lookdict_index(mp-&gt;ma_keys, hash, ix);</span><br><span class="line">    assert(hashpos &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    mp-&gt;ma_used--;</span><br><span class="line">    mp-&gt;ma_version_tag = DICT_NEXT_VERSION();</span><br><span class="line">    ep = &amp;DK_ENTRIES(mp-&gt;ma_keys)[ix];</span><br><span class="line">    <span class="comment">// 设置对应位置为 dummy，不改变 dk_nentreis，不调整 dk_usable</span></span><br><span class="line">    dk_set_index(mp-&gt;ma_keys, hashpos, DKIX_DUMMY);</span><br><span class="line">    old_key = ep-&gt;me_key;</span><br><span class="line">    ep-&gt;me_key = <span class="literal">NULL</span>;</span><br><span class="line">    ep-&gt;me_value = <span class="literal">NULL</span>;</span><br><span class="line">    Py_DECREF(old_key);</span><br><span class="line">    Py_DECREF(old_value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>暴露给用户的 PyDict_DelItem 函数先计算出给定键的哈希，然后调用 lookdict 查看对应的键是否存在于哈希表中，如果存在，才会调用 delitem_common 真正删除其值。</p><h4 id="调整哈希表"><a href="#调整哈希表" class="headerlink" title="调整哈希表"></a>调整哈希表</h4><p>前面看到，当插入元素时如果空间不够，会调整哈希表大小：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使负载因子在 2/3 附近，需要调整的大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GROWTH_RATE(d) ((d)-&gt;ma_used*3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">insertion_resize(PyDictObject *mp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> dictresize(mp, GROWTH_RATE(mp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dictresize 里面有这样一个代码片段：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PyDictKeyEntry *ep = oldentries;</span><br><span class="line"><span class="keyword">for</span> (Py_ssize_t i = <span class="number">0</span>; i &lt; numentries; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (ep-&gt;me_value == <span class="literal">NULL</span>)</span><br><span class="line">        ep++;</span><br><span class="line">    newentries[i] = *ep++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里<code>while (ep-&gt;me_value == NULL) ep++;</code>使得调整后的 dk_entries 是连续的，其中不含 dummy。设置完 dk_entries 后，dictresize 会根据 dk_entries 中储存的键值，通过 lookdict 查找 dk_indices 的空位，然后使用 dk_set_index 反向设置哈希表中的值。从而重新建立对应关系。</p><p>dictresize 中还有其它一些细碎逻辑，就不一一剖析了。</p><h2 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h2><p>提供给用户的 API 函数大体上都是对于几个直接操作哈希表的函数的封装。本处将列举几个相关的常用API。</p><h4 id="PyDict-GetItem"><a href="#PyDict-GetItem" class="headerlink" title="PyDict_GetItem"></a>PyDict_GetItem</h4><p>源码如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PyObject *</span><br><span class="line">PyDict_GetItem(PyObject *op, PyObject *key)</span><br><span class="line">&#123;</span><br><span class="line">    Py_hash_t hash;</span><br><span class="line">    Py_ssize_t ix;</span><br><span class="line">    PyDictObject *mp = (PyDictObject *)op;</span><br><span class="line">    PyThreadState *tstate;</span><br><span class="line">    PyObject *value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyDict_Check(op))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (!PyUnicode_CheckExact(key) ||</span><br><span class="line">        (hash = ((PyASCIIObject *) key)-&gt;hash) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果不是 unicode，或者是 unicode 但其内部没有缓存的 hash，就重新计算</span></span><br><span class="line">        hash = PyObject_Hash(key);</span><br><span class="line">        <span class="keyword">if</span> (hash == <span class="number">-1</span>) &#123;</span><br><span class="line">            PyErr_Clear();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dk_lookup 默认为 lookdict_unicode</span></span><br><span class="line">    <span class="comment">// 如果 key 不是unicode，就会退化到 lookdict</span></span><br><span class="line">    ix = (mp-&gt;ma_keys-&gt;dk_lookup)(mp, key, hash, &amp;value);</span><br><span class="line">    <span class="keyword">if</span> (ix &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PyErr_Clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见，提供的 PyDict_GetItem 使用了 lookdict 及其相关函数。</p><h4 id="PyDict-DelItem"><a href="#PyDict-DelItem" class="headerlink" title="PyDict_DelItem"></a>PyDict_DelItem</h4><p>源码如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">PyDict_DelItem(PyObject *op, PyObject *key)</span><br><span class="line">&#123;</span><br><span class="line">    Py_hash_t hash;</span><br><span class="line">    assert(key);</span><br><span class="line">    <span class="keyword">if</span> (!PyUnicode_CheckExact(key) ||</span><br><span class="line">        (hash = ((PyASCIIObject *) key)-&gt;hash) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 获得 hash 值</span></span><br><span class="line">        hash = PyObject_Hash(key);</span><br><span class="line">        <span class="keyword">if</span> (hash == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _PyDict_DelItem_KnownHash(op, key, hash);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">_PyDict_DelItem_KnownHash(PyObject *op, PyObject *key, Py_hash_t hash)</span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t ix;</span><br><span class="line">    PyDictObject *mp;</span><br><span class="line">    PyObject *old_value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyDict_Check(op)) &#123;</span><br><span class="line">        PyErr_BadInternalCall();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(key);</span><br><span class="line">    assert(hash != <span class="number">-1</span>);</span><br><span class="line">    mp = (PyDictObject *)op;</span><br><span class="line">    ix = (mp-&gt;ma_keys-&gt;dk_lookup)(mp, key, hash, &amp;old_value);</span><br><span class="line">    <span class="keyword">if</span> (ix == DKIX_ERROR)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ix == DKIX_EMPTY || old_value == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除不存在的元素会抛出错误</span></span><br><span class="line">        _PyErr_SetKeyError(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split table doesn't allow deletion.  Combine it.</span></span><br><span class="line">    <span class="keyword">if</span> (_PyDict_HasSplitTable(mp)) &#123;</span><br><span class="line">        <span class="comment">// 从 split table 中删除元素会使它转换为 combine table</span></span><br><span class="line">        <span class="keyword">if</span> (dictresize(mp, DK_SIZE(mp-&gt;ma_keys))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ix = (mp-&gt;ma_keys-&gt;dk_lookup)(mp, key, hash, &amp;old_value);</span><br><span class="line">        assert(ix &gt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> delitem_common(mp, hash, ix, old_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PyDict_DelItem 是在计算出给定键的哈希值并寻找到对应数据储存在 dk_entreis 下标后，调用 delitem_common 实现删除操作的。</p><h4 id="PyDict-Contains"><a href="#PyDict-Contains" class="headerlink" title="PyDict_Contains"></a>PyDict_Contains</h4><p>PyDict_Contains 函数的源码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">PyDict_Contains(PyObject *op, PyObject *key)</span><br><span class="line">&#123;</span><br><span class="line">    Py_hash_t hash;</span><br><span class="line">    Py_ssize_t ix;</span><br><span class="line">    PyDictObject *mp = (PyDictObject *)op;</span><br><span class="line">    PyObject *value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyUnicode_CheckExact(key) ||</span><br><span class="line">        (hash = ((PyASCIIObject *) key)-&gt;hash) == <span class="number">-1</span>) &#123;</span><br><span class="line">        hash = PyObject_Hash(key);</span><br><span class="line">        <span class="keyword">if</span> (hash == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ix = (mp-&gt;ma_keys-&gt;dk_lookup)(mp, key, hash, &amp;value);</span><br><span class="line">    <span class="keyword">if</span> (ix == DKIX_ERROR)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> (ix != DKIX_EMPTY &amp;&amp; value != <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单的调用了 dk_lookup 函数，默认就是 lookdict_unicode 函数。</p><h2 id="内部优化"><a href="#内部优化" class="headerlink" title="内部优化"></a>内部优化</h2><h4 id="dict-缓存池"><a href="#dict-缓存池" class="headerlink" title="dict 缓存池"></a>dict 缓存池</h4><p>为了避免频繁申请、释放内存，导致过多的系统调用，在 cpython 中，很多内建对象都有自己的缓存池。例如，整数有针对小整数的缓存池，字符串有针对短字符串的缓存池，同样，dict 也有自己的缓存池：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PyDict_MAXFREELIST 80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyDictObject *free_list[PyDict_MAXFREELIST];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> numfree = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> PyDictKeysObject *keys_free_list[PyDict_MAXFREELIST];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> numfreekeys = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>可见，dict 使用数组实现缓存池，并且 PyDictObject 和 PyDictKeysObject 各有一个数组。</p><p>我们可以在新建 PyDictKeysObject 的函数 new_keys_object 中看到这样的代码片段：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (size == PyDict_MINSIZE &amp;&amp; numfreekeys &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 size 符合 PyDict_MINSIZE，且 numfreekeys 有剩余，就直接使用缓存池中的对象</span></span><br><span class="line">        dk = keys_free_list[--numfreekeys];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不能从缓存池中获取，就分配一段新内存。</span></span><br><span class="line">        <span class="comment">// 这里分配的大小是根据要哈希表的大小动态计算的</span></span><br><span class="line">        dk = PyObject_MALLOC(<span class="keyword">sizeof</span>(PyDictKeysObject)</span><br><span class="line">                             + es * size</span><br><span class="line">                             + <span class="keyword">sizeof</span>(PyDictKeyEntry) * usable);</span><br><span class="line">        <span class="keyword">if</span> (dk == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            PyErr_NoMemory();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中，PyDict_MINSIZE 默认情况下为 8，size 为新建的 PyDictKeysObject 里的哈希表大小。</p><p>当然，新建时能够从缓存池中获取，在销毁时也能归于缓存池。在销毁 PyDictKeysObject 的函数可以见到：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">free_keys_object(PyDictKeysObject *keys)</span><br><span class="line">&#123;</span><br><span class="line">    PyDictKeyEntry *entries = DK_ENTRIES(keys);</span><br><span class="line">    Py_ssize_t i, n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, n = keys-&gt;dk_nentries; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 一一减少储存数据的引用计数</span></span><br><span class="line">        <span class="comment">// 当引用计数为0，会触发各自的 delloc 函数</span></span><br><span class="line">        Py_XDECREF(entries[i].me_key);</span><br><span class="line">        Py_XDECREF(entries[i].me_value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keys-&gt;dk_size == PyDict_MINSIZE &amp;&amp; numfreekeys &lt; PyDict_MAXFREELIST) &#123;</span><br><span class="line">        keys_free_list[numfreekeys++] = keys;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PyObject_FREE(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果符合条件，使用<code>keys_free_list[numfreekeys++] = keys;</code>使对象回到缓存池。否则才调用 PyObject_FREE 销毁 keys。</p><h4 id="split-table"><a href="#split-table" class="headerlink" title="split table"></a>split table</h4><p>前面说过，PyDictKeysObject 中的 dk_indices 是实际的哈希表，而 dk_entries 是实际储存数据的区域。这样的构造使得每个 dict 内都各有一个 PyDictKeysObject 对象用来记录键值。然而，在解释器内部使用到了许多键是 unicode object 且插入顺序相同的 dict 对象，它们之间只有值不同。cpython 为这种情况设计了一种键值分开储存的 split table dict。split table 能够在唯有值不同的多个 dict 中共享 PyDictKeysObject 对象。</p><p>回想起前面的 PyDictObject 对象:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Number of items in the dictionary */</span></span><br><span class="line">    Py_ssize_t ma_used;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Dictionary version: globally unique, value change each time</span></span><br><span class="line"><span class="comment">       the dictionary is modified */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> ma_version_tag;</span><br><span class="line"></span><br><span class="line">    PyDictKeysObject *ma_keys;</span><br><span class="line"></span><br><span class="line">    PyObject **ma_values;</span><br><span class="line">&#125; PyDictObject;</span><br></pre></td></tr></table></figure></p><p>其中有一个未曾被我们注意的字段 <code>PyObject **ma_values;</code>，这是一个指向 PyObject* 的指针，实际就是在 split table dict 里面用来存放 dk_entries 的字段。</p><p>可以使用 make_keys_shard 将 combined table 转换为 split table:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USABLE_FRACTION(n) (((n) &lt;&lt; 1)/3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> new_values(size) PyMem_NEW(PyObject *, size)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyDictKeysObject *</span><br><span class="line">make_keys_shared(PyObject *op)</span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t i;</span><br><span class="line">    Py_ssize_t size;</span><br><span class="line">    PyDictObject *mp = (PyDictObject *)op;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyDict_CheckExact(op))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (!_PyDict_HasSplitTable(mp)) &#123;</span><br><span class="line">        PyDictKeyEntry *ep0;</span><br><span class="line">        PyObject **values;</span><br><span class="line">        <span class="keyword">if</span> (mp-&gt;ma_keys-&gt;dk_lookup == lookdict) &#123;</span><br><span class="line">            <span class="comment">// 新建 dict 时默认的查询函数是 lookdict_unicode</span></span><br><span class="line">            <span class="comment">// 如果查询函数是 lookdict，说明插入了非 unicode object 键，使 lookdict_unicode 退化为它</span></span><br><span class="line">            <span class="comment">// 而 split table 的键只能是 unicode object</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mp-&gt;ma_keys-&gt;dk_lookup == lookdict_unicode) &#123;</span><br><span class="line">            <span class="comment">/* Remove dummy keys */</span></span><br><span class="line">            <span class="comment">// dictresize 会删除 dk_indices 和 dk_entreis 中的 dummy</span></span><br><span class="line">            <span class="comment">// 同时将 dk_lookup 设置为 lookdict_unicode_nodummy</span></span><br><span class="line">            <span class="keyword">if</span> (dictresize(mp, DK_SIZE(mp-&gt;ma_keys)))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        assert(mp-&gt;ma_keys-&gt;dk_lookup == lookdict_unicode_nodummy);</span><br><span class="line">        <span class="comment">/* Copy values into a new array */</span></span><br><span class="line">        ep0 = DK_ENTRIES(mp-&gt;ma_keys);</span><br><span class="line">        <span class="comment">// 一个 dict 的负载因子总会小于 2/3，因此这里使用 USABLE_FRACTION 来获得新 dict 的最大大小</span></span><br><span class="line">        size = USABLE_FRACTION(DK_SIZE(mp-&gt;ma_keys));</span><br><span class="line">        values = new_values(size);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            PyErr_SetString(PyExc_MemoryError,</span><br><span class="line">                <span class="string">"Not enough memory to allocate new values array"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            values[i] = ep0[i].me_value;</span><br><span class="line">            ep0[i].me_value = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// lookdict_split 其实和 lookdict_unicode_nodummy 的逻辑一样</span></span><br><span class="line">        <span class="comment">// 只是最后数据从 ma_values 里面拿</span></span><br><span class="line">        mp-&gt;ma_keys-&gt;dk_lookup = lookdict_split;</span><br><span class="line">        mp-&gt;ma_values = values;</span><br><span class="line">    &#125;</span><br><span class="line">    DK_INCREF(mp-&gt;ma_keys);</span><br><span class="line">    <span class="keyword">return</span> mp-&gt;ma_keys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们拥有一个 split table dict 对象之后，就可以用 new_dict_with_shared_keys 函数建立另一个共享了这个对象 keys 对象的 dict 对象：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new_dict 使用给定的 keys 对象新建一个 dict 对象，并且将 ma_values 设置为 values</span></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">new_dict(PyDictKeysObject *keys, PyObject **values)</span><br><span class="line">&#123;</span><br><span class="line">    PyDictObject *mp;</span><br><span class="line">    assert(keys != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (numfree) &#123;</span><br><span class="line">        <span class="comment">// 直接从缓存池从拿一个对象</span></span><br><span class="line">        mp = free_list[--numfree];</span><br><span class="line">        assert (mp != <span class="literal">NULL</span>);</span><br><span class="line">        assert (Py_TYPE(mp) == &amp;PyDict_Type);</span><br><span class="line">        _Py_NewReference((PyObject *)mp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        mp = PyObject_GC_New(PyDictObject, &amp;PyDict_Type);</span><br><span class="line">        <span class="keyword">if</span> (mp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            DK_DECREF(keys);</span><br><span class="line">            free_values(values);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mp-&gt;ma_keys = keys;</span><br><span class="line">    mp-&gt;ma_values = values;</span><br><span class="line">    mp-&gt;ma_used = <span class="number">0</span>;</span><br><span class="line">    mp-&gt;ma_version_tag = DICT_NEXT_VERSION();</span><br><span class="line">    assert(_PyDict_CheckConsistency(mp));</span><br><span class="line">    <span class="keyword">return</span> (PyObject *)mp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Consumes a reference to the keys object */</span></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">new_dict_with_shared_keys(PyDictKeysObject *keys)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject **values;</span><br><span class="line">    Py_ssize_t i, size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得新 dict 的最小大小</span></span><br><span class="line">    size = USABLE_FRACTION(DK_SIZE(keys));</span><br><span class="line">    values = new_values(size);</span><br><span class="line">    <span class="keyword">if</span> (values == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        DK_DECREF(keys);</span><br><span class="line">        <span class="keyword">return</span> PyErr_NoMemory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="comment">// 初始化指针为 NULL</span></span><br><span class="line">        values[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_dict(keys, values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用 lookdict_split 函数从 split table 中查询值。它的逻辑大体和 lookdict_unicode_nodummy 相同，只是在读取值是从 ma_values 里面读取：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ep-&gt;me_key == key ||</span><br><span class="line">    (ep-&gt;me_hash == hash &amp;&amp; unicode_eq(ep-&gt;me_key, key))) &#123;</span><br><span class="line">    *value_addr = mp-&gt;ma_values[ix];</span><br><span class="line">    <span class="keyword">return</span> ix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此之外，有一个帮助我们判断一个 dict 是否是 split table 的宏：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PyDict_HasSplitTable(d) ((d)-&gt;ma_values != NULL)</span></span><br></pre></td></tr></table></figure></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>先就这样吧</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-12-31/50518040.jpg" alt="girl"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，python 中有一个应用得极其广泛内建对象——dict(字典)。cpython 解释器本身，以及大量的 python 程序，都依赖于 dict 对象。因此，dict 对象在 python 中设计得极其高效，其插入、删除、查询等操作的时间复杂度都是O(1)。&lt;/p&gt;
&lt;p&gt;dict 对象可以这样使用:&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scores = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Mike&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scores[&lt;span class=&quot;string&quot;&gt;&#39;Ariana&#39;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scores[&lt;span class=&quot;string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scores[&lt;span class=&quot;string&quot;&gt;&#39;Tim&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KeyError: &lt;span class=&quot;string&quot;&gt;&#39;Tim&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本文将从 cpython3.7 源码的角度出发，探讨 dict 对象的内部原理。主要将探讨以下几个内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dict 对象的结构、组成&lt;/li&gt;
&lt;li&gt;dict 解决哈希冲突的方式&lt;/li&gt;
&lt;li&gt;cpython 对 dict 的内部优化，如缓冲池、split table&lt;/li&gt;
&lt;li&gt;遍历 dict 保持插入顺序的原理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文的剖析基于 &lt;a href=&quot;https://github.com/python/cpython/blob/bb86bf4c4eaa30b1f5192dab9f389ce0bb61114d/Objects/dictobject.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/python/cpython/blob/bb86bf4c4eaa30b1f5192dab9f389ce0bb61114d/Objects/dictobject.c&lt;/a&gt; 这份源码。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="源码" scheme="https://arianx.me/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>值得夸耀的 bottle 微框架源代码之剖析</title>
    <link href="https://arianx.me/2018/11/27/bottle-source-code-analysis/"/>
    <id>https://arianx.me/2018/11/27/bottle-source-code-analysis/</id>
    <published>2018-11-27T12:54:21.000Z</published>
    <updated>2018-11-29T04:32:25.464Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在这片天空中张开双翼</p><p>自在地飞翔啊</p></blockquote><p>bottle 是一个快速、简单、轻量的 web 框架，它以一个单文件的形式发布，并且不依赖 python 标准库以外的任何库。bottle 为使用者提供了诸多便利，如：</p><ul><li>支持将动态 url 的请求映射到函数调用。</li><li>提供了一个简单的内置模板引擎，同时能够十分容易的替换为流行的 Mako、Jinja 等引擎。</li><li>同时提供了如文件上传、cookie读取等的实用工具。</li><li>并且内建了对许多常用兼容 python wsgi 规范的服务器的支持。</li></ul><p>值得称道的是，bottle 主要文件只有不到 5000 行的代码。小巧、精简，却五脏俱全，被运用于诸多生成环境。</p><p>本文将简要剖析尚未发布的 bottle 0.12.14 版的最新 <a href="https://github.com/bottlepy/bottle/commit/9fb3b05846b33e508545a26e424785e151d02323" target="_blank" rel="noopener">commit</a> 版本。</p><a id="more"></a><p>注意，本文中的所有代码片段都只显示出了核心逻辑部分，省略了部分与我们的剖析无关的代码。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>先从 hello, world 开始：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> app.template(<span class="string">'&lt;b&gt;Hello &#123;&#123;name&#125;&#125;&lt;/b&gt;!'</span>, name=name)</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">'localhost'</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure></p><p>首先关注里面的路由注册部分，route 的源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, path=None, method=<span class="string">'GET'</span>, callback=None, **config)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(callback)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> verb <span class="keyword">in</span> makelist(method):</span><br><span class="line">            verb = verb.upper()</span><br><span class="line">            route = Route(self, rule, verb, callback, **config)</span><br><span class="line">            self.add_route(route)</span><br><span class="line">        <span class="keyword">return</span> callback</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator(callback) <span class="keyword">if</span> callback <span class="keyword">else</span> decorator</span><br></pre></td></tr></table></figure></p><p>最后一行的<code>return decorator(callback) if callback else decorator</code>使得本函数既能像正常函数，又能像装饰器那样调用。除此之外，我们通过传入的信息生成了 Route 的实例，并传入生成的实例调用了<code>add_route</code>。 </p><p>我们看到<code>add_route</code> 方法实际上将生成的 <code>route</code> 实例注册到本应用上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_route</span><span class="params">(self, route)</span>:</span></span><br><span class="line">    self.routes.append(route)</span><br><span class="line">    self.router.add(route.rule, route.method, route, name=route.name)</span><br></pre></td></tr></table></figure></p><p>这里 <code>self.routes</code> 是一个收集了<code>route</code> 实例的列表，而 <code>self.router</code> 属性实际上是 <code>Router</code> 类的实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bottle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.routes = []</span><br><span class="line">        self.router = Router()</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>所以，注册路由，实际上就是根据给定的路由信息（映射的地址、方法、要调用的函数等）生成 <code>Route</code> 的实例，并将其收集到应用实例的 <code>routes</code> 属性，并注册到一个 <code>Router</code> 实例中。</p><p>这里，<code>Route</code> 可以简单理解为将我们提供的各种信息整合到一起的类，实际的路由逻辑则由关键的 <code>Router</code> 类来完成。因此，我们看看 <code>Router</code> 究竟能做什么。首先查看 <code>add</code> 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, strict=False)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    self._groups = &#123;&#125;  <span class="comment"># index of regexes to find them in dyna_routes</span></span><br><span class="line">    self.dyna_routes = &#123;&#125;</span><br><span class="line">    self.filters = &#123;</span><br><span class="line">        <span class="string">'re'</span>: <span class="keyword">lambda</span> conf: (_re_flatten(conf <span class="keyword">or</span> self.default_pattern),</span><br><span class="line">                            <span class="keyword">None</span>, <span class="keyword">None</span>),</span><br><span class="line">        <span class="string">'int'</span>: <span class="keyword">lambda</span> conf: (<span class="string">r'-?\d+'</span>, int, <span class="keyword">lambda</span> x: str(int(x))),</span><br><span class="line">        <span class="string">'float'</span>: <span class="keyword">lambda</span> conf: (<span class="string">r'-?[\d.]+'</span>, float, <span class="keyword">lambda</span> x: str(float(x))),</span><br><span class="line">        <span class="string">'path'</span>: <span class="keyword">lambda</span> conf: (<span class="string">r'.+?'</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, rule, method, target, name=None)</span>:</span></span><br><span class="line">    <span class="string">""" Add a new rule or replace the target for an existing rule. """</span></span><br><span class="line">    pattern = <span class="string">''</span>  <span class="comment"># Regular expression pattern with named groups</span></span><br><span class="line">    filters = []  <span class="comment"># Lists of wildcard input filters</span></span><br><span class="line">    builder = []  <span class="comment"># Data structure for the URL builder</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># _itertokens 通过一个正则表达式将动态 url 里面的参数信息提取出来</span></span><br><span class="line">    <span class="comment"># 如 /user/&lt;name:re:.*&gt;，key 为 name, mode 为 re, conf 为 .*</span></span><br><span class="line">    <span class="comment"># 对于没有参数的部分， key 就为那段 url，如 '/user'，mode 和 conf 为空</span></span><br><span class="line">    <span class="comment"># 因此，这段循环的用意就是提却出 rule 里面的参数信息，收集它的 filter，</span></span><br><span class="line">    <span class="comment"># 并由此构建出一个用来匹配路径的正则表达式</span></span><br><span class="line">    <span class="keyword">for</span> key, mode, conf <span class="keyword">in</span> self._itertokens(rule):</span><br><span class="line">        <span class="keyword">if</span> mode:</span><br><span class="line">            mask, in_filter, out_filter = self.filters[mode](conf)</span><br><span class="line">            pattern += <span class="string">'(?P&lt;%s&gt;%s)'</span> % (key, mask)</span><br><span class="line">            <span class="keyword">if</span> in_filter: filters.append((key, in_filter))</span><br><span class="line">        <span class="keyword">elif</span> key:</span><br><span class="line">            pattern += re.escape(key)</span><br><span class="line"></span><br><span class="line">    re_pattern = re.compile(<span class="string">'^(%s)$'</span> % pattern)</span><br><span class="line">    re_match = re_pattern.match</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getargs</span><span class="params">(path)</span>:</span></span><br><span class="line">        url_args = re_match(path).groupdict()</span><br><span class="line">        <span class="comment"># 根据 filter 过滤参数</span></span><br><span class="line">        <span class="keyword">for</span> name, wildcard_filter <span class="keyword">in</span> filters:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                url_args[name] = wildcard_filter(url_args[name])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">raise</span> HTTPError(<span class="number">400</span>, <span class="string">'Path has wrong format.'</span>)</span><br><span class="line">        <span class="keyword">return</span> url_args</span><br><span class="line"></span><br><span class="line">    <span class="comment"># _re_flatten 将正则表达式里面的捕获组转换为非捕获组</span></span><br><span class="line">    flatpat = _re_flatten(pattern)</span><br><span class="line">    whole_rule = (rule, flatpat, target, getargs)</span><br><span class="line"></span><br><span class="line">    self.dyna_routes.setdefault(method, []).append(whole_rule)</span><br><span class="line">    self._groups[flatpat, method] = len(self.dyna_routes[method]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    self._compile(method)</span><br></pre></td></tr></table></figure></p><p>可见，<code>add</code> 方法主要是检查了提供的 rule，并从中提取出了动态路由所需的参数信息，根据给定的 rule，生成一个用来匹配路径的正则表达式。这里将与此次路由相关的信息收集到 <code>self.dyna_routes</code> 里面，将用来匹配的正则表达式收集到 <code>self._groups</code> 里面。在最后，调用了 <code>self._compile(method)</code> ：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compile</span><span class="params">(self, method)</span>:</span></span><br><span class="line">    all_rules = self.dyna_routes[method]</span><br><span class="line">    comborules = self.dyna_regexes[method] = []</span><br><span class="line">    combined = (flatpat <span class="keyword">for</span> (_, flatpat, _, _) <span class="keyword">in</span> all_rules)</span><br><span class="line">    combined = <span class="string">'|'</span>.join(<span class="string">'(^%s$)'</span> % flatpat <span class="keyword">for</span> flatpat <span class="keyword">in</span> combined)</span><br><span class="line">    combined = re.compile(combined).match</span><br><span class="line">    rules = [(target, getargs) <span class="keyword">for</span> (_, _, target, getargs) <span class="keyword">in</span> all_rules]</span><br><span class="line">    comborules.append((combined, rules))</span><br></pre></td></tr></table></figure></p><p>每次 <code>self.add</code> 一个新的路由信息，就会根据我们指定的与路由对应的 <code>method</code> 调用一次 <code>_compile</code>。而 <code>_compile</code> 里面，则清空 <code>self.dyna_regexes[method]</code>，并添加进根据我们在 <code>self.add</code> 里面修改了的 <code>self.dyna_routes[method]</code>，拼接的一个新的、由 <code>|</code> 连接起不同路由的正则表达式。</p><p>到此处我们已经可以窥见 bottle 映射路由的方式：每个方法的每个路由，都有一个独一无二的正则表达式能用来匹配路径并从中提取参数；每次添加路由，都将这个方法所对应的所有路由的正则表达式与这个方法的所有其它路由的正则表达式通过 <code>|</code> 拼接在一起；这样，以后每次请求时，只要根据所请求的方法使路径匹配这个巨大的正则表达式，就能够找出我们所需要的唯一信息。</p><p>为了印证我们的想法，我们查看 <code>Router</code> 类暴露出来匹配路径的方法 <code>match</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">    <span class="string">""" Return a (target, url_args) tuple or raise HTTPError(400/404/405). """</span></span><br><span class="line">    verb = environ[<span class="string">'REQUEST_METHOD'</span>].upper()</span><br><span class="line">    path = environ[<span class="string">'PATH_INFO'</span>] <span class="keyword">or</span> <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">        <span class="keyword">for</span> combined, rules <span class="keyword">in</span> self.dyna_regexes[method]:</span><br><span class="line">            match = combined(path)</span><br><span class="line">            <span class="keyword">if</span> match:</span><br><span class="line">                target, getargs = rules[match.lastindex - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">return</span> target, getargs(path) <span class="keyword">if</span> getargs <span class="keyword">else</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>注意到此处<code>combined</code>中由<code>|</code>连接起来的捕获组与<code>rules</code>的一一对应关系，这个关系由<code>add</code>与前面的<code>_compile</code>方法共同确保。这里，返回的<code>target</code>是实际要映射的可调用对象，<code>getargs(path)</code>则是动态路由指定的参数。</p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>上一节中我们检查了 bottle 中对路由注册处理，此节我们关注 bottle 究竟怎样实现其 wsgi 应用部分的。这样，我们就知道在背后，bottle 处理请求的整个大概流程。</p><p>首先关注<code>Bottle</code>类的 <code>__call__</code> 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">    <span class="string">""" Each instance of :class:'Bottle' is a WSGI application. """</span></span><br><span class="line">    <span class="keyword">return</span> self.wsgi(environ, start_response)</span><br></pre></td></tr></table></figure></p><p>简单转发给了<code>self.wsgi</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">    <span class="string">""" The bottle WSGI-interface. """</span></span><br><span class="line">    out = self._cast(self._handle(environ))</span><br><span class="line">    <span class="comment"># rfc2616 section 4.3</span></span><br><span class="line">    <span class="keyword">if</span> response._status_code <span class="keyword">in</span> (<span class="number">100</span>, <span class="number">101</span>, <span class="number">204</span>, <span class="number">304</span>)\</span><br><span class="line">    <span class="keyword">or</span> environ[<span class="string">'REQUEST_METHOD'</span>] == <span class="string">'HEAD'</span>:</span><br><span class="line">        <span class="keyword">if</span> hasattr(out, <span class="string">'close'</span>): out.close()</span><br><span class="line">        out = []</span><br><span class="line">    start_response(response._status_line, response.headerlist)</span><br><span class="line">    <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure></p><p>首先根据服务器提供的，包含了请求信息的<code>environ</code>字典，先后调用了<code>self._handle</code>和<code>self._cast</code>得出结果，再将<code>response</code>里面的 header 信息和 status 信息传递给了<code>start_response</code>，最后返回了<code>out</code>作为结果。注意到，如果状态码是 100、101、204、304，或者请求的方法为<code>HEAD</code>，那么根据 HTTP1.1 协议的标准，响应没有 body，因此将 out 设为空。</p><p>下面我们关注具体处理了请求的<code>self._handle</code>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">    request.bind(environ)</span><br><span class="line">    response.bind()</span><br><span class="line"></span><br><span class="line">    route, args = self.router.match(environ)</span><br><span class="line">    out = route.call(**args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure></p><p>注意到此处的<code>self.router.match</code>我们已经在上节提到过，其返回我们指定的可调用对象及从动态url中获得的参数。</p><p>根据指定的可调用对象获得<code>out</code>之后，会交给<code>self._cast</code>处理，将它转化为一个合法的响应对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_cast</span><span class="params">(self, out, peek=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> out:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Content-Length'</span> <span class="keyword">not</span> <span class="keyword">in</span> response:</span><br><span class="line">            response[<span class="string">'Content-Length'</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="comment"># Join lists of byte or unicode strings. Mixed lists are NOT supported</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(out, (tuple, list))\</span><br><span class="line">    <span class="keyword">and</span> isinstance(out[<span class="number">0</span>], (bytes, unicode)):</span><br><span class="line">        out = out[<span class="number">0</span>][<span class="number">0</span>:<span class="number">0</span>].join(out)  <span class="comment"># b'abc'[0:0] -&gt; b''</span></span><br><span class="line">    <span class="comment"># Encode unicode strings</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(out, unicode):</span><br><span class="line">        out = out.encode(response.charset)</span><br><span class="line">    <span class="comment"># Byte Strings are just returned</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(out, bytes):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Content-Length'</span> <span class="keyword">not</span> <span class="keyword">in</span> response:</span><br><span class="line">            response[<span class="string">'Content-Length'</span>] = len(out)</span><br><span class="line">        <span class="keyword">return</span> [out]</span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>可以看出，一个请求进入 bottle 之后其会按顺序被以下方法处理：<br><code>__call__（暴露的接口） -&gt; wsgi(按照 wsgi 协议处理请求) -&gt; _handle(将请求映射到我们指定的可调用对象并得到结果) -&gt; _cast(将结果转换为合法的响应对象)</code></p><h2 id="请求和响应对象"><a href="#请求和响应对象" class="headerlink" title="请求和响应对象"></a>请求和响应对象</h2><p>bottle 不单只为我们做了映射请求的幕后工作，为了方便我们的开发，还提供了一系列实用工具。其中，至关重要的两个就是<code>request</code>和<code>response</code>对象。<code>request</code>对象为我们封装了请求的信息，<code>response</code>对象可以让我们方便的定制响应。值得注意的是，这两个对象，在 bottle 里面是线程安全的。也就是说，在多线程环境运行下，两个同时发生的请求对这两个对象的修改互不影响。bottle 怎么实现这一点的呢？关键是利用了<code>本地线程储存对象</code>。</p><p>所谓本地线程储存对象，就是说，我们可以实例化一个 <code>threading.local</code>。如果一个线程修改了这个实例上的属性，这个修改只有线程本身能够看到。具体可以查阅<a href="https://docs.python.org/3/library/threading.html#thread-local-data" target="_blank" rel="noopener">官方文档</a></p><p>首先查看 <code>request</code> 的源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">request = LocalRequest()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalRequest</span><span class="params">(BaseRequest)</span>:</span></span><br><span class="line">    bind = BaseRequest.__init__</span><br><span class="line">    environ = _local_property()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_local_property</span><span class="params">()</span>:</span></span><br><span class="line">    ls = threading.local()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fget</span><span class="params">(_)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> ls.var</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"Request context not initialized."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fset</span><span class="params">(_, value)</span>:</span></span><br><span class="line">        ls.var = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fdel</span><span class="params">(_)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> ls.var</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> property(fget, fset, fdel, <span class="string">'Thread-local property'</span>)</span><br></pre></td></tr></table></figure></p><p>这里<code>LocalRequest.environ</code>是一个本地线程线程储存对象的描述符，并且注意到<code>bind</code>方法实际上就是<code>BaseRequest</code>的<code>__init__</code>方法。联想起我们曾经在上面使用过<code>request.bind(environ)</code>这样的语句，可以得出，实际上我们在我们的视图函数里面的调用的<code>request</code>对象，都是根据本次请求的<code>environ</code>初始化了的线程本地变量，因此每个<code>request</code>会根据请求环境的不同而不同。</p><p>接下来我们关注<code>BaseRequest</code>类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRequest</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'environ'</span>, )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ=None)</span>:</span></span><br><span class="line">        self.environ = &#123;&#125; <span class="keyword">if</span> environ <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> environ</span><br><span class="line">        self.environ[<span class="string">'bottle.request'</span>] = self</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'/'</span> + self.environ.get(<span class="string">'PATH_INFO'</span>, <span class="string">''</span>).lstrip(<span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.environ.get(<span class="string">'REQUEST_METHOD'</span>, <span class="string">'GET'</span>).upper()</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>初始化方法中将传入的<code>environ</code>绑定到了<code>self.environ</code>上，注意到在<code>_handle</code>方法中调用<code>bind</code>时<code>self.environ</code>已经是一个线程本地变量。<code>BaseRequest</code>存在诸多描述符封装了服务器提供的<code>environ</code>字典，方便我们获取信息，此处不一一列出来。</p><p><code>response</code>对象在本地线程储存方面与<code>request</code>如出一辙，我们可以直接在<code>response</code>上赋值，告诉框架我们想要的响应状态或 header。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h4 id="DEBUG-模式下的自动重启机制"><a href="#DEBUG-模式下的自动重启机制" class="headerlink" title="DEBUG 模式下的自动重启机制"></a>DEBUG 模式下的自动重启机制</h4><p>自动重启指，如果将 bottle 设置为在 DEBUG 模式下运行，那么，每当源代码有更改时，服务器将自动重启，以适应更改。本节我们考察 bottle 如何实现这一点。</p><p>我们直接查看<code>run</code>函数的部分源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(...)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> reloader <span class="keyword">and</span> <span class="keyword">not</span> os.environ.get(<span class="string">'BOTTLE_CHILD'</span>):</span><br><span class="line">        <span class="keyword">import</span> subprocess</span><br><span class="line">        lockfile = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fd, lockfile = tempfile.mkstemp(prefix=<span class="string">'bottle.'</span>, suffix=<span class="string">'.lock'</span>)</span><br><span class="line">            os.close(fd)  <span class="comment"># We only need this file to exist. We never write to it</span></span><br><span class="line">            <span class="keyword">while</span> os.path.exists(lockfile):</span><br><span class="line">                args = [sys.executable] + sys.argv</span><br><span class="line">                environ = os.environ.copy()</span><br><span class="line">                environ[<span class="string">'BOTTLE_CHILD'</span>] = <span class="string">'true'</span></span><br><span class="line">                environ[<span class="string">'BOTTLE_LOCKFILE'</span>] = lockfile</span><br><span class="line">                p = subprocess.Popen(args, env=environ)</span><br><span class="line">                <span class="keyword">while</span> p.poll() <span class="keyword">is</span> <span class="keyword">None</span>:  <span class="comment"># Busy wait...</span></span><br><span class="line">                    os.utime(lockfile, <span class="keyword">None</span>)  <span class="comment"># I am alive!</span></span><br><span class="line">                    time.sleep(interval)</span><br><span class="line">                <span class="keyword">if</span> p.poll() != <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(lockfile): os.unlink(lockfile)</span><br><span class="line">                    sys.exit(p.poll())</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(lockfile):</span><br><span class="line">                os.unlink(lockfile)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>可以看到，如果设置了自动重启，那么在启动 bottle 主线程时并不会实际运行服务器，而是设置了一个用来标识是否会自动重启的环境变量，然后在又启动了一个子线程。</p><p>值得注意的是，这里通过轮询 <code>p.poll()</code> 查看子进程是否已经退出，并且检查返回的状态码。如果状态码为 3，那么就会重新启动子线程。如果子线程没有退出，那么就会更新创建的临时文件的时间。在后面我们会看到，这个临时文件用来检查主线程是否结束。</p><p>接下来我们查看<code>run</code>函数的剩余部分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(...)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    server = server_names.get(server)</span><br><span class="line">    <span class="keyword">if</span> reloader:</span><br><span class="line">        lockfile = os.environ.get(<span class="string">'BOTTLE_LOCKFILE'</span>)</span><br><span class="line">        bgcheck = FileCheckerThread(lockfile, interval)</span><br><span class="line">        <span class="keyword">with</span> bgcheck:</span><br><span class="line">            server.run(app)</span><br><span class="line">        <span class="keyword">if</span> bgcheck.status == <span class="string">'reload'</span>:</span><br><span class="line">            sys.exit(<span class="number">3</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>关键在于<code>FileCheckerThread</code>这个上下文管理器。在上下文管理器退出后，会检查它的<code>status</code>状态，如果为<code>reload</code>，就以状态码 3 退出，前面说过，这个状态码会导致主线程重新启动一个实际运行服务的子线程。</p><p>我们审查<code>FileCheckerThread</code>实际做了什么：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileCheckerThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">""" Interrupt main-thread as soon as a changed module file is detected,</span></span><br><span class="line"><span class="string">        the lockfile gets deleted or gets too old. """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lockfile, interval)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.daemon = <span class="keyword">True</span></span><br><span class="line">        self.lockfile, self.interval = lockfile, interval</span><br><span class="line">        <span class="comment">#: Is one of 'reload', 'error' or 'exit'</span></span><br><span class="line">        self.status = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        exists = os.path.exists</span><br><span class="line">        mtime = <span class="keyword">lambda</span> p: os.stat(p).st_mtime</span><br><span class="line">        files = dict()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> module <span class="keyword">in</span> list(sys.modules.values()):</span><br><span class="line">            path = getattr(module, <span class="string">'__file__'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> path[<span class="number">-4</span>:] <span class="keyword">in</span> (<span class="string">'.pyo'</span>, <span class="string">'.pyc'</span>): path = path[:<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> path <span class="keyword">and</span> exists(path): files[path] = mtime(path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.status:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> exists(self.lockfile)\</span><br><span class="line">            <span class="keyword">or</span> mtime(self.lockfile) &lt; time.time() - self.interval - <span class="number">5</span>:</span><br><span class="line">                self.status = <span class="string">'error'</span></span><br><span class="line">                thread.interrupt_main()</span><br><span class="line">            <span class="keyword">for</span> path, lmtime <span class="keyword">in</span> list(files.items()):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> exists(path) <span class="keyword">or</span> mtime(path) &gt; lmtime:</span><br><span class="line">                    self.status = <span class="string">'reload'</span></span><br><span class="line">                    thread.interrupt_main()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            time.sleep(self.interval)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, *_)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.status: self.status = <span class="string">'exit'</span>  <span class="comment"># silent exit</span></span><br><span class="line">        self.join()</span><br><span class="line">        <span class="keyword">return</span> exc_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> issubclass(exc_type, KeyboardInterrupt)</span><br></pre></td></tr></table></figure></p><p>这个上下文管理器巧妙的与线程结合在了一起。它会开一个线程用来监视文件是否更改，或者是主线程是否已经退出，并且在上下文管理器退出(<code>__exit__</code>)时阻塞。注意，在上一段代码中它包裹的<code>server.run(app)</code>本身已经将原来的线程阻塞。这里，只有在有文件更改，或者是主线程退出时，它会调用<code>thread.interrupt_main()</code>在主线程弹出<code>KeyboardInterrupt</code>结束服务的运行，并且在<code>__exit__</code>中将这个异常捕获。</p><p>同时也注意到这里是通过轮询比较<code>sys.modules</code>中出现的文件的更新时间来判断文件是否被修改的。</p><h4 id="默认-app"><a href="#默认-app" class="headerlink" title="默认 app"></a>默认 app</h4><p>可以不手动引入<code>Bottle</code>类创建一个 app，而是引入<code>route</code>、<code>run</code>等方法直接开始，例如官方文档中的示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> route, run, template</span><br><span class="line"></span><br><span class="line"><span class="meta">@route('/hello/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> template(<span class="string">'&lt;b&gt;Hello &#123;&#123;name&#125;&#125;&lt;/b&gt;!'</span>, name=name)</span><br><span class="line"></span><br><span class="line">run(host=<span class="string">'localhost'</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure></p><p>下面我们看看 bottle 是怎么处理这种情况的。我们查看直接引入的<code>route</code>源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">route = make_default_app_wrapper(<span class="string">'route'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_default_app_wrapper</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="string">""" Return a callable that relays calls to the current default app. """</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(getattr(Bottle, name))</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*a, **ka)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(app(), name)(*a, **ka)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">apps = app = default_app = AppStack()</span><br></pre></td></tr></table></figure></p><p>可以看到源码中已经又一个已经存在的<code>app</code>对象，我们导入的各个方法都是对这个对象上方法的代理。我们查看<code>AppStack</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppStack</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">""" A stack-like list. Calling it returns the head of the stack. """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" Return the current default application. """</span></span><br><span class="line">        <span class="keyword">return</span> self.default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, value=None)</span>:</span></span><br><span class="line">        <span class="string">""" Add a new :class:`Bottle` instance to the stack """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, Bottle):</span><br><span class="line">            value = Bottle()</span><br><span class="line">        self.append(value)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    new_app = push</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">return</span> self.push()</span><br></pre></td></tr></table></figure></p><p>可以看到实际上实现了一个储存应用实例的栈，并且当没有实例存在于栈中时，会自动新建一个。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最近天气渐渐变得寒冷了呢:D</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-11-28/41629255.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在这片天空中张开双翼&lt;/p&gt;
&lt;p&gt;自在地飞翔啊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;bottle 是一个快速、简单、轻量的 web 框架，它以一个单文件的形式发布，并且不依赖 python 标准库以外的任何库。bottle 为使用者提供了诸多便利，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持将动态 url 的请求映射到函数调用。&lt;/li&gt;
&lt;li&gt;提供了一个简单的内置模板引擎，同时能够十分容易的替换为流行的 Mako、Jinja 等引擎。&lt;/li&gt;
&lt;li&gt;同时提供了如文件上传、cookie读取等的实用工具。&lt;/li&gt;
&lt;li&gt;并且内建了对许多常用兼容 python wsgi 规范的服务器的支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得称道的是，bottle 主要文件只有不到 5000 行的代码。小巧、精简，却五脏俱全，被运用于诸多生成环境。&lt;/p&gt;
&lt;p&gt;本文将简要剖析尚未发布的 bottle 0.12.14 版的最新 &lt;a href=&quot;https://github.com/bottlepy/bottle/commit/9fb3b05846b33e508545a26e424785e151d02323&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;commit&lt;/a&gt; 版本。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="源码" scheme="https://arianx.me/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>深具传统的 bobo 微框架源代码之阅读</title>
    <link href="https://arianx.me/2018/10/30/bobo-source-code-reading-note/"/>
    <id>https://arianx.me/2018/10/30/bobo-source-code-reading-note/</id>
    <published>2018-10-30T01:27:19.000Z</published>
    <updated>2018-11-28T11:29:17.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不做也行的事情就不做，非做不可的事情一切从简。</p></blockquote><p><a href="https://github.com/zopefoundation/bobo" target="_blank" rel="noopener">bobo</a> 是一个诞生于上世纪的，直到近两年仍然在更新的 python web 微框架。可以说深具传统，从侧面上见证了这么多年来 python 在 web 开发领域的种种发展。据说，正是这个框架将 fluend python 的作者 Luciano Ramalho 带入了 python 编程的生涯。</p><a id="more"></a><p>bobo 框架的特殊之处在于，它是 python 里首个利用 python 强大的动态特性、面向对象特性，用短短一千多行的核心代码，将 url 直接映射到对象层次结构上，而不是使用传统的路由配置的框架。<a href="https://bobo.readthedocs.io/en/latest/" target="_blank" rel="noopener">bobo 文档</a> 里的 hello world例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bobo</span><br><span class="line"></span><br><span class="line"><span class="meta">@bobo.query('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br></pre></td></tr></table></figure></p><p>可以看到，这个例子和现在的知名框架 Bottle 和 Flask 十分相像。其实，Bottle 和 Flask 如今的 url 映射方式，可以说都是从 bobo 框架里受到的启发。</p><p>bobo 文档里提到，它主要提供了两个功能：</p><ol><li>将 url 映射到对象。</li><li>调用对象生成HTTP响应。</li></ol><p>本文将简要剖析 bobo 源代码，以理解它是怎么实现这两个功能的。</p><h2 id="注册视图函数"><a href="#注册视图函数" class="headerlink" title="注册视图函数"></a>注册视图函数</h2><h3 id="底下的-handler-函数"><a href="#底下的-handler-函数" class="headerlink" title="底下的 _handler 函数"></a>底下的 _handler 函数</h3><p>为了方便和直观起见，就让我们从上到下，先从我们直接接触的注册视图函数的部分开始，剖析 bobo 的代码吧。首先查看 query 方法的源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(route=None, method=<span class="params">(<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'HEAD'</span>)</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">          content_type=_default_content_type, check=None, order=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> _handler(route, method=method, params=<span class="string">'params'</span>, check=check,</span><br><span class="line">                    content_type=content_type, order_=order)</span><br></pre></td></tr></table></figure></p><p>可见，query 方法只是简单将它的参数转发给了 _handler 函数。实际上是 _handler 函数在底下完成了 query 的功能。</p><p>无独有偶，我们可以查看 bobo 中与 query 对应的，其它几个注册视图的函数的源码，例如 post：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(route=None, content_type=_default_content_type, check=None,</span></span></span><br><span class="line"><span class="function"><span class="params">         order=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> _handler(route, method=<span class="string">"POST"</span>, params=<span class="string">'POST'</span>, check=check,</span><br><span class="line">                    content_type=content_type, order_=order)</span><br></pre></td></tr></table></figure></p><p>可以发现，实际上 bobo 暴露出来的几个注册视图的函数，例如 get、post、query，都只是对 _handler 函数的简单封装，为其提供了不同的参数。因此我们继续查看 _handler 函数的源码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handler</span><span class="params">(route, func=None, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> func <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">if</span> route <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> isinstance(route, six.string_types):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span> f: _handler(route, f, **kw)</span><br><span class="line">        func = route</span><br><span class="line">        route = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">elif</span> route <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> isinstance(route, six.string_types)</span><br><span class="line">        <span class="keyword">if</span> route <span class="keyword">and</span> <span class="keyword">not</span> route.startswith(<span class="string">'/'</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Non-empty routes must start with '/'."</span>, route)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _Handler(route, func, **kw)</span><br></pre></td></tr></table></figure></p><p>注意，2-6 行代码使得注册视图函数能够以多种方式调用，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@query</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@query()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@query(None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br></pre></td></tr></table></figure></p><p>三种调用方式是等同的。</p><h3 id="生成的-Handler-实例"><a href="#生成的-Handler-实例" class="headerlink" title="生成的 _Handler 实例"></a>生成的 _Handler 实例</h3><p>最后，_handler 将它的参数传递给了 _Handler 类，再返回。因此，实际上最终我们声明的视图函数变成了 _Handler 类的实例。下面我们再查看 _Handler 的初始化方法的源码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">_ext_re = re.compile(<span class="string">'/(\w+)'</span>).search</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Handler</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    省略了其它方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    partial = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, route, handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                 method=None, params=None, check=None, content_type=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 order_=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> route <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            route = <span class="string">'/'</span>+handler.__name__</span><br><span class="line">            ext = _ext_re(content_type)</span><br><span class="line">            <span class="keyword">if</span> ext:</span><br><span class="line">                route += <span class="string">'.'</span>+ext.group(<span class="number">1</span>)</span><br><span class="line">        self.bobo_route = route</span><br><span class="line">        <span class="keyword">if</span> isinstance(method, six.string_types):</span><br><span class="line">            method = (method, )</span><br><span class="line">        self.bobo_methods = method</span><br><span class="line"></span><br><span class="line">        self.handler = handler</span><br><span class="line">        self.bobo_original = getattr(handler, <span class="string">'bobo_original'</span>, handler)</span><br><span class="line">        bobo_sub_find = getattr(handler, <span class="string">'bobo_response'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> bobo_sub_find <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.bobo_sub_find = bobo_sub_find</span><br><span class="line"></span><br><span class="line">        self.content_type = content_type</span><br><span class="line">        self.params = params</span><br><span class="line">        self.check = check</span><br><span class="line">        <span class="keyword">if</span> order_ <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># order() 返回一个始终增大的数字</span></span><br><span class="line">            order_ = order()</span><br><span class="line">        self.bobo_order = order_</span><br></pre></td></tr></table></figure></p><p>可见，在 route 为 None 时，bobo 根据 handler 的名称和 content_type 的类型，自动为我们生成了 route。并且，我们传入的其它参数被绑定在了实例上。</p><h4 id="获取动态路由的信息"><a href="#获取动态路由的信息" class="headerlink" title="获取动态路由的信息"></a>获取动态路由的信息</h4><p>此外，_Handler 类上有几个值得我们特别关注的方法，其中一个是 match:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@_cached_property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self)</span>:</span></span><br><span class="line">    route_data = _compile_route(self.bobo_route, self.partial)</span><br><span class="line">    methods = self.bobo_methods</span><br><span class="line">    <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        match = route_data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(request, path, method)</span>:</span></span><br><span class="line">            data = route_data(request, path)</span><br><span class="line">            <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">if</span> method <span class="keyword">not</span> <span class="keyword">in</span> methods:</span><br><span class="line">                    <span class="keyword">raise</span> MethodNotAllowed(methods)</span><br><span class="line">                <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    self.__dict__[<span class="string">'match'</span>] = match</span><br><span class="line">    <span class="keyword">return</span> match</span><br></pre></td></tr></table></figure></p><p>其中，_cached_property 的源码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_cached_property</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, inst, class_)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.func(inst)</span><br></pre></td></tr></table></figure></p><p>match 方法的奇异之处在于，它巧用了描述符，在第一次被访问的时候根据我们传入的参数，生成另外的函数替换自己。真正的 match 函数根据 request 和 path 产生了 route data，如果 method 参数在我们传入的 methods 里，就返回 data，否则就抛出 MethodNotAllowed。这里我们关注产生了根据请求匹配路由函数的 _compile_route 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">route_re = re.compile(<span class="string">r'(/:[a-zA-Z]\w*\??)(\.[^/]+)?'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compile_route</span><span class="params">(route, partial=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成根据给定路径解析对应路由，返回其中包含的关键字参数的函数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> route.startswith(<span class="string">'/'</span>) <span class="keyword">or</span> <span class="keyword">not</span> route</span><br><span class="line">    <span class="comment"># split 扫描整个字符串并将与模式匹配与否的部分相互分开</span></span><br><span class="line">    <span class="comment"># 并且匹配完整的模式一遍就会加一个 None 以分隔</span></span><br><span class="line">    pat = route_re.split(route)</span><br><span class="line">    <span class="comment"># 反转以方便 pop</span></span><br><span class="line">    pat.reverse()</span><br><span class="line">    rpat = []</span><br><span class="line">    prefix = pat.pop()</span><br><span class="line">    <span class="comment"># 静态前缀，如果没有会是一个空字符串</span></span><br><span class="line">    <span class="keyword">if</span> prefix:</span><br><span class="line">        rpat.append(re.escape(prefix))</span><br><span class="line">    <span class="keyword">while</span> pat:</span><br><span class="line">        name = pat.pop()[<span class="number">2</span>:]</span><br><span class="line">        optional = name.endswith(<span class="string">'?'</span>)</span><br><span class="line">        <span class="keyword">if</span> optional:</span><br><span class="line">            name = name[:<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 构造一个具名匹配组，匹配 / 以外的字符</span></span><br><span class="line">        name = <span class="string">'/(?P&lt;%s&gt;[^/]*)'</span> % name</span><br><span class="line">        ext = pat.pop()</span><br><span class="line">        <span class="keyword">if</span> ext:</span><br><span class="line">            name += re.escape(ext)</span><br><span class="line">        <span class="keyword">if</span> optional:</span><br><span class="line">            <span class="comment"># 如果这个路由可选择，则包围以可选择的匹配组</span></span><br><span class="line">            name = <span class="string">'(%s)?'</span> % name</span><br><span class="line">        rpat.append(name)</span><br><span class="line">        s = pat.pop()</span><br><span class="line">        <span class="keyword">if</span> s:</span><br><span class="line">            <span class="comment"># 静态后缀</span></span><br><span class="line">            rpat.append(re.escape(s))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> partial:</span><br><span class="line">        <span class="comment"># 如果提供了 partial，表明只匹配一部分路径</span></span><br><span class="line">        match = re.compile(<span class="string">''</span>.join(rpat)).match</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">partial_route_data</span><span class="params">(request, path, method=None)</span>:</span></span><br><span class="line">            m = match(path)</span><br><span class="line">            <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> m</span><br><span class="line">            path = path[len(m.group(<span class="number">0</span>)):]</span><br><span class="line">            <span class="comment"># 那么返回关键字参数和剩余路径</span></span><br><span class="line">            <span class="keyword">return</span> (dict(item <span class="keyword">for</span> item <span class="keyword">in</span> six.iteritems(m.groupdict())</span><br><span class="line">                         <span class="keyword">if</span> item[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>),</span><br><span class="line">                    path,</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> partial_route_data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 没有partial，匹配到结尾</span></span><br><span class="line">        match = re.compile(<span class="string">''</span>.join(rpat)+<span class="string">'$'</span>).match</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">route_data</span><span class="params">(request, path, method=None)</span>:</span></span><br><span class="line">            m = match(path)</span><br><span class="line">            <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> m</span><br><span class="line">            <span class="comment"># 直接返回对应参数</span></span><br><span class="line">            <span class="keyword">return</span> dict(item <span class="keyword">for</span> item <span class="keyword">in</span> six.iteritems(m.groupdict())</span><br><span class="line">                        <span class="keyword">if</span> item[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> route_data</span><br></pre></td></tr></table></figure></p><p>这个函数的意思是说，我们可以设置动态路由，然后获取其中动态部分的参数，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@query(&apos;/people/:name&apos;)</span><br></pre></td></tr></table></figure></p><p>_compile_route 生成的 match 函数会返回动态路由参数组成的字典。</p><p>可见 bobo 通过正则匹配的方式实现了动态路由里面参数的获取。</p><h4 id="内省视图函数"><a href="#内省视图函数" class="headerlink" title="内省视图函数"></a>内省视图函数</h4><p>_Handler 类还有一个非常重要的，与 match 方法相似的方法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@_cached_property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bobo_handle</span><span class="params">(self)</span>:</span></span><br><span class="line">    func = original = self.bobo_original</span><br><span class="line">    <span class="keyword">if</span> self.params:</span><br><span class="line">        func = _make_caller(func, self.params)</span><br><span class="line">    func = _make_bobo_handle(func, original, self.check, self.content_type)</span><br><span class="line">    self.__dict__[<span class="string">'bobo_handle'</span>] = func</span><br><span class="line">    <span class="keyword">return</span> func</span><br></pre></td></tr></table></figure></p><p>这里主要用到了我们最初传入 _Handler 的一些参数，调用了 _make_caller 和 _make_bobo_handle 产生了真正的 bobo_handle 方法。其中，_make_caller 实际上内省了我们定义的视图函数，根据 match 获取的动态路由和 request 里面的信息，给我们的视图函数提供了参数。</p><p>现在我们关注 _make_caller:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">_no_jget = &#123;&#125;.get</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_caller</span><span class="params">(obj, paramsattr)</span>:</span></span><br><span class="line">    <span class="comment"># getargspec = inspect.getargspec if six.PY2 else inspect.getfullargspec</span></span><br><span class="line">    spec = getargspec(obj)</span><br><span class="line">    nargs = nrequired = len(spec.args)</span><br><span class="line">    <span class="keyword">if</span> spec.defaults:</span><br><span class="line">        nrequired -= len(spec.defaults)</span><br><span class="line">    no_jget = _no_jget</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bobo_apply</span><span class="params">(*pargs, **route)</span>:</span></span><br><span class="line">        request = pargs[<span class="number">-1</span>]</span><br><span class="line">        pargs = pargs[:<span class="number">-1</span>]  <span class="comment"># () or (self, )</span></span><br><span class="line">        params = getattr(request, paramsattr)</span><br><span class="line">        rget = route.get</span><br><span class="line">        pget = params.getall</span><br><span class="line">        jget = <span class="number">0</span></span><br><span class="line">        kw = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(pargs), nargs):</span><br><span class="line">            name = spec.args[index]</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">'bobo_request'</span>:</span><br><span class="line">                kw[name] = request</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            v = rget(name)</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                v = pget(name)</span><br><span class="line">                <span class="keyword">if</span> v:</span><br><span class="line">                    <span class="keyword">if</span> len(v) == <span class="number">1</span>:</span><br><span class="line">                        v = v[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> jget == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">if</span> request.content_type == <span class="string">'application/json'</span>:</span><br><span class="line">                            jget = request.json.get</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            jget = no_jget</span><br><span class="line">                    v = jget(name, request)</span><br><span class="line">                    <span class="keyword">if</span> v <span class="keyword">is</span> request:</span><br><span class="line">                        <span class="keyword">if</span> index &lt; nrequired:</span><br><span class="line">                            <span class="keyword">raise</span> MissingFormVariable(name)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            kw[name] = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj(*pargs, **kw)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bobo_apply</span><br></pre></td></tr></table></figure></p><p>这里，obj是我们定义的视图函数，paramsattr 实际上是我们传入给 _Handler 的 params 参数，route 是上面 match 方法返回的动态路由里面的参数，pargs 是请求信息。request 为 webob 库为我们处理了的包含请求信息的对象。</p><p>关键之处在于我们使用了 getargspec 得到了我们视图函数参数信息，然后再通过不同渠道为我们的视图函数收集参数值，最后再调用它返回结果。</p><p>例如，如果我们的函数声明里面有名为”bobo_request”的参数，最终这个参数就会被传入 request 对象。或者我们使用了 post 函数注册视图，那么 paramsattr 就为 ‘POST’，从而通过<br><code>params = getattr(request, paramsattr)</code>获取了 post 过来的信息，如果请求的的类型为<code>application/json</code>，那么会得到反序列化了的 json 信息。</p><p>值得注意的是，如果从各种渠道没能获得我们函数声明里必要的参数，就会抛出 <code>MissingFormVariable</code> 错误。</p><p>而 _make_bobo_handle可以将我们的视图函数返回的值转换为一个合法的响应对象。</p><p>我们查看 _make_bobo_handle 的源码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_bobo_handle</span><span class="params">(func, original, check, content_type)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将 func 获得的结果转换为一个合法的 wsgi response </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(*args, **route)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> check <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># 如果装饰 handler 函数时提供了 check，则会</span></span><br><span class="line">            <span class="comment"># 尝试调用 check 函数，如果 check 返回了值</span></span><br><span class="line">            <span class="comment"># 就将这个值作为 response，否则调用被装饰函数</span></span><br><span class="line">            <span class="comment"># 可以用来做 authorization</span></span><br><span class="line">            <span class="keyword">if</span> len(args) == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 被装饰的 handler 是否是一个类方法</span></span><br><span class="line">                result = check(<span class="keyword">None</span>, args[<span class="number">0</span>], original)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = check(args[<span class="number">0</span>], args[<span class="number">1</span>], original)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">        result = func(*args, **route)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果 result 是一个可调用对象</span></span><br><span class="line">        <span class="comment"># 就视 result 为一个可返回 wsgi response 的合法对象</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(result, <span class="string">'__call__'</span>):</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 否则抛出异常转换 result</span></span><br><span class="line">        <span class="keyword">raise</span> BoboException(<span class="number">200</span>, result, content_type)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handle</span><br></pre></td></tr></table></figure></p><p>已经为每一句添加了注释，故这里不再解释。</p><h4 id="统一处理的-bobo-response-方法"><a href="#统一处理的-bobo-response-方法" class="headerlink" title="统一处理的 bobo_response 方法"></a>统一处理的 bobo_response 方法</h4><p>现在我们能够获取动态路由的信息，能够根据这些信息为我们的视图函数提供值，那么，最终我们如何应该结合这些东西去调用我们的视图函数呢？_Handler 类里面的 bobo_response 方法为我们提供了这个功能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bobo_response</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">    request, path, method = args[<span class="number">-3</span>:]</span><br><span class="line">    route_data = self.match(request, path, method)</span><br><span class="line">    <span class="keyword">if</span> route_data <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> self.bobo_sub_find(*args)</span><br><span class="line">    <span class="keyword">return</span> self.bobo_handle(*args[:<span class="number">-2</span>], **route_data)</span><br></pre></td></tr></table></figure></p><p>注意，bobo_sub_find 在 __init__ 根据我们传入的参数确定，默认情况下是一个返回 None 的空方法。这里可以简单理解为，<strong>如果路由不匹配，返回None。</strong></p><p>可见，实际上我们定义的视图函数最终被替换为 _Handler 类的实例。这里，每个实例都具有 bobo_response 方法，这个方法里面为我们整合了获取动态路由和内省视图函数以得到参数信息的一些逻辑，从而可以根据请求的信息调用我们的视图函数得到响应对象。至于真正的请求信息，则由调用者（也就是我们稍后会提到的 wsgi app）传递给 bobo_response 作为参数（args）。</p><p>这样，虽然省略了实际代码之中一些更加细小的划分，但我们已经大概了解了注册视图函数的完整流程。 下面就让我们看看 bobo 的核心 wsgi 应用部分吧。</p><h2 id="bobo-WSGI-Application"><a href="#bobo-WSGI-Application" class="headerlink" title="bobo WSGI Application"></a>bobo WSGI Application</h2><h3 id="什么是-WSGI"><a href="#什么是-WSGI" class="headerlink" title="什么是 WSGI"></a>什么是 WSGI</h3><p>WSGI 是<code>Web Server Gateway Interface</code>的缩写，实际上是一套python web 应用程序和服务器交互的规范。</p><p>在早期，不同的python web框架产生的应用程序带有不同的接口，难以与不同的http 服务器兼容。因此，为了方便兼容，简化开发，就产生了 WSGI 标准。它前接 http 服务器，后接 python web 服务器，起到了一个统一接口的作用。</p><p>在 WSGI 的定义中，一个 web 应用程序至少需要是一个可调用的对象，并且接受指定的参数。为了理解这一点，我们可以看看最简单的 WSGI 应用程序的实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b'Hello, web!'</span>]</span><br></pre></td></tr></table></figure></p><p>这里，具体的 environ 和 start_response 由 python web 应用服务器提供，我们暂不关心。我们需要了解的是，任何遵循 WSGI 的python web 框架，最终都需要提供像上面这个小例子一样的可调用对象，bobo 也不例外。因此，下面让我们聚焦于 bobo 怎样实现它的 wsgi 应用部分，以及怎样与我们注册的视图函数集合在一起。</p><h3 id="Application-类"><a href="#Application-类" class="headerlink" title="Application 类"></a>Application 类</h3><p>bobo 通过实现了 __call__ 方法的 Application 类，提供了 WSGI 兼容的应用程序。源码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    省略了其它方法</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        request = webob.Request(environ)</span><br><span class="line">        <span class="keyword">if</span> request.charset <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            request.charset = <span class="string">'utf8'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.bobo_response(request, request.path_info, request.method</span><br><span class="line">                                  )(environ, start_response)</span><br></pre></td></tr></table></figure></p><p>所以，最终 bobo 暴露给 python web 应用服务器的，应该是 Application 类的实例。注意，这里使用了 webob 库的 Request 方法，它能够根据我们提供的 environ，生成包含其中信息的 request 对象。</p><p>注意到最终我们是将 self.bobo_response 根据请求生成的可调用对象作为 WSGI 应用程序，调用并返回的。为了理解 self.bobo_response 方法，我们首先查看 Application 类的 __init__ 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, DEFAULT=None, **config)</span>:</span></span><br><span class="line">        <span class="comment"># ...省略了许多无关代码</span></span><br><span class="line">        bobo_resources = config.get(<span class="string">'bobo_resources'</span>, <span class="string">''</span>)</span><br><span class="line">        self.handlers = [r.bobo_response <span class="keyword">for</span> r <span class="keyword">in</span> bobo_resources]</span><br></pre></td></tr></table></figure></p><p>我们遍历了 bobo_resources 将 bobo_response 方法作为 handlers。</p><p>注意，这里的<code>bobo_response</code>在我们之前注册的视图函数里面最终生成的实例里面出现过。实际上，这里已经在提示我们，这里的 handlers 可以是我们定义视图函数里 bobo_response 方法的列表。也就是说，我们可以传入我们视图函数的列表作为类的具名参数’bobo_resources’，它将会被收集到 bobo WSGI 应用程序实例的 handlers 属性里面。</p><h3 id="匹配路由"><a href="#匹配路由" class="headerlink" title="匹配路由"></a>匹配路由</h3><p>现在我们查看真正处理了请求的 self.bobo_response 是如何实现的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bobo_response</span><span class="params">(self, request, path, method)</span>:</span></span><br><span class="line">    <span class="comment"># ...省略了无关代码</span></span><br><span class="line">    allowed = set()</span><br><span class="line">    <span class="keyword">for</span> handler <span class="keyword">in</span> self.handlers:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = handler(request, path, method)</span><br><span class="line">        <span class="keyword">except</span> MethodNotAllowed <span class="keyword">as</span> exc:</span><br><span class="line">            allowed.update(exc.allowed)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">if</span> allowed:</span><br><span class="line">        <span class="keyword">return</span> self.method_not_allowed(request, method, allowed)</span><br><span class="line">    <span class="keyword">return</span> self.not_found(request, method)</span><br></pre></td></tr></table></figure></p><p>可见，这里遍历了 handlers，除非有 handlers 返回非None值或抛出异常，就继续遍历直到遍历完抛出404。值得注意的是，在前面注册路由的地方讲到过，如果路由不匹配，handlers 会返回 None。所以，这里实际上是说找到匹配路由的 handlers，再调用它返回 response。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简要剖析了 bobo 的核心代码，审查了 bobo 将 url 映射到视图函数的方式，以及怎样根据请求调用对象。</p><p>我们看到，bobo 通过装饰器将视图函数转化为内置的类，然后通过正则表达式以及参数内省等方法从HTTP请求为视图函数提供参数，并且暴露出一个统一的接口以方便上层调用。bobo 将这些注册的类收集到其创建的WSGI应用程序实例里面，然后遍历它们以找到一个路由匹配的函数，再传入相关信息，将这个函数的返回值作为响应。</p><p>需要注意的是，封装 WSGI 规范传入的 environ，及实际产生符合 WSGI 规范的响应的部分，bobo 框架没有涉及。相反，bobo 将这部分的逻辑交给了 webob 库。这部分的内容就以后再提吧。</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-10-30/39948029.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不做也行的事情就不做，非做不可的事情一切从简。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zopefoundation/bobo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bobo&lt;/a&gt; 是一个诞生于上世纪的，直到近两年仍然在更新的 python web 微框架。可以说深具传统，从侧面上见证了这么多年来 python 在 web 开发领域的种种发展。据说，正是这个框架将 fluend python 的作者 Luciano Ramalho 带入了 python 编程的生涯。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="源码" scheme="https://arianx.me/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>翻译：HTTP 缓存</title>
    <link href="https://arianx.me/2018/10/20/translate-HTTP-Caching/"/>
    <id>https://arianx.me/2018/10/20/translate-HTTP-Caching/</id>
    <published>2018-10-20T06:41:49.000Z</published>
    <updated>2018-10-20T09:43:09.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" target="_blank" rel="noopener">原文章</a></p></blockquote><p>通过网络获取一些东西总是缓慢并且昂贵的。多数的响应需要在客户端和服务器之间往返多次。当它们可用并且浏览器能够处理它们的时候，就会发生延迟，还会访问者带来数据成本。因此，缓存和重用之前获取的资源的能力，是优化效率的一个至关重要的方面。</p><a id="more"></a><p>好消息是每个浏览器都附带一个HTTP缓存的实现。所有你需要做的事情，就是确保每个从服务器发出的响应，都提供了一个能够指示浏览器何时以及缓存该响应多长时间的有效的HTTP头部。</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-10-20/42085477.jpg" alt=""></p><p>当服务器返回一个响应的时候，它也会发出一系列描述了它的内容类型、长度、缓存指令、令牌等的HTTP头部。例如，在上面的例子中，服务器返回了1024字节的响应，指示客户端最多缓存它120s，并且提供了一个可以被用来在响应过期之后，检查资源是否被更改的，值为”x234dff”的效验令牌。</p><h2 id="通过-ETags-效验缓存的响应"><a href="#通过-ETags-效验缓存的响应" class="headerlink" title="通过 ETags 效验缓存的响应"></a>通过 ETags 效验缓存的响应</h2><p>摘要：</p><ul><li>服务器使用 ETag HTTP 头部传递一个效验令牌</li><li>效验令牌支持高效的资源更新检查：如果资源没有改变，就没有数据会被传输。</li></ul><p>假定自从最初的请求之后120s过去了，浏览器已经对相同资源发起了一个新请求。首先，浏览器检查本地缓存，会发现之前的响应。不幸的是，因为之前的响应现在已经过期了，浏览器并不能再使用它。在这个时候，浏览器可以发送一个新请求并且获取完整的新的响应。然而，这是低效率的。因为如果资源没有改变，那么就根本没有理由去下载已经存在于缓存中的相同信息！</p><p>这即是由 ETag 头部所指定的效验令牌被设计所用来解决的问题。服务器生成一个由文件内容的哈希或者其它指纹构建的任意令牌，并且将它返回。客户端不需要知道这个指纹是怎样生成的；只需要在下一次请求中将它发送给服务器。如果指纹仍然相同，表明资源没有被改变，那就可以跳过再次下载的步骤。</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-10-20/30298864.jpg" alt=""></p><p>在之前的例子中，客户端自动在 “If-None-Match” HTTP 请求头部中提供了 ETag 令牌。服务器根据当前的资源检查令牌。如果令牌没有改变，服务器就返回 “304 Not Modified” 响应。这个响应告诉浏览器存在于缓存中的响应没有改变，可以再更新120s的使用时间。这样，你就不会重新下载响应，从而节省了时间和带宽。</p><p>作为一个 web 开发者，你应该怎样利用这个高效的重新验证方法？浏览器作为我们的代表完成所有的工作。如果验证令牌在之前被指定了的话，浏览器会自动检查，将验证令牌附加在发出的请求之上，并且根据从服务器接受的响应决定是否在必要的时候更新缓存的时间戳。<strong>唯一需要做的事情是确保服务器提供了必要的 ETag 令牌。你可以查看你服务器的文档以发现必要的配置。</strong></p><h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p>摘要：</p><ul><li>每个资源都可以通过 Cache-Control HTTP 头部定义它缓存的策略。</li><li>Cache-Control 指令控制了谁可以缓存响应、在什么条件之下可以缓存响应、以及缓存多少时间。</li></ul><p>从优化效率的方面来说，最好的请求就是不需要与服务器沟通的请求：一个响应的本地副本支持你消除掉网络延迟，并且避免数据传输的费用。为了达到这一点，HTTP 规范支持服务器返回 <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9" target="_blank" rel="noopener">Cache-Control 指令</a>以控制浏览器和其它中间缓存服务器可以以怎样的方式和多长的时间缓存单个的响应。</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-10-20/71208244.jpg" alt=""></p><h3 id="“no-cache”-和-“no-store”"><a href="#“no-cache”-和-“no-store”" class="headerlink" title="“no-cache” 和 “no-store”"></a>“no-cache” 和 “no-store”</h3><p>“no-cache” 指出了在没有初次与服务器检查资源是否修改的情况下，不能将之前返回的响应用来代替之后对同一 URL 的请求。结果是，如果一个正确的效验令牌（ETag）被设置了，为了验证缓存的响应是否有效，no-cache 将导致流量的往返。但如果资源没有被更改，就可以取消再次下载。</p><p>与之相比，”no-store” 要更简单。它只是禁止了浏览器和所有的中间缓存服务器储存任何版本的返回的响应——例如，一个包含了私人信息或者银行数据的响应。每次用户请求资源，一个新请求都会被发送给服务器，并且一份完整的响应将被下载。</p><h3 id="“public”-和-“private”"><a href="#“public”-和-“private”" class="headerlink" title="“public” 和 “private”"></a>“public” 和 “private”</h3><p>如果一个响应被标记为”public”，那么它将可以被缓存，即使它被分配了一个 HTTP 认证，甚至是当响应的状态代码不是通常可缓存的时候。但大多数时候，”public”是没有必要的，因为任何像”max-age”这样的显示缓存信息都指示了响应可以被缓存。</p><p>与之相比，浏览器可以缓存”private”的响应。然而，这些响应通常是针对单个用户的，所以一个中间缓存服务器不被允许缓存它们。例如，一个用户的浏览器可缓存带有用户隐私信息的HTML页面，但是一个CDN不可以。</p><h3 id="“max-age”"><a href="#“max-age”" class="headerlink" title="“max-age”"></a>“max-age”</h3><p>这个指令用以秒计算的方式，指定了从请求发起，获取的响应可以被重用的最大时间。例如，”max-age=60”指示了响应可以被缓存，并且可以在之后的60s里面被重用。</p><h2 id="定义最优-Cache-Control-策略"><a href="#定义最优-Cache-Control-策略" class="headerlink" title="定义最优 Cache-Control 策略"></a>定义最优 Cache-Control 策略</h2><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-10-20/41178352.jpg" alt=""></p><p>按照上面的决策树决定你的浏览器可以为一个特别的或一系列的资源所用的最优缓存策略。理想情况下，你应该以在客户端上缓存尽可能多的响应，尽可能长的时间周期为目标，并且为以后的每次响应提供效验令牌以支持高效的重新验证。</p><p>根据HTTP Archive，在根据 Alexa 排名的前30万站点中，浏览器可以缓存所有下载响应中<a href="http://httparchive.org/trends.php#maxage0" target="_blank" rel="noopener">将近一半的信息</a>，这是对重复页面访问和浏览的一个巨大节省。当然，这并不意味着你的特别的应用程序可以缓存50%以上的资源。因为一些站点可以缓存它们超过90%以上的资源，然而另一些站点带有大量私有或者时间敏感的不能全部缓存的数据。</p><p><strong>审计你的页面以鉴别哪些资源是可以被缓存的，并且确保为它们返回了恰当的 Cache-Control 和 ETag 标签。</strong></p><h2 id="无效化以及更新缓存的响应"><a href="#无效化以及更新缓存的响应" class="headerlink" title="无效化以及更新缓存的响应"></a>无效化以及更新缓存的响应</h2><p>摘要：</p><ul><li>本地缓存将被使用到资源”过期”。</li><li>在 URL 中嵌入一个文件内容指纹，支持你强制将客户端更新到一个新版本的响应。</li><li>为了最优的缓存效率，每个应用程序都需要定义它自己的缓存层级。</li></ul><p>所有由浏览器发出的 HTTP 请求，第一步都将路由到浏览器的缓存，检查这里是否有一个可以被用来满足请求的有效缓存响应。如果有匹配的，那么响应就可以从缓存里面读取，这消除了网络延迟，以及传输带来的数据成本。</p><p><strong>然而，如果你想更新或无效化一个缓存的响应该怎么做呢？</strong>例如，假设你已经告诉你的访问者缓存一个CSS样式表最长24小时的时间（max-age=86400)，但你的设计师刚刚提交了一个你想让所有用户的支持的更新。你怎样才能提醒所有现在拥有一个“变味”的CSS的缓存副本的用户，去更新他们的缓存呢？你不能，至少不改变资源的URL是不行的。</p><p>在浏览器缓存响应之后，直到缓存由 max-age 或者 expires 决定不再有效，或者是直到它因为某些其它原因从缓存之中被驱逐——例如，用户清空了浏览器的缓存——缓存的版本都将被使用。结果是，不同的用户在构建页面的时候，最终使用了不同的版本：刚刚获取资源的用户使用新版本，然而缓存了更早（但仍然有效）的副本的用户使用它响应的旧版本。</p><p><strong>如何才能兼顾两者：客户端缓存和快速更新？</strong>你可以改变资源的 URL，并在它的内容改变时，强制用户下载新版本的响应。典型的，你通过在文件名里面嵌入文件的指纹，或者版本数字来实现这点——<br>例如，style.x234dff.css。</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-10-20/44551272.jpg" alt=""></p><p>定义每个资源的缓存策略的能力，支持你定制“缓存层级“。它不单能够控制缓存多长时间，并且能够控制访问者能多快看到新版本的资源。为说明这一点，分析上述的例子：</p><ul><li>HTML 页面被标记为”no-cache”，这意味浏览器总是在每次请求中重新验证，并且在内容改变的情况下获取最新资源。同样，在 HTML 标记里，你在 URL 里面为 CSS 和 JavaScript 嵌入了指纹：如果那些文件的内容改变了，HTML 页面同样将会改变，一个新 HTML 响应的副本将会被下载。</li><li>CSS 文件被支持由浏览器和中间缓存服务器（例如，一个 CDN）缓存，并且设定过期时间为一年。注意，你可以安全的使用超过一年的过期期限，因为你在它的文件名里面嵌入了文件指纹：如果 CSS 文件被更新了，那么它的 URL 也将会被改变。</li><li>JavaScript 文件同样设置了一年的过期时间，但被标记为私有，这可能是由于它包含了一些不该被 CDN 缓存的用户私有数据。</li></ul><p>ETag，Cache-Control，以及唯一URL的联合使用允许你获得各个方面的最好实践：长过期时间，控制在哪里响应可以被缓存，以及按需更新。</p><h2 id="Caching-清单"><a href="#Caching-清单" class="headerlink" title="Caching 清单"></a>Caching 清单</h2><p>没有一种最好的缓存方针。你必须根据你的流量模式，服务的数据类型，以及应用指定的刷新数据的需要，来定义和配置合适的，针对每个资源的设置，以及整体上的”缓存层级“。</p><p>当你为缓存策略而工作时，记住以下一些提示和技巧：</p><ul><li><strong>使用一致的 URL</strong>：如果你在不同 URL 上服务了相同内容，那么这些内容会被获取和储存多次。提示：记住 URL 是<a href="http://www.w3.org/TR/WD-html40-970708/htmlweb.html" target="_blank" rel="noopener">大小写敏感</a>的。</li><li><strong>确保服务器提供了一个有效的效验令牌（ETag）</strong>：当资源在服务器上没有被改变的情况下，效验令牌消除了传输相同字节的需要。</li><li><strong>标记哪些资源可以被中间机构缓存</strong>：那些对所有用户而言都相同的响应，是被 CDN 或其它中间机构缓存的优秀候选者。</li><li><strong>针对每个资源决定最优缓存生命期</strong>：不同的资源可能有不同的刷新需要。为每个资源审计并且决定适合的 max-age。</li><li><strong>定义你站点的最好缓存层级</strong>：联合使用带内容指纹的资源 URL以及具有很短缓存生命期或不缓存的 HTML 文档，能够使你控制客户端多快获取更新。</li><li><strong>最小化改变</strong>：一些资源比其它资源更新得更快。如果这儿有一个经常更新的资源（例如，一个 JavaScript函数或者一系列CSS样式表），考虑将代码作为单独的文件交付。这样做能够使其余的内容能够从缓存中获取（例如，库代码不会经常改变），并且在无论何时更新被获取时，使下载的内容总量最小化。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过网络获取一些东西总是缓慢并且昂贵的。多数的响应需要在客户端和服务器之间往返多次。当它们可用并且浏览器能够处理它们的时候，就会发生延迟，还会访问者带来数据成本。因此，缓存和重用之前获取的资源的能力，是优化效率的一个至关重要的方面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="https://arianx.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="缓存" scheme="https://arianx.me/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>python3.7一些有趣的新特性</title>
    <link href="https://arianx.me/2018/08/24/python-3-7-new-character/"/>
    <id>https://arianx.me/2018/08/24/python-3-7-new-character/</id>
    <published>2018-08-24T12:46:09.000Z</published>
    <updated>2018-08-25T03:20:27.252Z</updated>
    
    <content type="html"><![CDATA[<p>其实python3.7在两个多月前就发布了，因为各种原因（主要懒就是了qaq，一直没怎么仔细关注，所以拖到了现在。唉，转眼八月就到尾巴上了。</p><p>总之，本文将介绍python3.7中比较有趣的一些新特性。让我们开始吧。</p><a id="more"></a><h2 id="dataclasses模块"><a href="#dataclasses模块" class="headerlink" title="dataclasses模块"></a>dataclasses模块</h2><p>python3.7中最被人关注，讨论得最广的，当然是dataclasses啦。dataclasses是python3.7新增的模块。正如这个模块的名字”数据类”一样，引入这个特性的主要目的，是为了简化一些主要功能是储存简单的数据的类的创建流程，减少代码冗余。在官方文档中，dataclasses被描述为”这个模块为将自动生成的，像__init__这样的特殊方法，增加到用户定义的类，提供了dataclass装饰器和相关的函数”。</p><h3 id="dataclass装饰器"><a href="#dataclass装饰器" class="headerlink" title="dataclass装饰器"></a>dataclass装饰器</h3><p>大家以往写程序的时候可能都碰到过，需要在__init__方法中传递大量的参数，然后简单的将参数绑定到实例，就像这样:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, phone, address, contact, category, staff_number=<span class="number">100</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.phone = phone</span><br><span class="line">        self.address = address</span><br><span class="line">        self.contact = contact</span><br><span class="line">        self.category = category</span><br><span class="line">        self.staff_number = staff_number</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"Company(name=<span class="subst">&#123;self.name&#125;</span>, phone=<span class="subst">&#123;self.phone&#125;</span>, address=<span class="subst">&#123;self.address&#125;</span>, contact=<span class="subst">&#123;self.contact&#125;</span>, category=<span class="subst">&#123;self.category&#125;</span>, staff_number=<span class="subst">&#123;self.staff_number&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.name == other.name &amp;&amp; self.phone == other.phone &amp;&amp; self.address == other.address &amp;&amp; self.contact == other.contact &amp;&amp; self.category == other.category &amp;&amp; self.staff_number == other.staff_number)</span><br></pre></td></tr></table></figure></p><p>当然，这个随意虚构出来的类可能还不够典型，然而已经可以从它身上看到许多工作实际上是在繁复、无味进行的。我们在__init__中声明了所需的参数，将它们一一绑定到实例，并且又在一些特殊方法中进行了许多枯燥平常的工作。</p><p>我们可以用dataclass装饰器简化这些工作。将我们想要的参数用类型注释标注出来，称为字段，然后简单的将dataclass装饰到我们想要的类，它将返回给添加了我们想要参数、和与这些参数相关的特殊方法的类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dataclasses</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclasses.dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span>:</span></span><br><span class="line">    name: str</span><br><span class="line">    phone: str</span><br><span class="line">    address: str</span><br><span class="line">    contact: str</span><br><span class="line">    category: str</span><br><span class="line">    staff_number: int = <span class="number">100</span></span><br></pre></td></tr></table></figure></p><p>这就是所有！dataclass将为我们自动生成__init__、__repr__、__eq__方法，并且以我们在类中添加了类型注释的字段作为参数，在其中构造初始化、表现成字符串或者是比较是否相等的语句。</p><p>最重要的是，通过这样的方式构造出来的类和我们以传统方式构造出来的类没什么两样。我们可以对这个类再进行装饰，或者是继承，使用元类，操作都是等同的。</p><p>我们还可以通过参数定制dataclass装饰器的行为。实际上，向上面这样，我们直接给类装饰dataclass，等同于我们以默认参数调用dataclass后装饰给类。这种意义上说，dataclass实际上是装饰器工厂函数。也就是说，以下三种调用方法是等同的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>大致上，dataclass的参数指定了是否自动生成与这个类相关的特殊方法。其中:</p><ul><li>init: init参数指定是否生成初始化方法，我们以类型注释的方式定义的字段，会成为dunder init方法的参数，然后在其中赋值给实例。如果为False，将调用父类的dunder init方法。</li><li>repr: repr参数指定是否生成dunder repr方法。默认的dunder repr方法会以class_name(var1=value, var2=value, …)这样的方式列举出所有定义的字段和我们赋予的值。</li><li>eq: eq参数为True。会生成dunder eq方法。在其中比较我们定义的所有字段，所有的都相等，才返回True。</li><li>order: order参数自动生成与排序相关的方法，如__lt__、__le__、__gt__和__ge__方法。在其中，我们定义的字段会以定义顺序，作为一个元组与另一个实例比较。需要注意的是，如果order为True，eq也必需为True，否则会弹出ValueError错误。</li><li>unsafe_hash: 默认下，__hash__方法由eq参数和fronzen参数的值生成。如果unsafe_hash为False，且fronzen和eq参数也为True，将为类添加__hash__方法，hash值由定义的字段计算而得。如果eq为True，frozen为False，则类标记为不可hash。如果eq为False，类将使用父类的hash方法。然而，如果设置这个参数为True，就不管eq和fronzen参数的值，即使我们的实例实际会改变，也会强制给类添加dunder hash方法。</li><li>fronzen: fronzen为True，则所有字段是只读的。相当于将字段设置为property。</li></ul><p>大部分情况下，如果在类的定义中已经定义了相关的方法，则上面的相关参数将被忽略。</p><h3 id="field方法"><a href="#field方法" class="headerlink" title="field方法"></a>field方法</h3><p>大部分情况下，我们可以直接使用dataclass方法，然而有时我们还需要为具体字段指定具体行为。这种情况下，我们可以使用dataclasses.field方法。例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    name: str = field(init=<span class="keyword">False</span>, default=<span class="string">"Mike"</span>)</span><br></pre></td></tr></table></figure></p><p>这样，name字段不会被传递给dunder init方法作为参数，它始终会有我们设置的初始值”Mike”。</p><p>field方法的定义为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">field</span><span class="params">(*, default=MISSING, default_factory=MISSING, repr=True,</span></span></span><br><span class="line"><span class="function"><span class="params">          hash=None, init=True, compare=True, metadata=None)</span></span></span><br></pre></td></tr></table></figure></p><p>大致上，其中的各个参数指定了是否将字段传入相关方法。除此之外，它的default参数指定字段的默认值，default_factory指定生成默认值的函数，metadata用于第三方扩展。</p><p>field同时具有default和default_factory参数。一般情况下，当我们为字段指定的默认只是不可变对象时，直接赋值给字段或在field的default参数中指定都可以。然而，如果我们要为字段指定一个可变对象（例如列表）作为默认值，我们需要将这个可变对象的构造函数指定为参数default_factory的值。如果我们将可变对象作为字段或default参数的值，会弹出ValueError。</p><p>这样设置的主要目的是回避python中以可变对象作为默认参数的陷阱。例如，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, names=[])</span>:</span></span><br><span class="line">        self.names = names</span><br><span class="line"></span><br><span class="line">a1 = A()</span><br><span class="line">a2 = A()</span><br><span class="line">a1.names.push(<span class="string">'Mike'</span>)</span><br><span class="line"><span class="keyword">assert</span>(a2.names[<span class="number">0</span>] == <span class="string">'Mike'</span>)</span><br></pre></td></tr></table></figure></p><p>A的所有实例将分享最初在参数中指定的列表。</p><h3 id="post-init-方法"><a href="#post-init-方法" class="headerlink" title="__post_init__方法"></a>__post_init__方法</h3><p>在某些情况下，我们的某些字段的值由其它字段生成，这种情况怎么办呢？幸运的是，dataclasses为我们提供了__post_init___方法。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    price: int = <span class="number">1</span></span><br><span class="line">    quantity: int = <span class="number">10</span></span><br><span class="line">    total: int = field(init=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__post_init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.total = self.price * self.total</span><br></pre></td></tr></table></figure></p><p>__post_init__方法将在dunder init方法之后执行。</p><h3 id="特殊字段"><a href="#特殊字段" class="headerlink" title="特殊字段"></a>特殊字段</h3><p>在大部分情况下，类型注释仅仅为ide所用，dataclass不内省我们为字段添加的类型注释。然而，有两种例外的类型注释，会被dataclass检查。</p><p>其中一种是typing.ClassVar。和其名字一样，加上这个注释，表明字段是类变量。这个字段将会被dataclass忽略。</p><p>另一种是dataclasses.InitVar。加上这个注释的字段，将会传递给__post_init__方法作为参数。</p><h3 id="辅助方法"><a href="#辅助方法" class="headerlink" title="辅助方法"></a>辅助方法</h3><p>dataclasses模块提供了一系列与dataclass相关的辅助方法。</p><ul><li>fields(class_or_instance): fields方法接受被dataclass装饰的类或它的实例作为参数，以元组的形式返回其中定义的，除ClassVar和InitVar以外的字段。</li><li>asdict(instance, *, dict_factory=dict): 接受被dataclass装饰的类的实例，以字典的方式返回字段的键值。如果字段值仍是一个被dataclass装饰的类的对象，将递归展开。</li><li>astuple(*, tuple_factory=tuple): 同上，以元组形式返回。</li><li>replace(instance, **changes): 接受实例，替换字段值为changes字典中所重定义的值。替换在__post_init__方法之前执行。</li><li>is_dataclass(class_or_instance): 返回参数是否是被dataclass装饰的类或它的实例。</li></ul><h2 id="延迟类型注释评估"><a href="#延迟类型注释评估" class="headerlink" title="延迟类型注释评估"></a>延迟类型注释评估</h2><p>现存的python类型注释功能有两点缺陷。</p><p>第一个缺陷是只能使用在当前作用域中已经存在的类型名。这就是说，无法将之后的变量作为当前注释。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind_other</span><span class="params">(self, obj: B)</span> -&gt; A:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>将会弹出NameError。</p><p>第二个缺陷是类型注释中的语句将会在导入时被执行，从而可能会对当前程序产生不利影响。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(source: print<span class="params">(<span class="string">'must be a string'</span>)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>将会在被导入时显示must be a string，然后source的类型注释为None。</p><p>现在，有了延迟类型评估，这两种缺陷都可以得到解决。</p><p>例如，对于第二种而言，现在的表现为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(source: print<span class="params">(<span class="string">'must be a string'</span>)</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;render.__annotations__</span><br><span class="line">&#123;<span class="string">'source'</span>: <span class="string">"print('must be a string')"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>现在要使用延迟类型评估，需要从__future__里引入 annotations。这个功能将会在python 4.0成为正式功能。</p><h2 id="纳秒级时钟精度"><a href="#纳秒级时钟精度" class="headerlink" title="纳秒级时钟精度"></a>纳秒级时钟精度</h2><p>python的time.time函数返回一个以秒为单位的浮点数，而浮点数在计算机中天生就是不准确的。因此，python3.7引入了一系列以纳秒的单位，返回一个整型值的时间相关的函数。如：</p><ul><li>time_ns: 返回1970年1月1日以来的纳秒数。</li></ul><p>许多新函数仅仅是在原始函数后加了’_ns’作为标识。</p><h2 id="自定义模块属性访问"><a href="#自定义模块属性访问" class="headerlink" title="自定义模块属性访问"></a>自定义模块属性访问</h2><p>python3.7支持模块级别的__getattr__和__dir__方法。只需要将这些方法定义在模块的__init__.py文件中，就可在导入后的模块触发这些方法。</p><h2 id="使用breakpoint-设置断点"><a href="#使用breakpoint-设置断点" class="headerlink" title="使用breakpoint()设置断点"></a>使用breakpoint()设置断点</h2><p>以往设置断点，需要引入pdb后调用pdb.set_trace()。现在仅需要在pdb.set_trace()的地方调用breakpoint函数，就可设置断点。</p><h2 id="其它改变"><a href="#其它改变" class="headerlink" title="其它改变"></a>其它改变</h2><ul><li>强制utf8模式： 在启动python的命令行加上<code>-X utf8</code>可以使CPython无视本地环境，强制使用utf8模式。</li><li>显示导入模块的时间： 在启动python的命令行加上<code>-X importtime</code>，可以在每次导入模块时显示耗费的时间。</li><li>async和await成为关键字</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.python.org/dev/peps/pep-0557" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0557</a></p><p><a href="https://docs.python.org/3/whatsnew/3.7.html" target="_blank" rel="noopener">https://docs.python.org/3/whatsnew/3.7.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实python3.7在两个多月前就发布了，因为各种原因（主要懒就是了qaq，一直没怎么仔细关注，所以拖到了现在。唉，转眼八月就到尾巴上了。&lt;/p&gt;
&lt;p&gt;总之，本文将介绍python3.7中比较有趣的一些新特性。让我们开始吧。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用位运算实现加减乘除</title>
    <link href="https://arianx.me/2018/08/17/Use-bit-arithmetic-to-implement-addition-subtraction-multiplication-and-division/"/>
    <id>https://arianx.me/2018/08/17/Use-bit-arithmetic-to-implement-addition-subtraction-multiplication-and-division/</id>
    <published>2018-08-17T12:47:59.000Z</published>
    <updated>2018-08-18T13:57:40.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p>加法可以拆分成几个步骤，首先是每位上的数对应相加，将结果与对应的基数取模，设置为当前位，然后处理相加之后产生进位的位，给它们的上一个拥有更大权值的位加上一，如果又产生进位，就如此循环，直到没有进位为止。<br><a id="more"></a></p><p>对于二进制来说，第一步相加取模是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 + 1 = 0</span><br><span class="line">1 + 0 = 1</span><br><span class="line">0 + 0 = 0</span><br></pre></td></tr></table></figure></p><p>可以看到，只有两位数不一样的情况下，值才为1。这正和<code>异或运算</code>的结果相同。</p><p>而在二进制中，只有1+1才有可能产生进位，也就是说，我们需要找出两个数中都为1的位，这一点可以使用<code>与运算</code>实现。然后，将与运算的结果左移一位，与第一步的结果相加，就能得到最终的结果。</p><p>可以注意到最后又产生了一次加法，这里可以使用递归的思想来处理。不断递归，直到第二步的结果为0，也就是说，没有在需要进位的位，就意味着计算完毕。</p><p>于是，加法可以使用异或和与运算实现。递归的C语言实现如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> add_xor = a ^b;</span><br><span class="line">    <span class="keyword">int</span> add_carry = (a &amp; b) &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> add(add_xor, add_carry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尾递归也可以很容易优化为迭代形式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_by_loop</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> add_xor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        add_xor = a ^ b;</span><br><span class="line">        b = (a &amp; b) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        a = add_xor;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><p>实现了加法，接可以直接将减法视为加上它的逆元。对于以补码形式表示的有符号数来说，一个数x的逆元为<code>~x+1</code>。这是因为，对于一个w位的数x来说，x + ~x = 2^(w) - 1。所以 x + ~x + 1 = 2^(w) = 0（截断)。所以 ~x + 1为 x的逆元。</p><p>因此，减法可以如下实现：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(a, add(~b, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p>abc * def 这种形式的乘法，实际上可以转化为加法和移位的结合。因为对于abc * def，实际上对于def中的每一位（例如e），都有对应个（e个）的abc相加，然后将结果提升当前位的权值（假如是十进制，对于e，提升10^1）。这样每一位运算的结果加起来，就是最终的结果。</p><p>二进制比十进制更简单，因为其每一位只可能为0或1，要么不加，要么加一次。</p><p>因此，乘法可以如下实现：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">0x1</span>) &#123;</span><br><span class="line">            result = add_by_loop(result, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><p>除法则可以视为乘法的逆运算。对于二进制来说，从高到低的每一位，将除数提升到当前位的权值（即，乘以2^k，等同于左移k位），如果此时被除数扔大于除数，就说明结果在这个位上商1。然后从被除数减掉除数提升后的值。遍历每一位，即为最终的结果。</p><p>因此，除法可以这样实现:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="keyword">sizeof</span>(a);</span><br><span class="line">    <span class="keyword">bool</span> flag = (a &lt; b)||(b &lt; <span class="number">0</span>);</span><br><span class="line">    a = (a &lt; <span class="number">0</span>)? -a:a;</span><br><span class="line">    b = (b &lt; <span class="number">0</span>)? -b:b;</span><br><span class="line">    <span class="comment">// 避开正负数表示形式不同这一点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sub(mul(length, <span class="number">8</span>), <span class="number">1</span>); i &gt;= <span class="number">0</span>; i = sub(i, <span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((a &gt;&gt; i) &gt;= b)&#123;</span><br><span class="line">        <span class="comment">// 这个地方使用 a 右移来比较，而不是将 b 左移的原因是因为:</span></span><br><span class="line">        <span class="comment">// 有符号数在机器中以补码的形式表示，首位为1的字将被诠释为负数，导致结果错误</span></span><br><span class="line">        <span class="comment">// 右移则可以回避这一点</span></span><br><span class="line">            result = add(result, <span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            a = sub(a, b &lt;&lt; i);</span><br><span class="line">            <span class="comment">// (a &gt;&gt; i) &gt;= b，意味着 b &lt;&lt; i 不会导致首位为1，所以可以直接运算</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag?-result:result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样做除法，得到的不是精确结果，而是将真正值进行向下舍入的结果。这是因为，对于 p/q，我们的运算会产生一个结果a，和直到最后都没能减尽的b。p除以q等于a余b，即p=q*a+b，p/q=a+b/q，b &lt; q。即为a加一个小数，我们丢掉了这个小数，即向下舍入。（对于，负数结果来说，就成了向上舍入）。</p><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><p>需要注意的是，减法只适用于数是用定长方法表示时的情况。因为求逆元用到了两个数相加后溢出截断的原理。因此，对于不定长表示的数，例如Python中的整数表示，无法得到正确的结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;加法&quot;&gt;&lt;a href=&quot;#加法&quot; class=&quot;headerlink&quot; title=&quot;加法&quot;&gt;&lt;/a&gt;加法&lt;/h2&gt;&lt;p&gt;加法可以拆分成几个步骤，首先是每位上的数对应相加，将结果与对应的基数取模，设置为当前位，然后处理相加之后产生进位的位，给它们的上一个拥有更大权值的位加上一，如果又产生进位，就如此循环，直到没有进位为止。&lt;br&gt;
    
    </summary>
    
    
      <category term="位运算" scheme="https://arianx.me/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>在python中延迟执行函数</title>
    <link href="https://arianx.me/2018/06/27/Simple-time-event-loop-in-python/"/>
    <id>https://arianx.me/2018/06/27/Simple-time-event-loop-in-python/</id>
    <published>2018-06-26T23:10:21.000Z</published>
    <updated>2018-08-22T16:14:17.149Z</updated>
    
    <content type="html"><![CDATA[<p>js有一个常用的函数叫做setTimeout，可以延迟函数的执行而又不阻塞当前上下文。这是一个奇特的行为，因为js本身运行在单线程中。因此，在某些时候，可以发现，js上下文中的函数会影响setTimeout排定函数的运行。例如，如果此时有一个while true的函数阻塞，传递给setTimeout的函数也永远不会执行。</p><p>在python中，也可以实现类似js 中setTimeout的行为。主要发现了以下几种方法：<br><a id="more"></a></p><h2 id="使用time-sleep函数"><a href="#使用time-sleep函数" class="headerlink" title="使用time.sleep函数"></a>使用time.sleep函数</h2><p>可以使用time.sleep沉睡一段时间，然后再调用函数。但这样同时也会阻塞当前上下文。可以考虑使用多线程封装time.sleep函数，让函数在多线程中执行，从而达到不阻塞上下文，又延迟执行的目的。</p><h2 id="使用threading-Timer函数"><a href="#使用threading-Timer函数" class="headerlink" title="使用threading.Timer函数"></a>使用threading.Timer函数</h2><p>threading.Timer函数可以指定一个延迟时间，传入的函数会在新线程指定的时间后运行。</p><p>给人的感觉就像是上面封装了time.sleep一样。可以这样用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SetTimeout</span><span class="params">(func, time, *args, **kwargs)</span>:</span></span><br><span class="line">    task = Timer(time, func, args=args, kwargs=kwargs)</span><br><span class="line">    task.start()</span><br><span class="line">    <span class="keyword">return</span> task</span><br></pre></td></tr></table></figure></p><h2 id="根据延迟时间轮询任务"><a href="#根据延迟时间轮询任务" class="headerlink" title="根据延迟时间轮询任务"></a>根据延迟时间轮询任务</h2><p>可能在多数情况下，我们的需求不只是让一个函数在给定的时间后延迟执行，并且还想同时排定多个任务，让它们按照给定的优先级（时间），依次执行。这种情况下，可以使用<code>优先队列</code>，不断轮询时间以查看是否有可以执行的任务。</p><p>想要阻塞当前上下文，让所有任务执行完毕后才开始继续执行接下来的任务，可以就在本线程轮询；想要不阻塞，就可以放在多线程中轮询，并且，因为多线程共享资源，所以还可以在轮询开始后继续添加新任务。</p><p>可以这样实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeEvent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, plan_time, *args, **kwargs)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        self.plan_time = plan_time</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        self.result = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="comment"># For heap sort.</span></span><br><span class="line">        <span class="keyword">return</span> self.plan_time &lt; other.plan_time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alive = <span class="keyword">True</span></span><br><span class="line">        self.result = self.func(*self.args, **self.kwargs)</span><br><span class="line">        self.alive = <span class="keyword">False</span></span><br><span class="line">        self.over = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeEventLoop</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.events = []</span><br><span class="line">        self.alive = <span class="keyword">False</span></span><br><span class="line">        self.end = <span class="keyword">False</span></span><br><span class="line">        self.thread = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_event</span><span class="params">(self, func, time, *args, absolute=False, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> absolute:</span><br><span class="line">            plan_time = datetime.now() + timedelta(<span class="number">0</span>, time)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plan_time = time</span><br><span class="line">        event = TimeEvent(func, plan_time, *args, **kwargs)</span><br><span class="line">        heapq.heappush(self.events, event)</span><br><span class="line">        <span class="keyword">return</span> event</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_loop</span><span class="params">(self)</span>:</span></span><br><span class="line">        event = heapq.heappop(self.evnets) <span class="keyword">if</span> self.events <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">while</span> event <span class="keyword">and</span> event.plan_time &lt; datetime.now():</span><br><span class="line">            event.execute()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event = heapq.heappop(self.events)</span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> event:</span><br><span class="line">            heapq.heappush(self.events, event)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_take_loop</span><span class="params">(self, timeout)</span>:</span></span><br><span class="line">        self.alive = <span class="keyword">True</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.end:</span><br><span class="line">            self._loop()</span><br><span class="line">            <span class="keyword">if</span> timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> \</span><br><span class="line">                    <span class="keyword">and</span> time.time() - start_time &gt; timeout:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">0.001</span>)</span><br><span class="line">        self.end = <span class="keyword">False</span></span><br><span class="line">        self.alive = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_loop</span><span class="params">(self, timeout=None, in_thread=True)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> in_thread:</span><br><span class="line">            self.thread = Thread(target=self._take_loop, args=[timeout])</span><br><span class="line">            self.thread.start()</span><br><span class="line">            <span class="keyword">return</span> self.thread</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._take_loop(timeout)</span><br></pre></td></tr></table></figure></p><p>它和js 的setTimeout类似，如果前面有函数耽搁了时间，那后面的函数的执行时间也会被推迟。但是，能够保证在给定时间之前的所有函数都会被运行。</p><h2 id="使用异步"><a href="#使用异步" class="headerlink" title="使用异步"></a>使用异步</h2><p>使用python中的异步，也就是协程，也可以完成我们的需求。嗯……然而目前对这方面并不太熟悉_(:з)∠)_</p><p>或许可以这样实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'call &#123;&#125;'</span>.format(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop, callbacks)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> callback <span class="keyword">in</span> callbacks:</span><br><span class="line">        loop.call_later(<span class="number">0.2</span>, callback, <span class="number">1</span>)</span><br><span class="line">        loop.call_later(<span class="number">0.1</span>, callback, <span class="number">2</span>)</span><br><span class="line">        loop.call_soon(callback, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></span><br><span class="line">    event_loop = asyncio.get_event_loop()</span><br><span class="line">    event_loop.run_until_complete(main(event_loop, [hello]))</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure></p><p>会输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call <span class="number">3</span></span><br><span class="line">call <span class="number">2</span></span><br><span class="line">call <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="使用信号"><a href="#使用信号" class="headerlink" title="使用信号"></a>使用信号</h2><p>使用Signal信号模块，也可以完成类似行为。然而比协程更不熟悉……</p><p>看了相关内容后再来补充一波吧w</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先就这样吧，也欢迎提供其它想法~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/10154568/postpone-code-for-later-execution-in-python-like-settimeout-in-javascript" target="_blank" rel="noopener">stackoverflow 上的相关回答</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js有一个常用的函数叫做setTimeout，可以延迟函数的执行而又不阻塞当前上下文。这是一个奇特的行为，因为js本身运行在单线程中。因此，在某些时候，可以发现，js上下文中的函数会影响setTimeout排定函数的运行。例如，如果此时有一个while true的函数阻塞，传递给setTimeout的函数也永远不会执行。&lt;/p&gt;
&lt;p&gt;在python中，也可以实现类似js 中setTimeout的行为。主要发现了以下几种方法：&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>LZ77编码简介</title>
    <link href="https://arianx.me/2018/06/26/LZ77-coding/"/>
    <id>https://arianx.me/2018/06/26/LZ77-coding/</id>
    <published>2018-06-26T07:56:46.000Z</published>
    <updated>2018-08-22T16:14:34.292Z</updated>
    
    <content type="html"><![CDATA[<p>LZ77是一个由Abraham Lempel于1977年发表的无损压缩算法，其思想与霍夫曼编码有很大差别。霍夫曼编码主要是用较短的编码代替出现频率较高的字符，用较长的编码代替出现频率较低的字符；LZ77编码的核心思想则是将重复出现的较长字符串（短语），使用较短的、指向前面第一次出现的字符串的标记来代替。标记与原序列之间是一种映射，因此，LZ77算法可以说成是基于字典的算法。<br><a id="more"></a></p><p>由于Python之中的位操作比较难弄，本文只实现了LZ77的编码解码部分，没有实现将编码内容写入文件、或者解码文件的部分。<del>日后用C实现一遍吧</del></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>LZ77算法的编码阶段将原序列分成几个部分。</p><p>第一个部分是<code>前向缓冲区(look ahead buffer)</code>。它是一个固定大小的普通数组。在序列编码的过程中，会将缓冲区最前面与后面将要提到的<code>滑动窗口(sliding window)</code>里相同的子序列弹出，进入滑动窗口，输出相应的编码，从源序列中读入后继的内容填充数组直到源序列读尽。</p><p>第二个部分是<code>滑动窗口(sliding window)</code>。也是一个固定大小的数组，不过其大小一般比前向缓冲区大很多。滑动窗口接受从前向缓冲区弹出的内容，并试图找到与缓冲区最前面的字串相同的<code>最长字串</code>。如果找到了，就会用指向窗口里子串的标记代替源来的字串。</p><p>第三个部分是编码部分。它根据前向缓冲区和滑动窗口运行的结果来生成。</p><p>LZ77编码的详细步骤如下。</p><ol><li>首先，将序列读入前向缓冲区。</li><li><p>指针指向第一个字符，查看是否与前向缓冲区内的第一个字符匹配。如果匹配：<br><br>- 设滑动窗口中的这个字符位于D，从这个字符开始，一一对比接下来滑动窗口中的字符与前向缓冲区的字符是否匹配，直到出现不匹配的字符为止。设匹配的字串长度为L，此时前向缓冲区匹配子串的后一个字符是c。<br><br>- 指针指向第二个字符，重复搜索，直到窗口尽头。<br><br>- 取最终L最大的那次为最终结果。如果始终没有找到匹配，D、L为0，c为缓冲区第一个字符。</p></li><li><p>返回（D, L, c)作为匹配序列的编码。然后从滑动窗口尾部删除L个字符，将前向缓冲区中的这L个匹配字符弹出，推入滑动窗口。</p></li><li>从源序列读入数据填充前向缓冲区，重复2，直到读尽数据。</li><li>将编码通过位操作的方式写入文件流。</li></ol><p>纯文字比较难以理解，看图可能更直观：</p><p><img src="http://arian-blogs.oss-cn-beijing.aliyuncs.com/18-6-26/29889505.jpg" alt=""></p><p>由于会不断在前向缓冲区中搜索匹配的字串，所有编码过程比霍夫曼算法慢</p><h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><p>解码过程是编码过程的逆向：</p><ol><li>将数据读入缓冲区。</li><li>如果缓冲区头部是普通字符，放入窗口；否则在窗口中搜寻对应字串后，将对应字串放入窗口。返回这个普通字符或字串作为一部分结果。</li><li>从缓冲区移除相应标记。继续读入。重复第二部直到结束。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><a href="https://gist.github.com/Arianxx/d7b4640fe53f4798a4ef1b954c9f28b9" target="_blank" rel="noopener">https://gist.github.com/Arianxx/d7b4640fe53f4798a4ef1b954c9f28b9</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LZ77Coding</span>:</span></span><br><span class="line">    SLIDING_WINDOW_SIZE = <span class="number">4096</span></span><br><span class="line">    LOOKHEAD_BUFFER_SIZE = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_longest_match</span><span class="params">(self, data, cursor)</span>:</span></span><br><span class="line">        best_position, best_length, next_char = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        search_index = max(cursor - self.SLIDING_WINDOW_SIZE, <span class="number">0</span>)</span><br><span class="line">        end_buffer_index = min(len(data) - <span class="number">1</span>,</span><br><span class="line">                               cursor + self.LOOKHEAD_BUFFER_SIZE - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> search_index &lt; cursor:</span><br><span class="line">            <span class="keyword">if</span> data[search_index] == data[cursor]:</span><br><span class="line">                length = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> (search_index + length) &lt; cursor \</span><br><span class="line">                        <span class="keyword">and</span> (cursor + length) &lt; end_buffer_index:</span><br><span class="line">                    <span class="keyword">if</span> data[search_index + length] == data[cursor + length]:</span><br><span class="line">                        length += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> length &gt; best_length:</span><br><span class="line">                    best_position = search_index</span><br><span class="line">                    best_length = length</span><br><span class="line">                    next_char = data[cursor + length]</span><br><span class="line"></span><br><span class="line">            search_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> best_length:</span><br><span class="line">            next_char = data[cursor]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> best_position, best_length, next_char</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encoding</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        cursor = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cursor &lt; len(data):</span><br><span class="line">            match = self.search_longest_match(data, cursor)</span><br><span class="line">            result.append(match)</span><br><span class="line">            cursor += max(match[<span class="number">1</span>] + <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decoding</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pair[<span class="number">1</span>]:</span><br><span class="line">                result.append(pair[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                chars = result[pair[<span class="number">0</span>]:pair[<span class="number">0</span>] + pair[<span class="number">1</span>]]</span><br><span class="line">                result.extend(chars)</span><br><span class="line">                result.append(pair[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(result)</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77" target="_blank" rel="noopener">维基百科</a></p><p><a href="https://github.com/LLcoolNJ/LZ77/blob/master/src/lz77.py" target="_blank" rel="noopener">python2 bitarray实现</a></p><p><a href="https://github.com/manassra/LZ77-Compressor/blob/master/src/" target="_blank" rel="noopener">另一个实现</a></p><p><a href="http://www.stringology.org/DataCompression/lz77/index_en.html" target="_blank" rel="noopener">过程讲解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LZ77是一个由Abraham Lempel于1977年发表的无损压缩算法，其思想与霍夫曼编码有很大差别。霍夫曼编码主要是用较短的编码代替出现频率较高的字符，用较长的编码代替出现频率较低的字符；LZ77编码的核心思想则是将重复出现的较长字符串（短语），使用较短的、指向前面第一次出现的字符串的标记来代替。标记与原序列之间是一种映射，因此，LZ77算法可以说成是基于字典的算法。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="算法" scheme="https://arianx.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="编码" scheme="https://arianx.me/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>实现霍夫曼编码</title>
    <link href="https://arianx.me/2018/06/24/Python-Huffman-Tree/"/>
    <id>https://arianx.me/2018/06/24/Python-Huffman-Tree/</id>
    <published>2018-06-24T07:44:23.000Z</published>
    <updated>2018-08-23T02:15:45.794Z</updated>
    
    <content type="html"><![CDATA[<p>霍夫曼编码是一种使用变长编码表编码源符号的无损压缩算法。它的核心思想是计算各个符号的权重，出现次数较多的符号拥有较大的权重，出现次数较少的符号拥有较小的权重。然后对符号进行前缀编码，用较短的编码表示拥有较长权重的符号，用较长的编码表示拥有较短权重的符号。这样，总体来说，对于符号出现次数不均衡的序列，霍夫曼编码就能够拥有较好的表现。</p><a id="more"></a><h2 id="压缩过程"><a href="#压缩过程" class="headerlink" title="压缩过程"></a>压缩过程</h2><p>霍夫曼编码的压缩阶段主要有以下几个步骤：</p><ol><li>读入符号，计算各个符号的权重。</li><li>根据符号的权重建立霍夫曼树。</li><li>依据霍夫曼树建立编码表。</li><li>压缩</li></ol><h3 id="计算权重"><a href="#计算权重" class="headerlink" title="计算权重"></a>计算权重</h3><p>计算权重很容易理解。遍历符号，计算各个符号出现的次数。把出现的次数当作权重即可。实际实现中，如果以字节为单位压缩，考虑到一个字节有8位，最大能表示255。为了操作方便，可以将出现的次数除以最大的出现次数，再乘以256当作权重。这样，所有权重就刚分布在一个字节的表示范围以内。</p><p>同时，考虑到一个字节的编码刚好是0~255，可以建立一个数组，这个数组的下标表示对应的符号，这个数组的值表示符号的权重。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_minimize_frequencies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 缩小字频使其在一个字节范围以内</span></span><br><span class="line">        max_freq = max(self.freqs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> symbol, freq <span class="keyword">in</span> enumerate(self.freqs):</span><br><span class="line">            scale_freq = int(self.BYTE_MAX_NUM * (freq / max_freq))</span><br><span class="line">            scale_freq = <span class="number">1</span> <span class="keyword">if</span> <span class="keyword">not</span> scale_freq <span class="keyword">and</span> freq <span class="keyword">else</span> scale_freq</span><br><span class="line"></span><br><span class="line">            self.freqs[symbol] = scale_freq</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_symbol_frequencies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> symbol <span class="keyword">in</span> self.origin:</span><br><span class="line">            self.freqs[symbol] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self._minimize_frequencies()</span><br></pre></td></tr></table></figure><p>计算了各个符号的权重之后，就可以根据这些权重建立霍夫曼树。从霍夫曼树中，我们可以得到符号的前缀码表。</p><h3 id="建立霍夫曼树"><a href="#建立霍夫曼树" class="headerlink" title="建立霍夫曼树"></a>建立霍夫曼树</h3><p>霍夫曼树是一颗二叉树，其每个节点至少有四个值——符号，权重，左树指针，右树指针。建立霍夫曼树主要有两种方式。第一种是使用一个优先队列（堆）。首先，为所有的符号创造一个节点，储存进这个符号本身和它的权重。然后将所有的节点压入优先队列，拥有最低权重的节点拥有最高的优先级（即，低权重的节点会先被弹出。）然后执行以下步骤：</p><ol><li>如果优先队列中的元素大于一，弹出两个节点。以这两个节点为左右指针创建一颗新的霍夫曼树，其权重为作为节点之和。将这个新树压入优先队列。重复本步骤。</li><li>否则，弹出剩下的元素作为最终的霍夫曼树。</li></ol><p>除了优先队列外，还可以使用两个队列来建立霍夫曼树。首先，像前面那样创建节点，按照权重排序所有节点。然后创建两个队列，将节点按照权重从低到高的顺序依次入其中一个队列1。然后执行以下步骤：</p><ol><li>如果一个队列为空，从另一个队列中弹出两个元素；否则，比较两个队列首元素的权重，弹出权重最小的两个元素。用这两个元素作为子树建立一个新的霍夫曼树，其权重为两元素权重之和。将这颗新树压入队列2。重复本步骤，直到队列只剩下一个元素。</li><li>弹出这个元素作为最终的霍夫曼树。</li></ol><p>使用优先队列的实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_initial_node_heap</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._heap = []</span><br><span class="line">        <span class="keyword">for</span> symbol, freq <span class="keyword">in</span> enumerate(self.freqs):</span><br><span class="line">            node = HuffmanNode(symbol, freq)</span><br><span class="line">            heapq.heappush(self._heap, node)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_build_huffman_tree</span><span class="params">(self)</span>:</span></span><br><span class="line">    self._initial_node_heap()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(self._heap) &gt; <span class="number">1</span>:</span><br><span class="line">        node1 = heapq.heappop(self._heap)</span><br><span class="line">        node2 = heapq.heappop(self._heap)</span><br><span class="line"></span><br><span class="line">        new_node = HuffmanNode(symbol=<span class="keyword">None</span>, freq=node1.freq + node2.freq)</span><br><span class="line">        new_node.left, new_node.right = node1, node2</span><br><span class="line">        node1.parent, node2.parent = new_node, new_node</span><br><span class="line">        heapq.heappush(self._heap, new_node)</span><br><span class="line"></span><br><span class="line">    self.huffman_tree = heapq.heappop(self._heap)</span><br><span class="line">    <span class="keyword">del</span> self._heap</span><br><span class="line">    <span class="keyword">return</span> self.huffman_tree</span><br></pre></td></tr></table></figure></p><h3 id="建立编码表"><a href="#建立编码表" class="headerlink" title="建立编码表"></a>建立编码表</h3><p>根据得到的霍夫曼树，我们可以为符号建立一组前缀码。</p><p>如果一组编码，其中任意一个编码都不为另一个编码的前缀，那么我们就称这组编码为一组前缀码。将符号使用前缀码编码是极有意义的。这意味着，对于一组编码，我们可以不借助任何分割符解码其中的每一个符号。即，此时，这组编码是唯一可解的。</p><p>前面说过，霍夫曼树是一颗二叉树。因此，这颗二叉树的所有叶子节点的路径组成的编码即为一组前缀码。把左子树编码为0，将右子树编码为1。可以递归求出符号的编码表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_build_coding_table</span><span class="params">(self, node, code_str=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.symbol <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.coding_table[node.symbol] = code_str</span><br><span class="line">            self.reverse_table[code_str] = node.symbol</span><br><span class="line"></span><br><span class="line">        self._build_coding_table(node.left, code_str + <span class="string">'0'</span>)</span><br><span class="line">        self._build_coding_table(node.right, code_str + <span class="string">'1'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>把符号按照编码表替换为相应为即可。</p><p>如果用C语言实现，可以方便地直接对内存进行位操作。而Python的位操作比较麻烦。因此，可以先将所有二进制编码先视为字符串，然后每8位字符串转换为一个16进制数，转换为python中的bytes类型，直接写入文件即可。</p><p>将符号频率同编码一同写入文件，就可以在之后通过读取频率来解压。</p><p>替换过程核心代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_build_codeing_str</span><span class="params">(self)</span>:</span></span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> symbol <span class="keyword">in</span> self.origin:</span><br><span class="line">            temp.append(self.coding_table[symbol])</span><br><span class="line">        self.coding_str = <span class="string">''</span>.join(temp)</span><br><span class="line"></span><br><span class="line">        self._pading_coding_str()</span><br><span class="line">        self._prefix_coding_freqs()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.coding_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_compressed</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span>(len(self.coding_str) % <span class="number">8</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        b = bytearray()</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">0</span>, len(self.coding_str), <span class="number">8</span>):</span><br><span class="line">            code_num = int(self.coding_str[index:index + <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">            b.append(code_num)</span><br><span class="line"></span><br><span class="line">        self.compressed = bytes(b)</span><br><span class="line">        <span class="keyword">return</span> self.compressed</span><br></pre></td></tr></table></figure></p><h2 id="解压过程"><a href="#解压过程" class="headerlink" title="解压过程"></a>解压过程</h2><p>解压过程较简单，是前面压缩过程的逆操作。</p><p>首先读取符号频率，根据符号频率建立霍夫曼树，然后再根据霍夫曼树解压编码即可。</p><p>核心解压代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_decode_compressed</span><span class="params">(self)</span>:</span></span><br><span class="line">        real_coding_str = self._get_real_coding_from_compressed()</span><br><span class="line">        decode_content = []</span><br><span class="line"></span><br><span class="line">        node = self.huffman_tree</span><br><span class="line">        <span class="keyword">for</span> state <span class="keyword">in</span> real_coding_str:</span><br><span class="line">            <span class="keyword">if</span> state == <span class="string">'0'</span>:</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">elif</span> state == <span class="string">'1'</span>:</span><br><span class="line">                node = node.right</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.symbol <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">assert</span>(<span class="number">0</span> &lt;= node.symbol &lt;= self.BYTE_MAX_NUM)</span><br><span class="line">                hex_str = hex(node.symbol)[<span class="number">2</span>:]</span><br><span class="line">                <span class="comment"># fromhex方法将两个字符识别为一个16进制数</span></span><br><span class="line">                <span class="comment"># 所以单个数需要补零</span></span><br><span class="line">                hex_str = <span class="string">'0'</span> + hex_str <span class="keyword">if</span> len(hex_str) == <span class="number">1</span> <span class="keyword">else</span> hex_str</span><br><span class="line">                decode_content.append(hex_str)</span><br><span class="line">                node = self.huffman_tree</span><br><span class="line"></span><br><span class="line">        decode_content = <span class="string">''</span>.join(decode_content)</span><br><span class="line">        <span class="keyword">return</span> bytes.fromhex(decode_content)</span><br></pre></td></tr></table></figure></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>txt文本文件：</p><p><img src="http://arian-blogs.oss-cn-beijing.aliyuncs.com/18-6-24/78951981.jpg" alt=""></p><p>mp3文件：</p><p><img src="http://arian-blogs.oss-cn-beijing.aliyuncs.com/18-6-24/28880208.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://en.wikipedia.org/wiki/Huffman_coding" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Huffman_coding</a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://gist.github.com/Arianxx/603dc688a4b68f207ada2c4534758637" target="_blank" rel="noopener">https://gist.github.com/Arianxx/603dc688a4b68f207ada2c4534758637</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuffmanNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, symbol=None, freq=None)</span>:</span></span><br><span class="line">        self.symbol = symbol</span><br><span class="line">        self.freq = freq</span><br><span class="line">        self.parent = <span class="keyword">None</span></span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.freq &lt; other.freq</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.left <span class="keyword">and</span> <span class="keyword">not</span> self.right</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 调试用</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_laef():</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Not a leaf node."</span>)</span><br><span class="line"></span><br><span class="line">        code = <span class="string">''</span></span><br><span class="line">        node = self</span><br><span class="line">        <span class="keyword">while</span> node.parent:</span><br><span class="line">            <span class="keyword">if</span> node.parent.left == node:</span><br><span class="line">                code = <span class="string">'0'</span> + code</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = <span class="string">'1'</span> + code</span><br><span class="line">            code = code.parent</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huffman</span>:</span></span><br><span class="line">    BYTE_MAX_NUM = <span class="number">255</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.origin = <span class="keyword">None</span></span><br><span class="line">        self.compressed = <span class="keyword">None</span></span><br><span class="line">        self.huffman_tree = <span class="keyword">None</span></span><br><span class="line">        self.freqs = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.BYTE_MAX_NUM + <span class="number">1</span>)]</span><br><span class="line">        self.coding_table = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.BYTE_MAX_NUM + <span class="number">1</span>)]</span><br><span class="line">        self.reverse_table = &#123;&#125;</span><br><span class="line">        self.coding_str = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_minimize_frequencies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 缩小字频使其在一个字节范围以内</span></span><br><span class="line">        max_freq = max(self.freqs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> symbol, freq <span class="keyword">in</span> enumerate(self.freqs):</span><br><span class="line">            scale_freq = int(self.BYTE_MAX_NUM * (freq / max_freq))</span><br><span class="line">            scale_freq = <span class="number">1</span> <span class="keyword">if</span> <span class="keyword">not</span> scale_freq <span class="keyword">and</span> freq <span class="keyword">else</span> scale_freq</span><br><span class="line"></span><br><span class="line">            self.freqs[symbol] = scale_freq</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_symbol_frequencies</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> symbol <span class="keyword">in</span> self.origin:</span><br><span class="line">            self.freqs[symbol] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self._minimize_frequencies()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initial_node_heap</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._heap = []</span><br><span class="line">        <span class="keyword">for</span> symbol, freq <span class="keyword">in</span> enumerate(self.freqs):</span><br><span class="line">            node = HuffmanNode(symbol, freq)</span><br><span class="line">            heapq.heappush(self._heap, node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_huffman_tree</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._initial_node_heap()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> len(self._heap) &gt; <span class="number">1</span>:</span><br><span class="line">            node1 = heapq.heappop(self._heap)</span><br><span class="line">            node2 = heapq.heappop(self._heap)</span><br><span class="line"></span><br><span class="line">            new_node = HuffmanNode(symbol=<span class="keyword">None</span>, freq=node1.freq + node2.freq)</span><br><span class="line">            new_node.left, new_node.right = node1, node2</span><br><span class="line">            node1.parent, node2.parent = new_node, new_node</span><br><span class="line">            heapq.heappush(self._heap, new_node)</span><br><span class="line"></span><br><span class="line">        self.huffman_tree = heapq.heappop(self._heap)</span><br><span class="line">        <span class="keyword">del</span> self._heap</span><br><span class="line">        <span class="keyword">return</span> self.huffman_tree</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_coding_table</span><span class="params">(self, node, code_str=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.symbol <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.coding_table[node.symbol] = code_str</span><br><span class="line">            self.reverse_table[code_str] = node.symbol</span><br><span class="line"></span><br><span class="line">        self._build_coding_table(node.left, code_str + <span class="string">'0'</span>)</span><br><span class="line">        self._build_coding_table(node.right, code_str + <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pading_coding_str</span><span class="params">(self)</span>:</span></span><br><span class="line">        pading_count = <span class="number">8</span> - len(self.coding_str) % <span class="number">8</span></span><br><span class="line">        self.coding_str += <span class="string">'0'</span> * pading_count</span><br><span class="line">        state_str = <span class="string">'&#123;:08b&#125;'</span>.format(pading_count)</span><br><span class="line">        self.coding_str = state_str + self.coding_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_prefix_coding_freqs</span><span class="params">(self)</span>:</span></span><br><span class="line">        coding_freqs = []</span><br><span class="line">        <span class="keyword">for</span> freq <span class="keyword">in</span> self.freqs:</span><br><span class="line">            coding_freqs.append(<span class="string">'&#123;:08b&#125;'</span>.format(freq))</span><br><span class="line">        coding_freqs = <span class="string">''</span>.join(coding_freqs)</span><br><span class="line">        self.coding_str = coding_freqs + self.coding_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_codeing_str</span><span class="params">(self)</span>:</span></span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> symbol <span class="keyword">in</span> self.origin:</span><br><span class="line">            temp.append(self.coding_table[symbol])</span><br><span class="line">        self.coding_str = <span class="string">''</span>.join(temp)</span><br><span class="line"></span><br><span class="line">        self._pading_coding_str()</span><br><span class="line">        self._prefix_coding_freqs()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.coding_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_compressed</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span>(len(self.coding_str) % <span class="number">8</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        b = bytearray()</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">0</span>, len(self.coding_str), <span class="number">8</span>):</span><br><span class="line">            code_num = int(self.coding_str[index:index + <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">            b.append(code_num)</span><br><span class="line"></span><br><span class="line">        self.compressed = bytes(b)</span><br><span class="line">        <span class="keyword">return</span> self.compressed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_read_frequencies_from_compressed</span><span class="params">(self)</span>:</span></span><br><span class="line">        coding_freqs = self.compressed[:self.BYTE_MAX_NUM + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> index, freq <span class="keyword">in</span> enumerate(coding_freqs):</span><br><span class="line">            self.freqs[index] = freq</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_real_coding_from_compressed</span><span class="params">(self)</span>:</span></span><br><span class="line">        pading_count = self.compressed[self.BYTE_MAX_NUM + <span class="number">1</span>]</span><br><span class="line">        byte_coding_str = self.compressed[self.BYTE_MAX_NUM + <span class="number">2</span>:]</span><br><span class="line">        coding_str = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> byte_coding_str:</span><br><span class="line">            temp = bin(num)[<span class="number">2</span>:]</span><br><span class="line">            <span class="comment"># 补足省略掉的前导零</span></span><br><span class="line">            temp = <span class="string">'0'</span> * (<span class="number">8</span> - len(temp)) + temp</span><br><span class="line">            <span class="keyword">assert</span>(len(temp) == <span class="number">8</span>)</span><br><span class="line">            coding_str.append(temp)</span><br><span class="line">        coding_str = <span class="string">''</span>.join(coding_str)</span><br><span class="line">        <span class="keyword">assert</span>(len(coding_str) % <span class="number">8</span> == <span class="number">0</span>)</span><br><span class="line">        real_coding_str = coding_str[:-pading_count]</span><br><span class="line">        <span class="keyword">return</span> real_coding_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_decode_compressed</span><span class="params">(self)</span>:</span></span><br><span class="line">        real_coding_str = self._get_real_coding_from_compressed()</span><br><span class="line">        decode_content = []</span><br><span class="line"></span><br><span class="line">        node = self.huffman_tree</span><br><span class="line">        <span class="keyword">for</span> state <span class="keyword">in</span> real_coding_str:</span><br><span class="line">            <span class="keyword">if</span> state == <span class="string">'0'</span>:</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">elif</span> state == <span class="string">'1'</span>:</span><br><span class="line">                node = node.right</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.symbol <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">assert</span>(<span class="number">0</span> &lt;= node.symbol &lt;= self.BYTE_MAX_NUM)</span><br><span class="line">                hex_str = hex(node.symbol)[<span class="number">2</span>:]</span><br><span class="line">                <span class="comment"># fromhex方法将两个字符识别为一个16进制数</span></span><br><span class="line">                <span class="comment"># 所以单个数需要补零</span></span><br><span class="line">                hex_str = <span class="string">'0'</span> + hex_str <span class="keyword">if</span> len(hex_str) == <span class="number">1</span> <span class="keyword">else</span> hex_str</span><br><span class="line">                decode_content.append(hex_str)</span><br><span class="line">                node = self.huffman_tree</span><br><span class="line"></span><br><span class="line">        decode_content = <span class="string">''</span>.join(decode_content)</span><br><span class="line">        <span class="keyword">return</span> bytes.fromhex(decode_content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, origin)</span>:</span></span><br><span class="line">        self.clear()</span><br><span class="line">        self.origin = origin</span><br><span class="line">        self._get_symbol_frequencies()</span><br><span class="line">        self._build_huffman_tree()</span><br><span class="line">        self._build_coding_table(self.huffman_tree)</span><br><span class="line">        self._build_codeing_str()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._get_compressed()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compresse</span><span class="params">(self, filename, output_filename=None)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            origin = file.read()</span><br><span class="line"></span><br><span class="line">        compressed_content = self.encode(origin)</span><br><span class="line">        <span class="keyword">if</span> output_filename <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            output_filename = filename + <span class="string">'.hfm'</span></span><br><span class="line">        <span class="keyword">with</span> open(output_filename, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(compressed_content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, compressed)</span>:</span></span><br><span class="line">        self.clear()</span><br><span class="line">        self.compressed = compressed</span><br><span class="line">        self._read_frequencies_from_compressed()</span><br><span class="line">        self._build_huffman_tree()</span><br><span class="line">        <span class="keyword">return</span> self._decode_compressed()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uncompresse</span><span class="params">(self, filename, output_filename=None)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            compressed = file.read()</span><br><span class="line"></span><br><span class="line">        decode_content = self.decode(compressed)</span><br><span class="line">        <span class="keyword">if</span> output_filename <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> filename.endswith(<span class="string">'.hfm'</span>):</span><br><span class="line">                output_filename = filename[:<span class="number">-4</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output_filename = filename + <span class="string">'.dhfm'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(output_filename, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(decode_content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;霍夫曼编码是一种使用变长编码表编码源符号的无损压缩算法。它的核心思想是计算各个符号的权重，出现次数较多的符号拥有较大的权重，出现次数较少的符号拥有较小的权重。然后对符号进行前缀编码，用较短的编码表示拥有较长权重的符号，用较长的编码表示拥有较短权重的符号。这样，总体来说，对于符号出现次数不均衡的序列，霍夫曼编码就能够拥有较好的表现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="算法" scheme="https://arianx.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="编码" scheme="https://arianx.me/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>十种常见的排序方法</title>
    <link href="https://arianx.me/2018/06/22/Common-sort-algorithm/"/>
    <id>https://arianx.me/2018/06/22/Common-sort-algorithm/</id>
    <published>2018-06-22T11:48:09.000Z</published>
    <updated>2018-08-22T16:14:03.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文介绍了十种常见简单排序算法的python实现。</p><p>将要介绍的这十种排序算法分别是——冒泡排序、选择排序、插入排序、希尔排序、快速排序、归并排序、堆排序、计数排序、基数排序、桶排序<br><a id="more"></a></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>一遍遍遍历元素，两两交换其中不符合顺序的元素，将最大（或最小的）那个元素提取到最边缘的位置，直到不再有需要交换的元素为止。冒泡排序时常是排序算法中比较简单，也比较低效的一种排序方式。其时间复杂度为<code>O(n^2)</code>，空间复杂度为<code>O(1)</code>。</p><p>实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(data, compare=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    length = len(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, length - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> compare(data[j], data[j + <span class="number">1</span>]):</span><br><span class="line">                data[j], data[j + <span class="number">1</span>] = data[j + <span class="number">1</span>], data[j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>每一次遍历元素，都选择其余元素中最小或最大的那个元素，每一次都缩小遍历范围直到遍历完成。选择排序的时间复杂度仍然为<code>O(n^2)</code>，空间复杂度为<code>O(1)</code>。即使如此，选择排序的性能要略优于冒泡排序。</p><p>实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(data, compare=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    length = len(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> compare(data[index], data[j]):</span><br><span class="line">                index = j</span><br><span class="line">        data[index], data[i] = data[i], data[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序的基本思想是将一个数插入一个已经排好序的序列中，并且在插入后仍然保持有序。实现上将每个序列最开始的部分视为有序，然后依次将后面的元素插入前面的有序列表。直到遍历所有元素，即得到一个全部有序的列表。插入排序的时间复杂度仍为<code>O(n^2)</code>，空间复杂度为<code>O(1)</code>。然而在数据量或数据基本有序时，插入排序将会拥有比冒泡和选择排序稍优异的性能。因此，经常将插入排序用作某些复合排序方法中的一部分。</p><p>实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ins_sort</span><span class="params">(data, compare=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(data):</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> compare(data[index - <span class="number">1</span>], data[index]):</span><br><span class="line">                data[index], data[index - <span class="number">1</span>] = data[index - <span class="number">1</span>], data[index]</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序基于插入排序。与插入排序每次比较交换最近的元素，依次向后遍历不同，希尔排序将序列分成几组，对这几组分别进行插入排序。然后缩小分组的间隔后再次分组，执行插入排序，直到分组间隔为1。可以看出，每一次分组，序列都将越来越有序，从而执行插入排序比较、交换的次数就会越来越少。因此，希尔排序的速度要优于O(n^2)，平均为O(nlog^2n)，最好为O(nlogn)。</p><p>从另一个方面看，排序的实质实际上是消除序列中的逆序数。冒泡、选择、插入等一次交换仅消除一个逆序数，而希尔排序一次交换会消除多个逆序数。因此希尔排序比普通插入排序更快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(data, compare=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    length = len(data)</span><br><span class="line">    gap = length // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, length, gap):</span><br><span class="line">            current = data[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> i &gt;= gap <span class="keyword">and</span> <span class="keyword">not</span> compare(data[i - gap], current):</span><br><span class="line">                data[i] = data[i - gap]</span><br><span class="line">                i -= gap</span><br><span class="line"></span><br><span class="line">            data[i] = current</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是分治法的体现。每次排序都选择一个基准元素，将序列分成独立的两部分，一部分中的所有元素始终小于基准元素，另一部分中的所有元素始终大于基准元素。对这两部分序列分别进行快速排序，直到序列不可再分。此时序列即是有序的。快速排序的平均时间复杂度为<code>O(nlogn)</code>，最坏情况为<code>O(n^2)</code>，空间复杂度为<code>O(logn)</code>（递归）。</p><p>两种实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速排序1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort1</span><span class="params">(data, begin=None, end=None, compare=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">    begin = begin <span class="keyword">if</span> begin <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    end = end <span class="keyword">if</span> end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> (len(data) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> begin &gt;= end:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    key = randint(begin, end)</span><br><span class="line">    data[begin], data[key] = data[key], data[begin]</span><br><span class="line">    left = begin</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(begin + <span class="number">1</span>, end + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> compare(data[index], data[begin]):</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            data[left], data[index] = data[index], data[left]</span><br><span class="line">    data[left], data[begin] = data[begin], data[left]</span><br><span class="line"></span><br><span class="line">    quick_sort1(data, begin, left - <span class="number">1</span>)</span><br><span class="line">    quick_sort1(data, left + <span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速排序2</span></span><br><span class="line">quick_sort2 = <span class="keyword">lambda</span> data, compare=<span class="keyword">lambda</span> x, y: x &lt; y: \</span><br><span class="line">    data <span class="keyword">if</span> len(data) &lt; <span class="number">2</span> <span class="keyword">else</span> \</span><br><span class="line">    quick_sort2([a <span class="keyword">for</span> a <span class="keyword">in</span> data <span class="keyword">if</span> compare(a, data[<span class="number">0</span>])]) + \</span><br><span class="line">    [data[<span class="number">0</span>] * data.count(data[<span class="number">0</span>])] + \</span><br><span class="line">    quick_sort2([b <span class="keyword">for</span> b <span class="keyword">in</span> data <span class="keyword">if</span> compare(data[<span class="number">0</span>], b)])</span><br></pre></td></tr></table></figure></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序同运用了分治法的思想。归并排序将数据分为两部分，对每部分序列一次运用归并排序，直到不可再分，然后将各部分有序序列组合起来。最终返回的即为有序序列。归并排序的时间复杂度是<code>O(nlogn)</code>。</p><p>实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(data, i, j, k, compare)</span>:</span></span><br><span class="line">    new_data = []</span><br><span class="line">    data1, data2 = data[i:j + <span class="number">1</span>], data[j + <span class="number">1</span>:k + <span class="number">1</span>]</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; len(data1) <span class="keyword">and</span> b &lt; len(data2):</span><br><span class="line">        <span class="keyword">if</span> compare(data1[a], data2[b]):</span><br><span class="line">            new_data.append(data1[a])</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_data.append(data2[b])</span><br><span class="line">            b += <span class="number">1</span></span><br><span class="line">    new_data.extend(data1[a:])</span><br><span class="line">    new_data.extend(data2[b:])</span><br><span class="line">    data[i:k + <span class="number">1</span>] = new_data</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(data, begin=None, end=None, compare=lambda x, y: x &lt; y)</span>:</span></span><br><span class="line">    begin = begin <span class="keyword">if</span> begin <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    end = end <span class="keyword">if</span> end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> (len(data) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> begin &lt; end:</span><br><span class="line">        mid = (begin + end) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        merge_sort(data, begin, mid, compare)</span><br><span class="line"></span><br><span class="line">        merge_sort(data, mid + <span class="number">1</span>, end, compare)</span><br><span class="line"></span><br><span class="line">        merge(data, begin, mid, end, compare)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>参见上一篇文章</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>计数排序是一种非比较的，稳定的线性时间排序算法。它将序列中的元素与一个数组中的位置对应。这个数组的下标是元素的值，这个位置储存的值是元素在新序列里所处于的位置。由n个元素组成，最大值为k的序列，首先构建一个长度为k的数组，遍历序列将它映射到数组之中，最后根据数组生成新的有序序列。因此，计数排序的时间复杂度与空间复杂度均为<code>O(n + k)</code>。</p><p>计数排序适用于容易将序列的值映射为整数，且跨度不太大的情况下。并且，序列排序经常被用于更复杂的排序（如基数排序）的基本排序方法。</p><p>实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计数排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counting_sort</span><span class="params">(data, max_value=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param data: 要排序的可迭代对象</span></span><br><span class="line"><span class="string">    @param max: data里的最大值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    max_value = max_value <span class="keyword">if</span> max_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> max(data)</span><br><span class="line"></span><br><span class="line">    result = [<span class="keyword">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(data))]</span><br><span class="line">    position = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(max_value + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> data:</span><br><span class="line">        position[value] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, max_value + <span class="number">1</span>):</span><br><span class="line">        position[index] += position[index - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    n = len(data) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">        value = data[n]</span><br><span class="line">        result[position[value] - <span class="number">1</span>] = value</span><br><span class="line">        position[value] -= <span class="number">1</span></span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p><!--MORE--><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序根据给定的基数，对序列元素的每一位依次进行计数排序。因为基数排序对p位元素的每一位都执行了计数排序，因此其时间复杂度为计数排序的p倍，即<code>O(p * (n + k))</code>。</p><p>与计数排序不同，只要可以将元素分成整形数字组成的几部分（如：字符串），就可以使用基数排序。</p><p>实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(data, exp=<span class="number">10</span>, digit=<span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> pow</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param data: 待排序的可迭代对象</span></span><br><span class="line"><span class="string">    @param exp: 排序的基数</span></span><br><span class="line"><span class="string">    @param digit: 数据的最大位数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(digit):</span><br><span class="line">        result = [<span class="keyword">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(data))]</span><br><span class="line">        now_exp = pow(exp, e)</span><br><span class="line">        position = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(exp)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> data:</span><br><span class="line">            bit = int(value / now_exp) % exp</span><br><span class="line">            position[bit] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, exp):</span><br><span class="line">            position[index] += position[index - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        n = len(data) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">            bit = int(data[n] / now_exp) % exp</span><br><span class="line">            result[position[bit] - <span class="number">1</span>] = data[n]</span><br><span class="line">            position[bit] -= <span class="number">1</span></span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        data = result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></p><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>桶排序将序列分到有限个数量的桶里，每个桶中的元素均处于某一个区间，对每个桶里的元素分别进行排序，最后再将每个桶组合起来。在序列中的值均匀分配的情况下，有n个元素，分到k个桶里，桶排序的时间复杂度为<code>O(n + k)</code>，空间复杂度为<code>O(n * k)</code>。</p><p>实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 桶排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span><span class="params">(data, bucket_size=<span class="number">1</span>, compare=lambda x, y: x &lt;= y)</span>:</span></span><br><span class="line">    min_value, max_value = int(min(data)), int(max(data))</span><br><span class="line">    bucket_count = (max_value - min_value) // bucket_size + <span class="number">1</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(bucket_count)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> data:</span><br><span class="line">        buckets[(value - min_value) // bucket_size].append(value)</span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets:</span><br><span class="line">        ins_sort(bucket, compare)</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> bucket:</span><br><span class="line">            data[index] = value</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></p><h2 id="各个排序算法的运行时间比较"><a href="#各个排序算法的运行时间比较" class="headerlink" title="各个排序算法的运行时间比较"></a>各个排序算法的运行时间比较</h2><p>分别测试了2000个元素和20000个随机元素下，各排序算法花费的时间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(FAKE_COUNT=<span class="number">5000</span>, FAKE_RANGE=<span class="number">10000</span>)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">    fake_data = [random.randint(<span class="number">0</span>, FAKE_RANGE) <span class="keyword">for</span> _ <span class="keyword">in</span> range(FAKE_COUNT)]</span><br><span class="line">    times = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    sort_methods = [bubble_sort, selection_sort, ins_sort, shell_sort,</span><br><span class="line">                    quick_sort1, quick_sort2, merge_sort, counting_sort,</span><br><span class="line">                    radix_sort, bucket_sort]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> method <span class="keyword">in</span> sort_methods:</span><br><span class="line"></span><br><span class="line">        start = time.time()</span><br><span class="line">        method(list(fake_data))</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        times[method.__name__] = end - start</span><br><span class="line"></span><br><span class="line">    sorted_time = sorted(times, key=<span class="keyword">lambda</span> x: times[x])</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> sorted_time:</span><br><span class="line">        print(<span class="string">"&#123;key:&lt;15&#125;:&#123;time:&lt;20&#125;"</span>.format(key=key, time=times[key]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'COUNT:2000\tSIZE:2000'</span>)</span><br><span class="line">    compare(<span class="number">2000</span>, <span class="number">2000</span>)</span><br><span class="line">    print(<span class="string">'COUNT:20000\tSIZE:20000'</span>)</span><br><span class="line">    compare(<span class="number">20000</span>, <span class="number">20000</span>)</span><br></pre></td></tr></table></figure></p><p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">COUNT:2000      SIZE:2000</span><br><span class="line">counting_sort  :0.002000093460083008</span><br><span class="line">bucket_sort    :0.0020058155059814453</span><br><span class="line">&lt;lambda&gt;       :0.009976387023925781</span><br><span class="line">radix_sort     :0.014000892639160156</span><br><span class="line">quick_sort1    :0.017019033432006836</span><br><span class="line">merge_sort     :0.026001930236816406</span><br><span class="line">shell_sort     :0.32696533203125</span><br><span class="line">selection_sort :0.45195460319519043</span><br><span class="line">ins_sort       :0.9020371437072754</span><br><span class="line">bubble_sort    :1.868042230606079</span><br><span class="line"></span><br><span class="line">COUNT:20000     SIZE:20000</span><br><span class="line">counting_sort  :0.01299905776977539</span><br><span class="line">bucket_sort    :0.025992870330810547</span><br><span class="line">radix_sort     :0.08400774002075195</span><br><span class="line">&lt;lambda&gt;       :0.12100505828857422</span><br><span class="line">quick_sort1    :0.13498902320861816</span><br><span class="line">merge_sort     :0.1459970474243164</span><br><span class="line">shell_sort     :25.587008714675903</span><br><span class="line">selection_sort :43.999064207077026</span><br><span class="line">ins_sort       :70.03945851325989</span><br><span class="line">bubble_sort    :84.87412595748901</span><br></pre></td></tr></table></figure></p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>诶，六月炎炎近酷暑，吹着空调写代码╮（╯＿╰）╭</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍了十种常见简单排序算法的python实现。&lt;/p&gt;
&lt;p&gt;将要介绍的这十种排序算法分别是——冒泡排序、选择排序、插入排序、希尔排序、快速排序、归并排序、堆排序、计数排序、基数排序、桶排序&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="算法" scheme="https://arianx.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>堆排序简述</title>
    <link href="https://arianx.me/2018/06/17/Heap-in-python/"/>
    <id>https://arianx.me/2018/06/17/Heap-in-python/</id>
    <published>2018-06-17T14:28:59.000Z</published>
    <updated>2018-08-22T16:14:56.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是一种基于树的数据结构，其父节点总是大于（最大堆）或小于（最小堆）其子节点，并且其根节点总是树中最小（或最大）的那个节点。</p><p>堆排序常被用来实现<code>优先队列</code>，用于按给定的因子排定元素的优先级。而其本身最常采用的实现方式是扁平储存的二叉树。在二叉树实现的堆中，一个节点的兄弟节点并无特定的关系。唯一的关系存在于父节点和子结点中。<br><a id="more"></a></p><p>由于堆的二叉树总会是一个完全二叉树，且是用列表的方式扁平储存二叉树以实现堆，所以，在堆的列表中，序号为 n 的节点有以下几个特征：</p><ol><li>其父节点为 <code>(n - 1) // 2</code> （取整）。</li><li>其左子节点为 <code>n * 2 + 1</code>。</li><li>其右子节点为 <code>n * 2 + 2</code>。</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>对堆执行插入操作，只需将其推入列表尾部，然后逐一与其父节点进行比较，如果逆序就交换。直到不再交换，则节点已经在正确为止。</p><p>关键代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heap_up</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        parent = self.parent(index)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.compare(self._heap[parent], self._heap[index]):</span><br><span class="line">                self._heap[parent], self._heap[index] = \</span><br><span class="line">                    self._heap[index], self._heap[parent]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            index = parent</span><br><span class="line">            parent = self.parent(index)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> index == parent:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self._heap.append(node)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        self.heap_up(self.size - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h3 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h3><p>提取堆中最大的一个元素，只需提取第一个元素，然后用最后一个元素覆盖第一个元素。再逐一将这个元素与和这个元素差距最大的子元素比较，如果逆序就交换。直到不再交换为止，删除最后一个元素，返回提取出来的第一个元素。操作完毕。</p><p>关键代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">heap_down</span><span class="params">(self, index=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            child = self.max_child(index)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> child:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.compare(self._heap[child], self._heap[index]):</span><br><span class="line">                    self._heap[child], self._heap[index] = \</span><br><span class="line">                        self._heap[index], self._heap[child]</span><br><span class="line">                    index = child</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(self)</span>:</span></span><br><span class="line">        top = self._heap[<span class="number">0</span>]</span><br><span class="line">        self._heap[<span class="number">0</span>] = self._heap[self.size - <span class="number">1</span>]</span><br><span class="line">        self.heap_down()</span><br><span class="line">        self._heap.pop()</span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> top</span><br></pre></td></tr></table></figure></p><!--MORE--><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《算法精解-C语言描述》</p><p><a href="https://en.wikipedia.org/wiki/Heap_(data_structure" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heap_(data_structure</a>)</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>托管在gist上：</p><p><a href="https://gist.github.com/Arianxx/17d97f0bad4512aae483395bba46a5f9" target="_blank" rel="noopener">https://gist.github.com/Arianxx/17d97f0bad4512aae483395bba46a5f9</a></p><script src="https://gist.github.com/Arianxx/17d97f0bad4512aae483395bba46a5f9.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h2&gt;&lt;p&gt;堆是一种基于树的数据结构，其父节点总是大于（最大堆）或小于（最小堆）其子节点，并且其根节点总是树中最小（或最大）的那个节点。&lt;/p&gt;
&lt;p&gt;堆排序常被用来实现&lt;code&gt;优先队列&lt;/code&gt;，用于按给定的因子排定元素的优先级。而其本身最常采用的实现方式是扁平储存的二叉树。在二叉树实现的堆中，一个节点的兄弟节点并无特定的关系。唯一的关系存在于父节点和子结点中。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://arianx.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="算法" scheme="https://arianx.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python中的AVL树</title>
    <link href="https://arianx.me/2018/06/17/python-avl-binary-tree/"/>
    <id>https://arianx.me/2018/06/17/python-avl-binary-tree/</id>
    <published>2018-06-16T23:17:17.000Z</published>
    <updated>2018-08-22T16:14:44.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今宵は雪月花</p></blockquote><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><p>将普通二叉树直接用于查找，平均情况下，仅需要查找一个分支，其时间复杂度为O(log n)。想要使查找时间尽可能短，就要使树的高度经可能短，使二叉树保持平衡状态。如果一个二叉树变得越来越不平衡，最后，其时间复杂度就变成了O(n)，相当于从头到尾遍历所有节点。<br><a id="more"></a></p><p>AVL是最先发明的一种自平衡二叉查找树，像普通二叉树一样组织数据。所不同的是，AVL的每一个节点都附带了一个<code>平衡因子</code>，其值代表了左子树和右子树的高度之差。对于每一次改变其平衡性的操作，AVL树都通过执行一次<code>旋转</code>操作来使其重新平衡。每一次插入和删除操作最多可能有<code>log n</code>个节点被旋转。因此，AVL树的插入、删除、查找操作的时间复杂度都在O(log n)。</p><p>下面使用python来实现AVL树。</p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>由普通二叉树的节点继承而来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvlNode</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    The binary searching tree. Inherit from theo `Node` class.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        super().__init__(key)</span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'AvlNode(key=&#123;key&#125;)'</span>.format(key=self.key)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_child_height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        The leaf node's height is 0. So the null node's height is -1.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> max(self.left.height <span class="keyword">if</span> self.left <span class="keyword">else</span> <span class="number">-1</span>,</span><br><span class="line">                   self.right.height <span class="keyword">if</span> self.right <span class="keyword">else</span> <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adjust_height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Search from this node to its ancestor node</span></span><br><span class="line"><span class="string">        until the height doesn't change.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        old_height = self.height</span><br><span class="line">        self.height = self.max_child_height + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.height != old_height <span class="keyword">and</span> self.parent:</span><br><span class="line">            self.parent.adjust_height()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        The null node's height is deemed as -1.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> (self.left.height <span class="keyword">if</span> self.left <span class="keyword">else</span> <span class="number">-1</span>) \</span><br><span class="line">            - (self.right.height <span class="keyword">if</span> self.right <span class="keyword">else</span> <span class="number">-1</span>)</span><br></pre></td></tr></table></figure></p><p>普通二叉树的节点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Pure binary tree's node.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Build the node instance.</span></span><br><span class="line"><span class="string">        @param key: The object that implements the __lt__ and __gt__ method.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.count = <span class="number">1</span></span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line">        self.parent = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Node(&#123;key&#125;)'</span>.format(key=self.key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_root</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Is this is the root node.(have not parent node)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> bool(self.parent)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Is this is a leaf node.(have not any left or right point)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> bool(self.left) <span class="keyword">and</span> <span class="keyword">not</span> bool(self.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_branch</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Is this is a branch node.(have the left point or right point)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> bool(self.left) ^ bool(self.right)</span><br></pre></td></tr></table></figure></p><p>与普通二叉树节点不同，AVL树的节点附带了树的高度信息，以此来判断这个节点是否处于平衡状态。如果这个节点的左子树与右子树高度差的绝对值大于1，就视这个节点为不平衡的，应该在稍后执行旋转操作。</p><p>并且AVL树的节点还又一个adjust_height方法，用于在进行一个会改变树高的操作后，重新计算这个节点所属的整个子树的高度，直到高度不再变化，代表调整完毕。</p><h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><p>AVL树的插入操作和普通二叉树类似。只不过在每一次插入后，需要重新计算子树高度（调用插入节点的adjust_height方法）。如果这次插入操作改变了树的平衡性，就需要旋转节点以使树重新平衡。</p><p>插入操作的关键代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, key, node=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Insert the key to the tree.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        new_node = super().insert(key, node=node)</span><br><span class="line">        <span class="keyword">if</span> new_node:</span><br><span class="line">            parent = new_node.parent</span><br><span class="line">            <span class="keyword">while</span> parent:</span><br><span class="line">                <span class="comment"># It has no effect on the node itself</span></span><br><span class="line">                <span class="comment"># but may change its parents' blance.</span></span><br><span class="line">                <span class="keyword">assert</span>(<span class="keyword">not</span> parent.is_leaf())</span><br><span class="line">                parent.height = parent.max_child_height + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> parent.balance <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">                    self.rebalance(parent)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                parent = parent.parent</span><br></pre></td></tr></table></figure><p>这是AvlBiTree类的一个方法，用于为AVL数插入节点。它继承自代表普通二叉树的BiTree类。因此，这里的插入方法覆盖了BiTree的插入方法。在其中调用了父类的insert方法来普通插入节点。之后，再调整树的高度。并且逐一遍历其父节点查看平衡性是否受到破坏。如果平衡新被破坏，就调用rebalance方法旋转节点，使树重新平衡。</p><p>如果进行了一次rebalance旋转操作，代表已经消除了这次插入操作的副作用使树重新平衡。那么，其上所有祖先节点的平衡性都不受这次插入操作的影响。因此，break结束对祖先节点的遍历。代表本次插入操作完成。</p><h2 id="旋转结点使树重新平衡"><a href="#旋转结点使树重新平衡" class="headerlink" title="旋转结点使树重新平衡"></a>旋转结点使树重新平衡</h2><p>关键代表如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebalance</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Rotate the appointed node if the balance had been breaked.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> node.balance == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> node.left.balance == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># LL rotate</span></span><br><span class="line">                self.__ll_rotate(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span>(node.left.balance == <span class="number">-1</span>)</span><br><span class="line">                <span class="comment"># LR rotate</span></span><br><span class="line">                self.__lr_rotate(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span>(node.balance == <span class="number">-2</span>)</span><br><span class="line">            <span class="keyword">if</span> node.right.balance == <span class="number">-1</span>:</span><br><span class="line">                <span class="comment"># RR rotate</span></span><br><span class="line">                self.__rr_rotate(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span>(node.right.balance == <span class="number">1</span>)</span><br><span class="line">                <span class="comment"># RL rotate</span></span><br><span class="line">                self.__rl_rotate(node)</span><br></pre></td></tr></table></figure><p>可见，这实际上接近于一个调度方法，根据平衡性的情况，执行不同的旋转操作。</p><h2 id="具体旋转操作："><a href="#具体旋转操作：" class="headerlink" title="具体旋转操作："></a>具体旋转操作：</h2><!--MORE--><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><h4 id="ll"><a href="#ll" class="headerlink" title="ll"></a>ll</h4><p>如果插入一个节点后使得父节点（平衡性受到破坏的节点）的左节点的平衡性为 1（左子树高度大于右子树），需要对左子树进行一次旋转操作。</p><p>令父节点为A，左子节点为B，旋转步骤为：</p><ol><li>将A的左子树替换为B的右子树。</li><li>将B的右子树替换为A。</li><li>将指向A的节点执行B。</li></ol><p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__ll_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        SHOULDN'T be directly invoked by user in any cases.</span></span><br><span class="line"><span class="string">        It will lead to the breakings of the balance if pass a error node</span></span><br><span class="line"><span class="string">        which shouldn't be rotated.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parent = node.parent</span><br><span class="line">        left = node.left</span><br><span class="line">        left_right = left.right</span><br><span class="line"></span><br><span class="line">        left.right = node</span><br><span class="line">        node.parent = left</span><br><span class="line"></span><br><span class="line">        node.left = left_right</span><br><span class="line">        <span class="keyword">if</span> left_right:</span><br><span class="line">            left_right.parent = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parent:</span><br><span class="line">            self.root = left</span><br><span class="line">            left.parent = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> parent.left == node:</span><br><span class="line">                parent.left = left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span>(parent.right == node)</span><br><span class="line">                parent.right = left</span><br><span class="line">            left.parent = parent</span><br><span class="line"></span><br><span class="line">        node.adjust_height()</span><br><span class="line">        left.adjust_height()</span><br></pre></td></tr></table></figure></p><h4 id="lr"><a href="#lr" class="headerlink" title="lr"></a>lr</h4><p>如果插入一个节点后，使得父节点的左子树的平衡性为-1，那么，在左旋一次后，树依然是不平衡的，需要再进行一次左旋操作。</p><p>令父节点为A，A的左节点为B，B的右节点为C。<br>总体的步骤如下：</p><ol><li>将B的右节点替换为C的左节点。</li><li>将A的左节点替换为C的右节点。</li><li>将C的左节点替换为B。</li><li>将C的右节点替换为A。</li><li>将指向A的节点指向C。</li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__lr_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        parent = node.parent</span><br><span class="line">        left = node.left</span><br><span class="line">        left_right = left.right</span><br><span class="line"></span><br><span class="line">        left.right = left_right.left</span><br><span class="line">        <span class="keyword">if</span> left_right.left:</span><br><span class="line">            left_right.left.parent = left</span><br><span class="line"></span><br><span class="line">        left_right.left = left</span><br><span class="line">        left.parent = left_right</span><br><span class="line"></span><br><span class="line">        node.left = left_right.right</span><br><span class="line">        <span class="keyword">if</span> left_right.right:</span><br><span class="line">            left_right.right.parent = node</span><br><span class="line"></span><br><span class="line">        left_right.right = node</span><br><span class="line">        node.parent = left_right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parent:</span><br><span class="line">            self.root = left_right</span><br><span class="line">            left_right.parent = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> parent.left == node:</span><br><span class="line">                parent.left = left_right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span>(parent.right == node)</span><br><span class="line">                parent.right = left_right</span><br><span class="line">            left_right.parent = parent</span><br><span class="line"></span><br><span class="line">        node.adjust_height()</span><br><span class="line">        left.adjust_height()</span><br></pre></td></tr></table></figure><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><h4 id="rr"><a href="#rr" class="headerlink" title="rr"></a>rr</h4><p>如左旋的ll，只不过方向相反。</p><h4 id="rl"><a href="#rl" class="headerlink" title="rl"></a>rl</h4><p>如左旋的lr，只不过方向相反。</p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>和普通的二叉树相比，AVL树的删除操作稍显复杂，因为涉及到调整平衡性的问题。</p><p>不妨考虑以下四种情况</p><ul><li>如果删除的是叶子节点。<ul><li>如果删除的是叶子节点（没有左右子节点），直接删除。这个节点（None)的平衡性不受影响。</li></ul></li><li>如果删除的是分支节点。<ul><li>如果删除的是分支上的节点（有左右子节点中的一个），将其替换为它的那个子节点。这个节点（子节点）的平衡性不受影响。</li></ul></li><li>如果删除的节点有两个子节点<ul><li>如果删除的节点有两个子节点。如果其左子树的高度大于右子树，取其左子树上最大的那个节点；如果其右子树的高度大于左子树，取其右子树上最小的那个节点。然后用取的节点替换当前节点。最后，再删除取的那个节点。这样，这个节点（取的节点）的平衡性不受影响。</li></ul></li><li>如果要删除的不是本节点<ul><li>如果要删除的节点不是本节点，而是本节点的子节点。那么，本节点的平衡性可能回受影响，在删除操作完毕后，需要对其进行重新平衡（旋转）操作。</li></ul></li></ul><p>可以看出，实际上，可以用类似递归的方法处理删除操作。关键代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_remove</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Directly remove the node no matter how many counts in the node.</span></span><br><span class="line"><span class="string">        @param node: the node in this tree which will be removed later.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parent = node.parent</span><br><span class="line">        <span class="keyword">if</span> node.is_leaf():</span><br><span class="line">            self.__remove_leaf(node)</span><br><span class="line">        <span class="keyword">elif</span> node.is_branch():</span><br><span class="line">            self.__remove_branch(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span>(node.left <span class="keyword">and</span> node.right)</span><br><span class="line">            self.__remove_node(node)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> parent:</span><br><span class="line">                <span class="comment"># Remove the node will lead the breakings of</span></span><br><span class="line">                <span class="comment"># the balance on its parent node.</span></span><br><span class="line">                <span class="comment"># So reset the balance then remove it.</span></span><br><span class="line">            parent.height = parent.height - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> parent.balance <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">                self.rebalance(parent)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            parent = parent.parent</span><br><span class="line">        <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《算法精解-C语言描述》</p><p><a href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/AVL%E6%A0%91</a></p><p><a href="http://www.cnblogs.com/linxiyue/p/3659448.html" target="_blank" rel="noopener">http://www.cnblogs.com/linxiyue/p/3659448.html</a></p><p><a href="https://segmentfault.com/a/1190000007054898" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007054898</a></p><h2 id="AVL树python实现的完整代码"><a href="#AVL树python实现的完整代码" class="headerlink" title="AVL树python实现的完整代码"></a>AVL树python实现的完整代码</h2><p>放在了github gist里，可能需要vpn:</p><p><a href="https://gist.github.com/Arianxx/5226596ee425a6ee0b1be074a7f85d13" target="_blank" rel="noopener">https://gist.github.com/Arianxx/5226596ee425a6ee0b1be074a7f85d13</a></p><script src="https://gist.github.com/Arianxx/5226596ee425a6ee0b1be074a7f85d13.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今宵は雪月花&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;AVL树&quot;&gt;&lt;a href=&quot;#AVL树&quot; class=&quot;headerlink&quot; title=&quot;AVL树&quot;&gt;&lt;/a&gt;AVL树&lt;/h2&gt;&lt;p&gt;将普通二叉树直接用于查找，平均情况下，仅需要查找一个分支，其时间复杂度为O(log n)。想要使查找时间尽可能短，就要使树的高度经可能短，使二叉树保持平衡状态。如果一个二叉树变得越来越不平衡，最后，其时间复杂度就变成了O(n)，相当于从头到尾遍历所有节点。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://arianx.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="算法" scheme="https://arianx.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python在异常捕获里抛出异常</title>
    <link href="https://arianx.me/2018/06/07/The-usage-of-the-raise-from-in-python/"/>
    <id>https://arianx.me/2018/06/07/The-usage-of-the-raise-from-in-python/</id>
    <published>2018-06-07T14:50:17.000Z</published>
    <updated>2018-08-22T16:16:10.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python2异常对象"><a href="#python2异常对象" class="headerlink" title="python2异常对象"></a>python2异常对象</h2><p>有时，我们需要在捕获一个异常之后，在捕获的语句里面抛出另外一个异常。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ValueError(e)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: division by zero</span><br></pre></td></tr></table></figure></p><p>上面在捕获除零异常后，重新在处理语句里抛出了ValueError，并将除零异常的信息传给了ValueError。同时，可以发现抛出的信息还附带了追踪信息，可以看到异常的抛出顺序。</p><p>然而，在python2里，从一个异常捕获中直接抛出另一个异常，并不会附带追踪信息：<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ValueError</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError</span><br></pre></td></tr></table></figure></p><p>python2异常抛出语句的语法是：raise exc, value, traceback。第一个参数是Exception的子类或子类的实例，第二个参数是初始化异常的信息，第三个参数是traceback对象。</p><p>python2中，可以通过这种方式看到traceback：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            foo()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            foo()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> RuntimeError(e), <span class="keyword">None</span>, sys.exc_info()[<span class="number">2</span>]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> bar</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> foo</span><br><span class="line">RuntimeError: integer division <span class="keyword">or</span> modulo by zero</span><br></pre></td></tr></table></figure></p><p>python3简化了异常抛出语句的语法，不再支持python2抛出三元素元组的方式，而是简化为了一个exception参数。例如，在python2中原来有多个语句实现同一个异常抛出效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; raise RuntimeError, ValueError</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">RuntimeError: &lt;type &apos;exceptions.ValueError&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; raise RuntimeError(ValueError)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">RuntimeError: &lt;type &apos;exceptions.ValueError&apos;&gt;</span><br></pre></td></tr></table></figure><p>这显然违背了python之禅里”There should be one– and preferably only one –obvious way to do it”的理念。</p><h2 id="python3异常对象"><a href="#python3异常对象" class="headerlink" title="python3异常对象"></a>python3异常对象</h2><p>所以，在python3中，不再支持元组的形式的异常抛出，只支持抛出Exception的子类或实例。如果是子类，就无参数调用得到实例再抛出；如果是实例则直接抛出。并且，python3为异常对象新增加了几种特殊方法。例如，增加了<code>__context__</code>方法，用于在多重异常抛出中保留以前异常的抛出信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    print(e.__context__)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    a = []</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            a[<span class="number">1</span>]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>            print(e.__context__)</span><br><span class="line">...</span><br><span class="line">division by zero</span><br></pre></td></tr></table></figure></p><p>python3的异常对象还增加了<code>__traceback__</code>信息，用于在多重异常抛出中记录以前的抛出信息，从而简化了多重异常抛出的操作。在python3中，可以通过使用raise…from…语法快速指定traceback对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ValueError <span class="keyword">from</span> e</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError</span><br></pre></td></tr></table></figure></p><p>可以看到不单附带了跟踪信息，还有“The above exception was the direct cause of the following exception”这句指明了异常之间的关系。</p><p>并且，在python3中，即使不使用raise … from …语法，默认也附带了追踪信息，保存在<code>__context__</code>中，以”during handling another exception happened”的形式展现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ValueError</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError</span><br></pre></td></tr></table></figure></p><p>还可以通过异常对象的with_traceback方法指定traceback对象，这种方法的提示语句如上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ValueError.with_traceback(e)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: division by zero</span><br></pre></td></tr></table></figure></p><h2 id="cause-属性"><a href="#cause-属性" class="headerlink" title="__cause__属性"></a><code>__cause__</code>属性</h2><p>实际上，在使用 raise … from … 语法时，一个名为 <code>__cause__</code>的属性就被赋给异常对象，这个属性直接指明了异常发生的原因。当<code>__cause__</code>被设置的时候，<code>__suppress_context__</code>方法也会被同时设置为True。如果<code>__suppress_context__</code>被设置为True，在打印traceback信息时，<code>__context__</code>就会被忽略。</p><p>所以，如果在某些时候，想要忽略多重异常抛出中的上层的异常信息，可以使用 raise … from None来实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ValueError <span class="keyword">from</span> <span class="keyword">None</span></span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError</span><br></pre></td></tr></table></figure></p><p>可以发现上层的ZeroDivisionError被忽略了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有一种常见的python编程风格，叫做<code>EAFP(easier to ask for forgiveness than permissino，取得原谅比获得许可容易)</code>。先假定方法存在直接调用，如果不存在就捕获异常。这种方法简明轻快，体现出了python的鸭子类型和松散协议。</p><p>这种方法的特点就是代码块中有较多的try和except关键字。灵活运用异常，能够更得心应手的使用这种风格编程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/24752395/python-raise-from-usage" target="_blank" rel="noopener">https://stackoverflow.com/questions/24752395/python-raise-from-usage</a></p><p><a href="https://mozillazg.com/2016/08/python-the-right-way-to-catch-exception-then-reraise-another-exception.html#hidid1" target="_blank" rel="noopener">https://mozillazg.com/2016/08/python-the-right-way-to-catch-exception-then-reraise-another-exception.html#hidid1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python2异常对象&quot;&gt;&lt;a href=&quot;#python2异常对象&quot; class=&quot;headerlink&quot; title=&quot;python2异常对象&quot;&gt;&lt;/a&gt;python2异常对象&lt;/h2&gt;&lt;p&gt;有时，我们需要在捕获一个异常之后，在捕获的语句里面抛出另外一个异常。例如：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    print(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ZeroDivisionError &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; ValueError(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZeroDivisionError: division by zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;During handling of the above exception, another exception occurred:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ValueError: division by zero&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面在捕获除零异常后，重新在处理语句里抛出了ValueError，并将除零异常的信息传给了ValueError。同时，可以发现抛出的信息还附带了追踪信息，可以看到异常的抛出顺序。&lt;/p&gt;
&lt;p&gt;然而，在python2里，从一个异常捕获中直接抛出另一个异常，并不会附带追踪信息：&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>内省python元类执行流程</title>
    <link href="https://arianx.me/2018/05/31/meta-programming-explore/"/>
    <id>https://arianx.me/2018/05/31/meta-programming-explore/</id>
    <published>2018-05-31T12:44:06.000Z</published>
    <updated>2018-08-22T16:15:59.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>上一篇文章里面曾简短提到了在python中使用type类可以实现元编程。实际上，在python，存在几种类型的元编程，包括使用装饰器动态修改类或函数的功能、使用魔术方法重写python内置操作符的行为等，还有使用元类在运行时动态的创建和修改类。本文主要探讨python中使用元类进行元编程时，其中类方法的调用顺序和流程的问题。我想理解了这一点就会对使用元类有更深一点的认知。<br><a id="more"></a></p><h2 id="什么是元类"><a href="#什么是元类" class="headerlink" title="什么是元类"></a>什么是元类</h2><p>然而，究竟什么是<code>元类</code>？要理解这一点，就需要理解python独特的动态语言特性。在python中，一切都被视为对象。对象的一大特性就是可以在程序运行时，根据不同的上下文而创建。那么，依照这种思想，类也应该是一种对象。把类视为一种对象，在程序运行时，像对象那样动态创建或修改，这种行为就是元编程的一种。能够在程序运行时动态<code>创建或修改类的类</code>就被称为<code>元类</code>。</p><p>所有的对象都由某个类构造而来，那么对于元类，因该由哪种类构造而来呢？在python中，这个类就是type。所有的类都是type的实例，这实际上蕴含了一个思想，所有类都可以<code>看作</code>(只是看作)由type类创建而来的。type是一个类，这个类在运行时构造了另外的类。type类是python内置的一个元类。所以，藉继承type类，我们就可以创建出自己的元类。</p><p>一个简单的示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 在声明中使用metaclass指定元类，就会用指定的元类来构建类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span><span class="params">(metaclass=MetaClass)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SubClass.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">MetaClass</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">MetaClass</span>.<span class="title">__base__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个简单的元类示例什么都没有做，但它体现出了python元编程的一些特性。SubClass的<code>__class__</code>属性变为了MetaClass，表明这个类是由MetaClass类，而不是通常的type类所构造的。同时，可以看到我们自定义的元类是type的子类。</p><h2 id="一些与元类编程相关的特殊方法"><a href="#一些与元类编程相关的特殊方法" class="headerlink" title="一些与元类编程相关的特殊方法"></a>一些与元类编程相关的特殊方法</h2><p>在了解真正使用元类编程的方法之前，需要预备一些知识——一些与构造类有关的特殊方法。</p><h3 id="new-方法"><a href="#new-方法" class="headerlink" title="__new__方法"></a><code>__new__</code>方法</h3><p><code>__new__</code>方法是一个静态方法。当调用类构造一个实例时，这个实例就是由<code>__new__</code>方法产生。<code>__new__</code>方法的第一个参数是调用的类本身。</p><h3 id="init-方法："><a href="#init-方法：" class="headerlink" title="__init__方法："></a><code>__init__</code>方法：</h3><p><code>__init__</code>方法修饰将要构造的实例。在返回实例之前做一些初始化工作。</p><h3 id="call-方法："><a href="#call-方法：" class="headerlink" title="__call__方法："></a><code>__call__</code>方法：</h3><p>当调用一个实例时，会尝试调用它的构造类（及父类）的<code>__call__</code>方法。</p><h2 id="另一个例子"><a href="#另一个例子" class="headerlink" title="另一个例子"></a>另一个例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'Success'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetUp</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 调用超类中的__new__方法得到将要产生的子类对象。</span></span><br><span class="line">        sub_cls = super().__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> sub_cls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 根据外部信息修饰子类</span></span><br><span class="line">        self._info = info</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 调用子类产生实例，实际上是调用了元类中的__call__方法。这里使用这一点实现单例模式。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(cls, <span class="string">'_instance'</span>, <span class="keyword">None</span>):</span><br><span class="line">            cls._instance = cls.__new__(cls)</span><br><span class="line">            cls.__init__(cls._instance, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcuteClass</span><span class="params">(metaclass=SetUp)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 只会被打印一次。</span></span><br><span class="line">        print(<span class="string">'Info is: '</span>, self._info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">excute1 = ExcuteClass()</span><br><span class="line">excute2 = ExcuteClass()</span><br><span class="line">print(excute1 == excute2)</span><br></pre></td></tr></table></figure><p>执行结果为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Info <span class="keyword">is</span>:  Success</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>这个例子展示了元类的一些动态特性。在这里第一个<code>info = &#39;Success&#39;</code>可以看作随上下文不同而变化的信息，元类SetUp根据这个信息的不同将会创建蕴含不同信息的子类。同时，元类本身通过<code>__call__</code>方法干涉了子类实例的创建，实际上实现了<code>单例模式</code>。在这里，子类只会被初始化一次，只会产生一个实例。</p><h2 id="内省执行流程"><a href="#内省执行流程" class="headerlink" title="内省执行流程"></a>内省执行流程</h2><p>那么，使用元类时，详细的顺序究竟是怎么样的呢？先后调用了哪些方法？刚接触元类时，或许许多人都会有这些疑惑。幸亏得益于python强大的动态性，我们可以在运行时方便的内省程序的状况。</p><p>可以藉由下面的程序观察到元类的执行流程：<br><!--MORE--><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">self_explain</span><span class="params">(ob)</span>:</span></span><br><span class="line">    <span class="comment"># 内省传入的对象</span></span><br><span class="line">    pre_space = <span class="string">' '</span> * <span class="number">3</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 内省类名。只有类才有 __name__ 属性。</span></span><br><span class="line">        print(pre_space, <span class="string">'Class named `&#123;ob.__name__&#125;`.'</span>.format(ob=ob))</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        print(pre_space, <span class="string">'Have not class name.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 内省基对象。只有类才有 __obses__ 属性。</span></span><br><span class="line">        print(pre_space, <span class="string">'Inherits from `&#123;&#125;`.'</span>.format(</span><br><span class="line">            [base.__name__ <span class="keyword">for</span> base <span class="keyword">in</span> ob.__bases__]</span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        print(pre_space, <span class="string">'Have not bases class.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 类和实例都有 __class__ 属性。</span></span><br><span class="line">        print(pre_space, <span class="string">'Instance of `&#123;ob.__class__&#125;`.'</span>.format(ob=ob))</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        print(pre_space, <span class="string">'Have not parent class.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后内省对象的 id。相同的对象具有相同的id。</span></span><br><span class="line">    print(pre_space, <span class="string">"My id is &#123;&#125;."</span>.format(id(ob)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">explain</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">internal_func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 因为这里用第一个参数的 __class__ 属性来判断其执行在哪个类里。这种方式</span></span><br><span class="line">        <span class="comment"># 默认第一个参数是这个类的实例，然而在 __new__ 方法里，第一个</span></span><br><span class="line">        <span class="comment"># 参数是类本身，其 __class__ 属性是 type，无法反映流程情况。所以如果判断在 __new__ 方法里，</span></span><br><span class="line">        <span class="comment"># 就直接调用 __new__ 将第一个参数（类本身）实例化，访问其 __class__ 属性得到类名。</span></span><br><span class="line">        <span class="comment"># 使用这种方法而不访问 __new__ 里第一个参数的 __name__ 方法的原因是，这样做，</span></span><br><span class="line">        <span class="comment"># 之后就能像对待普通方法一样对待 __new__，内省程序的执行情况。</span></span><br><span class="line">        in_new = func.__name__ == <span class="string">'__new__'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> in_new:</span><br><span class="line">            self = args[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果在 __new__ 里，调用 __new__ 得到实例。</span></span><br><span class="line">            self = func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'In &#123;func.__name__&#125; of &#123;self.__class__&#125;.'</span></span><br><span class="line">              .format(func=func, self=self))</span><br><span class="line">        print(<span class="string">'Inspect first argument:'</span>)</span><br><span class="line">        self_explain(args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> in_new:</span><br><span class="line">            <span class="comment"># 如果在 __new__ 方法里，因为之前已经构造过了，直接返回。</span></span><br><span class="line">            return_value = self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            return_value = func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Inspect return value:'</span>)</span><br><span class="line">        self_explain(return_value)</span><br><span class="line">        print(<span class="string">'_'</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> return_value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> internal_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="comment"># __new__ 方法是静态方法。</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line"><span class="meta">    @explain</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @explain</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(RootClass, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @explain</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super(RootClass, self).__call__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span><span class="params">(metaclass=RootClass)</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line"><span class="meta">    @explain</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @explain</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(SubClass, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @explain</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'You call the SubClass instance.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    fmt_str = <span class="string">'\n&#123;:_^64&#125;\n'</span></span><br><span class="line"></span><br><span class="line">    print(fmt_str.format(<span class="string">'Start excution'</span>))</span><br><span class="line"></span><br><span class="line">    print(fmt_str.format(<span class="string">'Instantiate the SubClass.'</span>))</span><br><span class="line">    instance = SubClass()</span><br><span class="line"></span><br><span class="line">    print(fmt_str.format(<span class="string">'Invoke the instance.'</span>))</span><br><span class="line">    instance()</span><br></pre></td></tr></table></figure></p><p>这段简单的程序主要用一个装饰器来内省了元类与子类中的调用信息与参数、返回值状况。</p><p>其执行结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">In __new__ of &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">RootClass</span>'&gt;.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">first</span> <span class="title">argument</span>:</span></span><br><span class="line">    Class named `RootClass`.</span><br><span class="line">    Inherits <span class="keyword">from</span> `[<span class="string">'type'</span>]`.</span><br><span class="line">    Instance of `&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281002834456.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">return</span> <span class="title">value</span>:</span></span><br><span class="line">    Class named `SubClass`.</span><br><span class="line">    Inherits <span class="keyword">from</span> `[<span class="string">'object'</span>]`.</span><br><span class="line">    Instance of `&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">RootClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281002701784.</span></span><br><span class="line"><span class="class"><span class="title">________________________________</span></span></span><br><span class="line"><span class="class"><span class="title">In</span> <span class="title">__init__</span> <span class="title">of</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">RootClass</span>'&gt;.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">first</span> <span class="title">argument</span>:</span></span><br><span class="line">    Class named `SubClass`.</span><br><span class="line">    Inherits <span class="keyword">from</span> `[<span class="string">'object'</span>]`.</span><br><span class="line">    Instance of `&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">RootClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281002701784.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">return</span> <span class="title">value</span>:</span></span><br><span class="line">    Have <span class="keyword">not</span> <span class="class"><span class="keyword">class</span> <span class="title">name</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Have</span> <span class="title">not</span> <span class="title">bases</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Instance</span> <span class="title">of</span> `&lt;<span class="title">class</span> '<span class="title">NoneType</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 1939641552.</span></span><br><span class="line"><span class="class"><span class="title">________________________________</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">_________________________Start</span> <span class="title">excution_________________________</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">___________________Instantiate</span> <span class="title">the</span> <span class="title">SubClass</span>.<span class="title">____________________</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> <span class="title">__call__</span> <span class="title">of</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">RootClass</span>'&gt;.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">first</span> <span class="title">argument</span>:</span></span><br><span class="line">    Class named `SubClass`.</span><br><span class="line">    Inherits <span class="keyword">from</span> `[<span class="string">'object'</span>]`.</span><br><span class="line">    Instance of `&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">RootClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281002701784.</span></span><br><span class="line"><span class="class"><span class="title">In</span> <span class="title">__new__</span> <span class="title">of</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">SubClass</span>'&gt;.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">first</span> <span class="title">argument</span>:</span></span><br><span class="line">    Class named `SubClass`.</span><br><span class="line">    Inherits <span class="keyword">from</span> `[<span class="string">'object'</span>]`.</span><br><span class="line">    Instance of `&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">RootClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281002701784.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">return</span> <span class="title">value</span>:</span></span><br><span class="line">    Have <span class="keyword">not</span> <span class="class"><span class="keyword">class</span> <span class="title">name</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Have</span> <span class="title">not</span> <span class="title">bases</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Instance</span> <span class="title">of</span> `&lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">SubClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281036607104.</span></span><br><span class="line"><span class="class"><span class="title">________________________________</span></span></span><br><span class="line"><span class="class"><span class="title">In</span> <span class="title">__init__</span> <span class="title">of</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">SubClass</span>'&gt;.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">first</span> <span class="title">argument</span>:</span></span><br><span class="line">    Have <span class="keyword">not</span> <span class="class"><span class="keyword">class</span> <span class="title">name</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Have</span> <span class="title">not</span> <span class="title">bases</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Instance</span> <span class="title">of</span> `&lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">SubClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281036607104.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">return</span> <span class="title">value</span>:</span></span><br><span class="line">    Have <span class="keyword">not</span> <span class="class"><span class="keyword">class</span> <span class="title">name</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Have</span> <span class="title">not</span> <span class="title">bases</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Instance</span> <span class="title">of</span> `&lt;<span class="title">class</span> '<span class="title">NoneType</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 1939641552.</span></span><br><span class="line"><span class="class"><span class="title">________________________________</span></span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">return</span> <span class="title">value</span>:</span></span><br><span class="line">    Have <span class="keyword">not</span> <span class="class"><span class="keyword">class</span> <span class="title">name</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Have</span> <span class="title">not</span> <span class="title">bases</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Instance</span> <span class="title">of</span> `&lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">SubClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281036607104.</span></span><br><span class="line"><span class="class"><span class="title">________________________________</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">______________________Invoke</span> <span class="title">the</span> <span class="title">instance</span>.<span class="title">______________________</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> <span class="title">__call__</span> <span class="title">of</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">SubClass</span>'&gt;.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">first</span> <span class="title">argument</span>:</span></span><br><span class="line">    Have <span class="keyword">not</span> <span class="class"><span class="keyword">class</span> <span class="title">name</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Have</span> <span class="title">not</span> <span class="title">bases</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Instance</span> <span class="title">of</span> `&lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">SubClass</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 2281036607104.</span></span><br><span class="line"><span class="class"><span class="title">You</span> <span class="title">call</span> <span class="title">the</span> <span class="title">SubClass</span> <span class="title">instance</span>.</span></span><br><span class="line"><span class="class"><span class="title">Inspect</span> <span class="title">return</span> <span class="title">value</span>:</span></span><br><span class="line">    Have <span class="keyword">not</span> <span class="class"><span class="keyword">class</span> <span class="title">name</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Have</span> <span class="title">not</span> <span class="title">bases</span> <span class="title">class</span>.</span></span><br><span class="line"><span class="class">    <span class="title">Instance</span> <span class="title">of</span> `&lt;<span class="title">class</span> '<span class="title">NoneType</span>'&gt;`.</span></span><br><span class="line"><span class="class">    <span class="title">My</span> <span class="title">id</span> <span class="title">is</span> 1939641552.</span></span><br><span class="line"><span class="class"><span class="title">________________________________</span></span></span><br></pre></td></tr></table></figure></p><p>可以看出，在程序开始时，执行我们if后的语句前，先自动执行了创建子类的操作。</p><p>创建子类首先调用了元类 RootClass 的 <code>__new__</code>方法，其第一个参数是元类本身，然后返回了一个类，其 <code>__name__</code>属性为子类 SubClass，是 RootClass的实例。显然这个类就是我们需要的子类。创建子类后，调用了元类 RootClass的 <code>__init__</code>方法，其第一个参数是我们刚才创建出的子类，然后返回None（不返回值）。</p><p>接着，开始执行if后的语句，首先我们实例化了子类。</p><p>实例化子类时，首先调用了元类里的<code>__call__</code> 方法，其第一个参数是子类本身。然后，接着调用了子类的 <code>__new__</code> 和 <code>__init__</code> 方法，显然是在 <code>__call__</code> 方法里，使用传入的子类调用的。然后，返回了子类的实例。</p><p>最后，调用实例时，调用了子类里的 <code>__call__</code>方法，其第一个参数是实例，不返回值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后，我们可以得出元类时，各方法的实行顺序如下：</p><ul><li>构建子类：<ul><li>元类:<ul><li><code>__new__</code>(元类， …)</li><li><code>__init__</code>(子类，…)</li></ul></li></ul></li><li>实例子类：<ul><li>元类：<ul><li><code>__call__</code>(子类，…)</li><li>子类：<ul><li><code>__new__</code>(子类，…)</li><li><code>__init__</code>(实例，…)</li></ul></li></ul></li></ul></li><li>调用实例：<ul><li>子类：<ul><li><code>__call__</code>(实例)</li></ul></li></ul></li></ul><p>最后，实际上，上面的装饰器根据并不知道将要接受什么样的对象，只是在调用了相应的接口，根据参数的不同自动执行了不同的动作。这在无意间利用了python推崇的<code>鸭子类型</code>这一点风格，也就是其它语言的<code>多态</code>。不需要有严格的继承机制，只要关注其实现的接口；不关注其类型本身，而关注其具体的使用方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;上一篇文章里面曾简短提到了在python中使用type类可以实现元编程。实际上，在python，存在几种类型的元编程，包括使用装饰器动态修改类或函数的功能、使用魔术方法重写python内置操作符的行为等，还有使用元类在运行时动态的创建和修改类。本文主要探讨python中使用元类进行元编程时，其中类方法的调用顺序和流程的问题。我想理解了这一点就会对使用元类有更深一点的认知。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python中type和object</title>
    <link href="https://arianx.me/2018/05/31/type-and-object-explore/"/>
    <id>https://arianx.me/2018/05/31/type-and-object-explore/</id>
    <published>2018-05-31T09:50:25.000Z</published>
    <updated>2018-08-22T16:15:33.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一生一代一双人</p></blockquote><h2 id="type和object"><a href="#type和object" class="headerlink" title="type和object"></a>type和object</h2><p>python中内置了两个类，type和object，用isinstance和issubclass测试这两个类会发现一些奇怪的特性，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># object是自身的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object, object)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># object也是type的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object, type)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># type是自身的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(type, type)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># type是object的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(type, object)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># object是自身的子类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(object, object)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># object不是type的子类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(object, type)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="comment"># type是自身的子类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(type, type)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># type也是object的子类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(type, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>可以看到，在这里面，type和object互为实例和子类，只有一个例外。而平时，在我们编写程序的过程中，也时常会注意到我们自己的类会有一些属性指向type和object，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">Foo</span>.<span class="title">__base__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">object</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么，type和object这两个类有怎样的区别和联系呢？本文将探讨一些这方面的内容。</p><h2 id="继承和实例化"><a href="#继承和实例化" class="headerlink" title="继承和实例化"></a>继承和实例化</h2><p>类的继承和实例化是编程语言的面向对象特性里面重要的两个方面，对于拥有一切皆是对象语言的python，自然也对其有良好的实现。并且得益于python动态语言的性质，我们可以在程序运行时方便的内省对象的各项属性，如上的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Foo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Foo</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; b = Bar()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Bar</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看到，对象的<code>__class__</code>属性实际上表明了这个对象有哪个类实例化而来。前面说到，在python中，一切皆是对象，类也是一种对象，那么，作为对象的类也拥有<code>__class__</code>属性。而作为对象的类，其<code>__class__</code>属性指向的 type，就表明，这些类是由 type这个元类构建而来。</p><p>而<code>__base__</code>属性的特性如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(Foo)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Bar.__base__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Foo</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看到<code>__base__</code>属性实际上指向一个类的父类。如果一个类继承了另一个类，那么这个类的 <code>__base__</code>属性就指向它继承的那个类。（如果是多重继承，这些类就在<code>__bases__</code>属性里面）</p><h2 id="作为继承关系顶点的object"><a href="#作为继承关系顶点的object" class="headerlink" title="作为继承关系顶点的object"></a>作为继承关系顶点的object</h2><p>一个类可以继承自其它类，被继承的那个类称为父类。在python中，如果没有显示指定一个类继承自哪个父类，那么这个类就继承自object类。这意味着，在python中，<strong>object实际是所有类的父类，是继承树的根节点，其内蕴含了一些类基本的共有方法。</strong></p><p>python还规定，object类没有父类。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__base__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">issubclass</span><span class="params">(Foo, object)</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line">&gt;&gt;&gt; f = Foo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(f, object)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># object没有父类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>object.__base__</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="作为对象的顶点的type"><a href="#作为对象的顶点的type" class="headerlink" title="作为对象的顶点的type"></a>作为对象的顶点的type</h2><p>前面说过，在python中，一切皆是对象，类也是对象。是对象就应该有其对应的构造类型。一般的对象由它们的类实例而来。那么作为类本身，它们应该由哪个类实例而来呢？在python中，这个类就是type，<strong>一切的类都是type类型的实例，type的构造类是其自身，type是自身的实例。</strong></p><p>因此，type代表了一切实例关系的顶点。可以通过如下的属性观察到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><!--MORE--><h2 id="type与object"><a href="#type与object" class="headerlink" title="type与object"></a>type与object</h2><p>于是，由前面的叙述，可以总结出，object是python里面向对象继承关系的体现，一切的类都是object的子类；type是python里“一切皆是对象”的动态特性的体现，一切的类都是type类型的实例，由type类型构造而来。并且，object类没有父类，type是其自身的实例。</p><p>现在，就可以解释开头的奇特特性了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(type, type)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>这里体现出type是其自身的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(type, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>这里体现出object是python中一切类的父类，包括type，type也是object的子类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object, type)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>体现出一切类都是type的实例，包括object。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(type, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>type也是object的实例。因为type是自身的实例，而type自身又是object的子类。如果一个对象是某个类的实例，那么这个对象也是那个类<code>__mro__</code>链上（父类）所有类的实例。因此type也是object的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(object, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>虽然object没有父类，但python规定用issubclass判断继承关系时，对自身返回True，因此这里返回True。可以看作，python中一切类也是自身的子类（父类）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(object, type)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>object是type的实例，但不是type的子类。object是一切类的父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object, object)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>object是type的实例，type是object的子类，因此object是自身的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(type, type)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>一切类都是自身的子类。</p><h2 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h2><p>上面提到，一切类都是type的实例，这体现出python动态语言的特性。实际上，通过type，可以实现<code>元编程</code>，在运行时动态创建、修改类。这个话题就在另一篇文章里再说吧！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/7454c02e86c4" target="_blank" rel="noopener">https://www.jianshu.com/p/7454c02e86c4</a></p><p><a href="http://www.cnblogs.com/busui/p/7283137.html" target="_blank" rel="noopener">http://www.cnblogs.com/busui/p/7283137.html</a></p><p><a href="https://www.zhihu.com/question/38791962" target="_blank" rel="noopener">https://www.zhihu.com/question/38791962</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一生一代一双人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;type和object&quot;&gt;&lt;a href=&quot;#type和object&quot; class=&quot;headerlink&quot; title=&quot;type和object&quot;&gt;&lt;/a&gt;type和object&lt;/h2&gt;&lt;p&gt;python中内置了两个类，type和object，用isinstance和issubclass测试这两个类会发现一些奇怪的特性，如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# object是自身的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(object, object)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# object也是type的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(object, type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# type是自身的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(type, type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# type是object的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;isinstance(type, object)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# object是自身的子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;issubclass(object, object)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# object不是type的子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;issubclass(object, type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# type是自身的子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;issubclass(type, type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# type也是object的子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;issubclass(type, object)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>浅析python中super用法，兼及继承机制</title>
    <link href="https://arianx.me/2018/05/14/Explore-the-usage-of-super/"/>
    <id>https://arianx.me/2018/05/14/Explore-the-usage-of-super/</id>
    <published>2018-05-14T14:05:27.000Z</published>
    <updated>2018-09-19T01:52:59.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>远在天边，我们一无所见，即使近在眼前，也仅仅是连续不断而变幻不定的表象。 </p></blockquote><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>在学习python的过程中，一直对super的用法感到稍许疑惑。虽然直到它的基本使用方法，却一直觉得模模糊糊。本文将根据实例简要探讨python3中super函数的行为，以加强对super函数的认知，兼及一些相关方面的内容。</p><p>本文将简要谈谈我对对象和继承机制的理解，最终探讨super的用法。<br><a id="more"></a></p><h2 id="Ⅰ-面向对象机制"><a href="#Ⅰ-面向对象机制" class="headerlink" title="Ⅰ.面向对象机制"></a>Ⅰ.面向对象机制</h2><p><code>面向对象(OOP, Object Oriented Programming）</code>是目前编程语言中一种主流的思想，python从设计初期就已经是一门面向对象的语言。python为面向对象编程提供了强大的语法支持。因此，在python中，使用面向对象的方式进行程序设计是十分自然并且容易的。</p><p>理所当然，一旦提到面向对象的编程思想，那么便会自然而然想到面向对象思想中的一些重要概念。比如说：<code>类（Class)</code>。类是一种数据结构，简单来说，可以理解为对某些拥有共同属性，或行为的对象的抽象。它可以视作这些拥有相同属性或行为的对象的蓝图，封装了这些对象的共同属性或行为，使得程序设计更模块化，提高了代码的可复用性——一个<code>对象（Object）</code>是它的类的实例，它能够访问它的构造类中的所有属性或方法。</p><p>可以将python中的类与对象类比到现实中。这样，对象就是现实世界中的客体，是一种具体的实体。现实世界中的所有事物都可以看作一个对象。例如，一个人。当我们谈到这个对象时，我们所想到的，是这个带有数量词的、具体的、实在的个体，是“这个人”而不是“那个人”。而现实世界里面存在许许多多的人。这些所有的人有某些共同的特征，我们将这些特征聚合起来，所形成的一个抽象的、宽泛的“人”的这个形式，就是所有作为人的对象的类。</p><p>每个具体的对象都有其独特的<code>标识</code>。例如，在现实中，每个人都会有一个名字。一般来说，在某个给定范围的命名空间中，这个标识是唯一的。我们可以说，某个具有独特标识符的对象属于什么类。例如，张三是人，就是说”张三”属于”人”这个类。这样，可以发现，一般情况下，凡是可以说成“某个东西是什么”这种句法的，都可以抽象出类与对象的关系。</p><p>类比到现实中，类与对象是一种所属关系，对象是一种客观存在的实体。而放到具体的程序设计中来说，类可以视作对某些具有共同特征或行为的数据的<code>抽象</code>。</p><h2 id="Ⅱ-类的继承机制"><a href="#Ⅱ-类的继承机制" class="headerlink" title="Ⅱ.类的继承机制"></a>Ⅱ.类的继承机制</h2><p>一个对象可以说成是某个类的实例，一般情况，就可以说成”对象是类”这种形式。然而，在许多情况下，在这样抽象之后，我们仍然可以发现，类也有其自身的所属。例如说，泰迪是一只熊，在这里，”泰迪”是具体的对象，”熊”是”泰迪”的类，而“熊”这个类，又由“哺乳动物”这个类细分而来。我们可以这样说，熊继承自哺乳动物，而泰迪既是一只熊，也是一只哺乳动物。这样，父类就可以理解为对类的基本属性的抽象，子类是对于父类的补充。</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-5-15/85242660.jpg" alt="补充"></p><p>简单来说，对象之于类，是“某个东西是什么”，而子类之于父类，是子类补充了父类。</p><p>在python中，如果一个子类继承了父类，就称这个父类为子类的<code>base class</code>，并且，这个子类的所有base class，都可以在<code>__bases__</code>属性中访问。这个子类的实例，也可以同时访问子类所有父类、以及后续的父类内的属性或方法（此处不考虑带前置双下划线的私有方法）。</p><p>如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">kind</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm an animal."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I can fly."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bird = Bird()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bird.skill()</span><br><span class="line">I can fly.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bird.kind()</span><br><span class="line">I<span class="string">'m an animal.</span></span><br></pre></td></tr></table></figure></p><p>可见，实例可访问它的构造类以及之后的父类中的方法。</p><p>同时，子类可以<code>覆盖</code>父类的方法。这样，访问实例中的这个方法时，就访问它的构造方法内重写的那个方法，而不向后追溯。</p><p>如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">kind</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm an animal."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">kind</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm a bird."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bird = Bird()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bird.kind()</span><br><span class="line">I<span class="string">'m a bird.</span></span><br></pre></td></tr></table></figure></p><!--MORE--><p>python还支持<code>多重继承</code>。一个子类，可以同时拥有多个父类，同时继承这些父类的属性或方法。可以通过访问子类的<code>__bases__</code>属性获得它的父类：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    eatable = <span class="keyword">True</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Ice</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    cold = <span class="keyword">True</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">IceCream</span><span class="params">(Food, Ice)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>IceCream.__bases__</span><br><span class="line">(&lt;class '__main__.Food'&gt;, &lt;class '__main__.Ice'&gt;)</span><br></pre></td></tr></table></figure></p><p>实例可以访问这些父类的方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>IceCream.eatable</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>IceCream.cold</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>但是，思考一下，如果子类继承了多个父类，同时这些父类拥有某些相同的属性或方法，实例该访问哪个方法呢？</p><p>这个问题的解决方案，就是依赖于特定的Method Resolution Order (MRO)。</p><h2 id="Ⅲ-MRO"><a href="#Ⅲ-MRO" class="headerlink" title="Ⅲ.MRO"></a>Ⅲ.MRO</h2><p>python利用MRO来决定多重继承中属性或方法的搜索顺序。如果一个类不止具有一个基类，那么，可以访问这个类的<code>__mro__</code>属性以获取其MRO链。在python3中，<a href="https://en.wikipedia.org/wiki/C3_linearization" target="_blank" rel="noopener">C3算法</a>是唯一支持的MRO算法。</p><p>一般将C3算法理解为类似于广度优先搜索，但实际上它又与广度优先搜索有一定差别。</p><p>考虑下面的继承关系：</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-5-15/7957065.jpg" alt="继承"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    id = <span class="number">1</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    id = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    id = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">E</span><span class="params">(C)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">F</span><span class="params">(D, E)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>在这里，类F同时继承了类D和类E，而类D、E又分别继承了B、C，最终继承自类A。如果实例化一个类F，查看其id属性，最终结果会是哪一个？</p><p>实际为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=F()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.id</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>可以观察到，实际上访问了类B中的属性。</p><p>可以如前所述的访问类F的<code>__mro__</code>属性查看其MRO链：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>F.__mro__</span><br><span class="line">(&lt;class '__main__.F'&gt;, &lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.E'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure></p><p>访问顺序为：F &gt; D &gt; B &gt; E &gt; C &gt; A。可以看到C3算法与广度优先算法的区别。按照广度优先算法，应该是F &gt; D &gt; E &gt; B &gt; C &gt; A。然而这里先深度优先搜索到了与其它支链有交点的节点，然后返回去进行广度优先搜索。</p><p>实际上，在python3中的MRO算法为：对于一个有多重父类的子类，它的MRO链为其自身与其父类的merge()线性操作的结果。用表达式表示为：<code>L[C(B1...BN)] = C + merge(L(B1)+..L(BN)+B1+...BN)</code></p><p>其中，merge的规则为：</p><ol><li>递归展开其内的L为MRO列表。</li><li>取第一个列表中的第一个元素，如果这个元素不出现之后列表，或者不是其它列表除首元素之外的元素，就将它提取到merge外面，作为最终MRO链的一员，同时消去merge中的这个元素。</li><li>重复第二步直到遇到不可提取的元素，对下一个列表重复第二步。直到不存在元素，MRO链构建完成。</li><li>否则，这个继承不合法。</li></ol><p>例如，对于例子而言，其求MRO链的过程就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L(F(D, E)) = F + merge(L(D) + L(E) + D + E)</span><br><span class="line">           = F + merge([D, B, A] + [E, C, A] + D +E)</span><br><span class="line">           = F + D + merge([B, A] + [E, C, A] +E)</span><br><span class="line">           = F + D + B + merge(A + [E, C, A] + E)</span><br><span class="line">           = F + D + B + E + merge(A + [C, A])</span><br><span class="line">           = F + D + B + E + C + merge(A)</span><br><span class="line">           = F + D + B + E + C + A</span><br></pre></td></tr></table></figure></p><p>与由<code>__mro__</code>属性看到的MRO链一致。</p><p>那么，到现在为止，我们已经知道如何继承，如何多重继承，以及在多重继承中访问特性，python搜索的机制。同时，我们已经可以覆盖父类中的属性或方法。那么，还剩下最后一点，python继承方面的机制就完善了。那就是，如果我们继承父类后，又覆盖了父类中的特性，我们该如何才能访问到父类中的那个特性呢？</p><p>如果覆盖了方法，最直观的调用父类中方法的方式，是直接在那个方法中通过父类来调用方法，然后传入自身的实例。就像这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm a food."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">IceCream</span><span class="params">(Food)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        Food.say(self)</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"And I'm a ice cream."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ice_cream = IceCream()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ice_cream.say()</span><br><span class="line">I<span class="string">'m a food.</span></span><br><span class="line"><span class="string">And I'</span>m a ice cream.</span><br></pre></td></tr></table></figure></p><p>然而通过这种方式所产生的一个问题是，在如下这种情况下，通过这种方式所产生的调用会出现重复调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm Food."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Water</span><span class="params">(Food)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        Food.say(self)</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm Water."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Ice</span><span class="params">(Food)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        Food.say(self)</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm Ice."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">IceCream</span><span class="params">(Water, Ice)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        Water.say(self)</span><br><span class="line"><span class="meta">... </span>        Ice.say(self)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ice_cream = IceCream()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ice_cream.say()</span><br><span class="line">I<span class="string">'m Food.</span></span><br><span class="line"><span class="string">I'</span>m Water.</span><br><span class="line">I<span class="string">'m a food.</span></span><br><span class="line"><span class="string">I'</span>m Ice.</span><br></pre></td></tr></table></figure></p><p>这样，Food中的say方法被无意间调用了两次。</p><p>解决这个办法，使得在继承关系中，能够正确调用父类方法的工具，就是使用python中的super对象。</p><h2 id="Ⅳ-super对象"><a href="#Ⅳ-super对象" class="headerlink" title="Ⅳ.super对象"></a>Ⅳ.super对象</h2><p>在python中，super对象用于构造访问给定子类的MRO链上，父类特性的代理。它接受两个参数，第一参数是要构造代理的对象，第二个参数是要绑定给父类参数的对象。它可以这样用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm Food."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Water</span><span class="params">(Food)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().say()</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm Water."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Ice</span><span class="params">(Food)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().say()</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"I'm Ice."</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">IceCream</span><span class="params">(Water, Ice)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().say()</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ice_cream = IceCream()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ice_cream.say()</span><br><span class="line">I<span class="string">'m Food.</span></span><br><span class="line"><span class="string">I'</span>m Ice.</span><br><span class="line">I<span class="string">'m Water.</span></span><br></pre></td></tr></table></figure></p><p>可见，它给出了理想的结果，最高的父类Food仅被访问了一次，同时两个中间的父类都访问了一次。</p><p><strong>事实上，super搜寻特性的机制与使用getattr访问这个子类的机制相同（即，使用点运算符访问特性），都是根据<code>__mro__</code>属性中给出的链进行搜寻。经过super代理的访问，会转发给MRO链上的下一个类</strong>。如果最终super没有在链上的对象里找到想要访问的方法，最后又没有在super对象上自身找到，就会弹出AttributeError错误。</p><p>super不是一个函数，而是一个对象，返回一个代理对象。通过这个代理对象访问的所有方法或属性，都会沿给定类的MRO链查找。需要注意的是，<strong>如果父类中存在与super对象自身相同的特性，那个特性就会覆盖super本身的特性。</strong>如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>food = Food()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(super(Food, food).__str__())</span><br><span class="line">&lt;__main__.Food object at <span class="number">0x0000020FE57D6C50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(getattr(super, <span class="string">'__str__'</span>)(super))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">super</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>可见，通过点运算符访问的，被转发给了代理类的父类。通过getattr函数则可以得到正确的结果。</p><p>super的第一个参数是指定要在其上MRO链搜寻特性的类，第二个参数会被绑定给将要调用的方法。第二个参数允许两种类型：</p><ol><li>如果第二个参数是对象，那么这个对象必须是第一个参数的实例。也就是isinstance(arg1, arg2)返回True。</li><li>如果第二个参数是类（类型对象），那么这个类必需是第一个参数的子类。也就是issubclass(arg1, arg2)返回True。</li></ol><p>对于第一种情况，如果将要调用的是普通方法，这个对象会被绑定为其第一个参数；第二种情况，如果将要调用的是类方法，这个类将会被绑定为第二个参数。除此之外，不作绑定。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">normal</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'normal'</span>)</span><br><span class="line"><span class="meta">... </span>    @classmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">cls</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'cls'</span>)</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">static</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'static'</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Ice</span><span class="params">(Food)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ice = Ice()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>super(Ice, ice).normal()  <span class="comment"># 第二个参数是实例</span></span><br><span class="line">normal</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>super(Ice, Ice).cls()  <span class="comment"># 第二个参数是类</span></span><br><span class="line">cls</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>super(Ice, ice).static()</span><br><span class="line">static</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>super(Ice, Ice).static()</span><br><span class="line">static</span><br></pre></td></tr></table></figure></p><p>在一般情况下，我们看到的调用super的方式直接是super()，而没有传递任何参数，这是针么回事？实际上，调用super()就等同于调用了super(type(self), self)，这种省略形式只能在类的方法中调用。</p><p>最后，有趣的一点是，在途中我打算查看super对象的源码时，通过pycharm，却只看到了带有“real signature unknown”注释的pass实现。这说明python是在c语言层面实现super对象的。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/45619cf50aa7" target="_blank" rel="noopener">https://www.jianshu.com/p/45619cf50aa7</a></p><p><a href="https://docs.python.org/3/library/functions.html#super" target="_blank" rel="noopener">https://docs.python.org/3/library/functions.html#super</a></p><p><a href="https://en.wikipedia.org/wiki/C3_linearization" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/C3_linearization</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;远在天边，我们一无所见，即使近在眼前，也仅仅是连续不断而变幻不定的表象。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;在学习python的过程中，一直对super的用法感到稍许疑惑。虽然直到它的基本使用方法，却一直觉得模模糊糊。本文将根据实例简要探讨python3中super函数的行为，以加强对super函数的认知，兼及一些相关方面的内容。&lt;/p&gt;
&lt;p&gt;本文将简要谈谈我对对象和继承机制的理解，最终探讨super的用法。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://arianx.me/categories/python/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="算法" scheme="https://arianx.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Flask常见扩展总结</title>
    <link href="https://arianx.me/2018/04/13/The-common-Flask-s-extensions/"/>
    <id>https://arianx.me/2018/04/13/The-common-Flask-s-extensions/</id>
    <published>2018-04-13T05:01:43.000Z</published>
    <updated>2018-09-19T01:51:34.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a>是一个用python编写的、基于<a href="http://werkzeug.pocoo.org/" target="_blank" rel="noopener">Werkzeug WSGI</a>和<a href="http://jinja.pocoo.org/docs/2.10/" target="_blank" rel="noopener">Jinja2</a>的轻量级Web应用框架。因为其相比于django等框架来说简洁的功能与架构，常常被称为”microframework”。然而，称Flask为微框架并不意味着它相比起其它框架来说功能更少——Flask拥有强大的可扩展性以及活跃的社区。开发者可以根据自身的需求，自由的选择扩展包来增强其功能。</p><p>合理的选择扩展包，将极大的减少开发时间，提高开发效率。下面，本文就将列举出Flask应用程序开发中的一些常用扩展，以便于参考和查询。</p><a id="more"></a><h2 id="Flask-WTF"><a href="#Flask-WTF" class="headerlink" title="Flask-WTF"></a>Flask-WTF</h2><p>Flask-WTF将Flask和<a href="https://wtforms.readthedocs.io/en/stable/" target="_blank" rel="noopener">WTForms</a>做了简单集成，包含<a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">CSRF</a>，文件上传，验证码服务等。</p><p>特点：</p><ol><li>集成WTForms</li><li>使用CSRF token保证安全性</li><li>全局CSRF防御</li><li>支持验证码服务</li><li>配合<a href="https://pythonhosted.org/Flask-Uploads/" target="_blank" rel="noopener">Flask-Uploads</a>运作的文件上传服务</li><li>使用<a href="http://pythonhosted.org/Flask-Babel/" target="_blank" rel="noopener">Flask-Babel</a>支持国际化</li></ol><p>Flask-WTF集成了WTForms，使用它，可以以面向对象语言中类的形式构建表单，简化了处理、验证表单所需操作，使表单设计与Flask其它部分统一。</p><p>文档：<a href="https://flask-wtf.readthedocs.io/en/stable/" target="_blank" rel="noopener">Flask-WTF</a></p><h2 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask-SQLAlchemy"></a>Flask-SQLAlchemy</h2><p>Flask-SQLAlchemy为使用Flask开发的应用程序提供了<a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy</a>的支持。它支持0.8及以上版本的SQLAlchemy，旨在通过提供有用的默认值和额外的帮助来简化Flask中SQLAlchemy的使用，使完成常见的任务变得更简单。</p><p>SQLAlchemy为python提供了<a href="https://en.wikipedia.org/wiki/Orm" target="_blank" rel="noopener">ORM</a>(对象关系映射)。简单地说，ORM就是为操作不同数据库提供了一个用面向对象思想设计的统一上层接口，隐藏了在具体语言中真实操作、连接数据库的底层实现，从而解耦了应用和数据库，使得方便的更换数据库成为可能。（但同样，正因如此，ORM往往不能覆盖各数据库的特有功能）。通过Flask-SQLAlchemy，可以方便的在Flask使用SQLAlchemy。</p><p>文档：<a href="http://www.pythondoc.com/flask-sqlalchemy/" target="_blank" rel="noopener">Flask-SQLAlchemy</a></p><h2 id="Flask-MongoEngine"><a href="#Flask-MongoEngine" class="headerlink" title="Flask-MongoEngine"></a>Flask-MongoEngine</h2><p>Flask-MongoEngine集成了<a href="http://mongoengine.org/" target="_blank" rel="noopener">MongoEngine</a>。</p><p>通过它能够方便的在Flask中使用MongoDB。</p><p>文档：<a href="http://docs.mongoengine.org/projects/flask-mongoengine/en/latest/" target="_blank" rel="noopener">Flask-MongoEngine</a></p><h2 id="Flask-Login"><a href="#Flask-Login" class="headerlink" title="Flask-Login"></a>Flask-Login</h2><p>Flask-Login为Flask提供了用户会话管理。它能够处理如登陆、登出、持久记住用户会话等常见任务。</p><p>它将：</p><ol><li>将活动的用户ID储存在session中，让你能够方便的对他们进行登入登出操作。</li><li>让你能够限制视图只允许登入（或登出）用户访问。</li><li>处理常见的“记住我”功能。</li><li>保护你的用户会话以防被cookie小偷窃取。</li><li>之后可能会与Flask-Principal或其它验证扩展集成。</li></ol><p>然而，它不会：</p><ol><li>将特定的数据库或其它储存方法强加给你。用户如何载入，决定权完全在你的手中。</li><li>限制你使用如用户名和密码，OpenIDs，或其它验证方法。</li><li>处理超出“登入登出”之外的权限。</li><li>处理用户注册或账户重置。</li></ol><p>文档：<a href="https://flask-login.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Login</a></p><h2 id="Flask-Migrate"><a href="#Flask-Migrate" class="headerlink" title="Flask-Migrate"></a>Flask-Migrate</h2><p>Flask-Migrate是一个使用<a href="https://pypi.python.org/pypi/alembic" target="_blank" rel="noopener">Alembic</a>处理Flask应用程序中SQLAlchemy数据库迁移的扩展。数据库操作由Flask命令行接口或通过<a href="grate.readthedocs.io/en/latest/">Flask-Script</a>扩展而得到支持。</p><p>Flask中的SQLAlchemy只有在不存在这个表时才会按照程序中的定义新建一个表。然而，在开发过程中不免要更改表结构，此时就可以借助这个扩展来方便的更新数据库。</p><p>文档：<a href="https://flask-migrate.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Migrate</a></p><h2 id="Flask-RESTful"><a href="#Flask-RESTful" class="headerlink" title="Flask-RESTful"></a>Flask-RESTful</h2><p>Flask-RESTful是一个为Flask增加了快速绑定REST风格API功能的扩展。它是一个与你已经存在的ORM/库之间协同工作的轻量级抽象。Flask-RESTful鼓励使用最少设置的最佳实践。</p><p>文档:<a href="https://flask-restful.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-RESTful</a></p><h2 id="Flask-Admin"><a href="#Flask-Admin" class="headerlink" title="Flask-Admin"></a>Flask-Admin</h2><p>Flask-Admin解决了在现有数据模型上构建管理界面的无聊问题。通过一定的努力，它能让你使用一个用户友好的界面管理web服务器数据。</p><p>文档：<a href="https://flask-admin.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Admin</a></p><h2 id="Flask-Bcrypt"><a href="#Flask-Bcrypt" class="headerlink" title="Flask-Bcrypt"></a>Flask-Bcrypt</h2><p>Flask-Bcrypt是一个为Flask应用程序提供了Bcrypt散列工具的Flask扩展。</p><p>Bcrypt是一种比MD5或SHA1稍慢，但更加安全、不易碰撞的散列算法。</p><p>文档：<a href="https://flask-bcrypt.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Bcrypt</a></p><h2 id="Flask-Cache"><a href="#Flask-Cache" class="headerlink" title="Flask-Cache"></a>Flask-Cache</h2><p>Flask-Cache用于缓存常用Web应用程序页面，从而在下一次请求时直接从缓存中返回而不用再查询、构建页面，从而极大的优化了Web应用程序的响应速度。</p><p>值得注意的是，不是每个页面都适合使用Flask-Cache缓存——数据经常变化的页面不适于被缓存。</p><p>文档：<a href="https://pythonhosted.org/Flask-Cache/" target="_blank" rel="noopener">Flask-Cache</a></p><h2 id="Flask-SSLify"><a href="#Flask-SSLify" class="headerlink" title="Flask-SSLify"></a>Flask-SSLify</h2><p>Flask-SSLify是一个简单扩展，能够将所有访问都重定向到https。</p><p>文档:<a href="https://pypi.python.org/pypi/Flask-SSLify" target="_blank" rel="noopener">Flask-SSLify</a></p><h2 id="Flask-Bootstrap"><a href="#Flask-Bootstrap" class="headerlink" title="Flask-Bootstrap"></a>Flask-Bootstrap</h2><p>Flask-Bootstrap为Flask应用程序提供了内建的Bootstrap支持，从而可以方便的在程序中集成Bootstrap，并且使用扩展提供的默认布局。</p><p>值得注意的是，到目前为止，Flask-Bootstrap似乎默认只支持Bootstrap2、3,不支持Bootstrap4。</p><p>文档：<a href="https://pythonhosted.org/Flask-Bootstrap/" target="_blank" rel="noopener">Flask-Bootstrap</a></p><h2 id="Flask-Principal"><a href="#Flask-Principal" class="headerlink" title="Flask-Principal"></a>Flask-Principal</h2><p>Flask-Principal为Flask提供了用户权限控制。它通过提供一个松散的框架，将位于Web应用程序中的不同部分的两种服务类型提供者（身份验证提供者、用户信息提供者）联系起来。</p><p>文档：<a href="http://pythonhosted.org/Flask-Principal/" target="_blank" rel="noopener">Flask-Principal</a></p><h2 id="Flask-DebugToolbar"><a href="#Flask-DebugToolbar" class="headerlink" title="Flask-DebugToolbar"></a>Flask-DebugToolbar</h2><p>Flask-DebugToolbar为应用程序添加了一个工具栏，包含许多对debugging有益的应用程序相关信息。</p><p>文档：<a href="https://flask-debugtoolbar.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-DebugToolbar</a></p><h2 id="Flask-Security"><a href="#Flask-Security" class="headerlink" title="Flask-Security"></a>Flask-Security</h2><p>Flask-Security支持为Flask应用程序快速添加常用的安全机制。</p><p>文档：<a href="https://pythonhosted.org/Flask-Security/index.html" target="_blank" rel="noopener">Flask-Security</a></p><h2 id="Flask-Paginate"><a href="#Flask-Paginate" class="headerlink" title="Flask-Paginate"></a>Flask-Paginate</h2><p>Flask-Paginate提供了分页工具，可以在模板中快速简洁的创建出分页样式。</p><p>文档：<a href="http://flask-paginate.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Paginate</a></p><h2 id="Flask-Mail"><a href="#Flask-Mail" class="headerlink" title="Flask-Mail"></a>Flask-Mail</h2><p>Flask-Mail为Flask集成了简单的SMTP邮件服务。使用它，可以方便的通过视图和脚本向用户、管理员发送邮件。</p><p>文档：<a href="https://pythonhosted.org/Flask-Mail/" target="_blank" rel="noopener">Flask-Mail</a></p><h2 id="Flask-BasicAuth"><a href="#Flask-BasicAuth" class="headerlink" title="Flask-BasicAuth"></a>Flask-BasicAuth</h2><p>Flask-BasicAuth使用HTTP基础访问验证功能为Flask应用提供了保护某些视图或整个应用的简洁方法。</p><p>Flask-BasicAuth常用于Flask应用程序中API的访问验证。</p><p>文档：<a href="https://flask-basicauth.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-BasicAuth</a></p><h2 id="Flask-Assets"><a href="#Flask-Assets" class="headerlink" title="Flask-Assets"></a>Flask-Assets</h2><p>Flask-Assets集成了webassets。使用它，可以方便的将不同的静态资源文件整合、压缩在一起，从而减少响应的大小，优化Web应用程序的访问速度。</p><p>文档：<a href="https://flask-assets.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Assets</a></p><h2 id="Flask-PageDown"><a href="#Flask-PageDown" class="headerlink" title="Flask-PageDown"></a>Flask-PageDown</h2><p>PageDown是使用JacaScript实现的客户端MarkDown到HTML的转换程序。而Flask-PageDown扩展则将PageDown集成到了Flask-WTF表单字段里。</p><p>文档：<a href="https://github.com/miguelgrinberg/Flask-PageDown" target="_blank" rel="noopener">Flask-PageDown</a></p><h2 id="Flask-HTTPAuth"><a href="#Flask-HTTPAuth" class="headerlink" title="Flask-HTTPAuth"></a>Flask-HTTPAuth</h2><p>Flask-HTTPAuth是一个支持为Flask路由应用一些http验证方法的简单扩展。<br>Flask-HTTPAuth支持HTTPBasicAuth、HTTPDigestAuth、HTTPTokenAuth和混合验证。</p><p>文档：<a href="http://flask-httpauth.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-HTTPAuth</a></p><h2 id="Flask-KVSession"><a href="#Flask-KVSession" class="headerlink" title="Flask-KVSession"></a>Flask-KVSession</h2><p>Flask-KVSessin重写了Flask基于客户端的session机制。不再客户端储存数据，只在客户端储存一个安全生成的ID，而实际数据则储存在服务器端。</p><p>提高了Flask Session机制的安全性。</p><p>文档：<a href="https://pythonhosted.org/Flask-KVSession/" target="_blank" rel="noopener">Flask-Session</a></p><h2 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h2><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-4-13/54750302.jpg" alt="youya"><br>╮(╯-╰)╭</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flask&lt;/a&gt;是一个用python编写的、基于&lt;a href=&quot;http://werkzeug.pocoo.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Werkzeug WSGI&lt;/a&gt;和&lt;a href=&quot;http://jinja.pocoo.org/docs/2.10/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jinja2&lt;/a&gt;的轻量级Web应用框架。因为其相比于django等框架来说简洁的功能与架构，常常被称为”microframework”。然而，称Flask为微框架并不意味着它相比起其它框架来说功能更少——Flask拥有强大的可扩展性以及活跃的社区。开发者可以根据自身的需求，自由的选择扩展包来增强其功能。&lt;/p&gt;
&lt;p&gt;合理的选择扩展包，将极大的减少开发时间，提高开发效率。下面，本文就将列举出Flask应用程序开发中的一些常用扩展，以便于参考和查询。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://arianx.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://arianx.me/tags/python/"/>
    
      <category term="Flask" scheme="https://arianx.me/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>扔鸡蛋问题</title>
    <link href="https://arianx.me/2018/03/05/%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98/"/>
    <id>https://arianx.me/2018/03/05/扔鸡蛋问题/</id>
    <published>2018-03-05T14:34:51.000Z</published>
    <updated>2018-09-19T01:52:04.486Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-3-6/16293116.jpg" alt="sister"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>逛知乎的时候偶然看到的一道算法问题，看了回答里大牛给的题解以后感觉解法十分巧妙，所以写一篇博客记载下来。<br>这个问题应该属于动态规划，但本人还没有怎么接触过算法这方面的知识，全属个人理解，所以文中可能有一些不标准的地方，还请见谅啦~，也欢迎指出来。<br><a id="more"></a></p><h2 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h2><p>有一栋200层高的大楼，给你两个质地相同但软硬未知的鸡蛋。如果在第n层扔下鸡蛋，鸡蛋不碎，那么，从第n-1层以下扔鸡蛋都不碎。如果要想测试出最高从第几层扔下时鸡蛋不会碎，问，在最坏情况下，所扔次数最少为多少？</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目要求测试的是最高第几层扔下时不会碎，也就是说，在这一层下，鸡蛋都不会碎，在这一层上，鸡蛋都会碎。并且注意到，题目并没有规定这个层数，而是说在<strong>最坏</strong>的情况下所扔次数<strong>最少</strong>的策略。这也意味着，对于每个策略，鸡蛋可能在不同层数碎，并且总是使当前策略所需测试次数最多的那个层数。而我们所求的，就是在所有策略的最坏情况中，最少的那个次数。</p><h2 id="解题策略"><a href="#解题策略" class="headerlink" title="解题策略"></a>解题策略</h2><p>考虑如果只有一颗鸡蛋，那么就需要从第一层开始，逐一往上测试，直到找到破碎的那一层，这种策略最坏情况下所需次数为100.</p><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>现在有两颗鸡蛋，那么就可以有一颗用来划定区间，另一颗用来测试鸡蛋将在这个区间的哪一层碎。比如，使用二分法，第一颗鸡蛋扔在50层。如果碎了，就用第二颗鸡蛋从第一层扔到第49层，直到在第49层破碎，那么一共测试了50次；如果鸡蛋不碎，就将第一颗鸡蛋扔在第75层，在根据碎不碎判断接下来的情况。</p><p>可以看出，使用二分法的情况下，最坏的次数需要50次。</p><h3 id="最优解"><a href="#最优解" class="headerlink" title="最优解"></a>最优解</h3><p>不妨假设在这种情况下用两颗鸡蛋测试z层，最少需要x次，考虑选择怎样的策略，才能在最坏的情况下，用这x次测试出最多的层数。</p><p>考虑第一次尝试应该选择扔在哪层楼。假设扔在第y层楼。如果第一颗鸡蛋在第y层楼破碎，那么，接下来需要用剩下来的那颗鸡蛋，最多需要用<code>y-1</code>次尝试测试最终鸡蛋在哪层楼破碎。在这种情况下，根据总是考虑最坏情况这个条件，如果<code>y&gt;x</code>，那最终就无法测试出鸡蛋是哪一层楼（因为最坏情况下鸡蛋在第<code>y-1</code>层楼，而只剩下<code>x-1</code>次尝试的次数）。所以第一次应该扔在<strong>小于等于</strong>x的楼层数。</p><p>考虑<code>y&lt;x</code>的情况。如果鸡蛋在第y层破碎，那么就可以用不到<code>x-1</code>的尝试次数测试出最终楼层；如果鸡蛋在第y层不破碎，那么，问题就转换为怎样用两颗鸡蛋，在<code>x-1</code>次的步骤内测试出<code>z-y</code>层楼里鸡蛋破碎位置的<strong>子问题</strong>。而这个子问题也和先前测试第一次尝试一样，第一颗扔出的鸡蛋不能大于<code>x-1</code>层，如果大于，次数就不够，必需扔在小于<code>x-1</code>次的楼层数。</p><p>这样，每一次不破碎，都生成一个新的独立的子问题。直到最终一颗鸡蛋在某一次测试中破碎，就用剩下的一颗鸡蛋逐一测试最近一次扔鸡蛋和破碎层之间的区间，找出正确答案。因为每一次不破碎都生成的都是<strong>独立</strong>的子问题（当前第一颗鸡蛋选择扔的层数不影响下一个子问题的决策），所以将每一次能测试出的最大的不破碎区间组合起来，就是最终能测试的最多层数。</p><p>因为每一次扔鸡蛋的最远距离就是当前次数的剩余数，所以需要每次测试，都扔在比当前层数大剩余次数的楼层。那么，如果有两颗鸡蛋，用x次尝试次数能确定的鸡蛋不破碎的最多层数就为<code>x+(x-1)+(x-2)...+1</code>。</p><p>回到原题来。原题要求求出用两颗鸡蛋测试200层楼所需的最少次数，也就是说需要<code>x+(x-1)+(x-2)...+1&gt;200</code>，也就是<code>x(x+1)/2&gt;200</code>，解出来就是x取整最少需要20次。</p><h2 id="程序语言"><a href="#程序语言" class="headerlink" title="程序语言"></a>程序语言</h2><p>以上是从推理方面来考察，现在从程序逻辑的方面考虑。</p><p>有200层楼，用两颗鸡蛋去测试使鸡蛋不碎的最高层数，要求求出最坏情况下的最小尝试次数。也就是，设初始选择扔在第y层，f(y)为在这种策略下的所需要的最多的次数，我们所求的为所有策略中最小的次数。如果第一颗鸡蛋在y层就破碎，那么所需要的次数就为y次，如果第一颗鸡蛋在y层不破碎，那么问题就转换为一个求用两颗鸡蛋测试200-y层所需要的最坏情况下的最少次数的子问题。</p><p>所以，状态转移方程就为：f(x)=min(max(i, f(i-1)+1))，(0&lt; i&lt;= x)。退出条件为i==0时，需要0次。</p><h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><p>使用了python实现，并且使用了functools库里面的lru_cache，这个装饰器会缓存函数结果，如果给函数传入了相同的参数，就直接返回缓存的结果。</p><p><em>以下这段代码参考自<a href="https://www.zhihu.com/question/19690210/answer/18079633" target="_blank" rel="noopener">吴育昕</a></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache(maxsize=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> m==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    res = min([max(i, test(m-i)+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(test(<span class="number">200</span>))</span><br><span class="line"><span class="comment">#结果：14</span></span><br></pre></td></tr></table></figure></p><h2 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h2><p>同理，如果推广到更一般的情况下，用n颗鸡蛋取测试m层的大楼，求最坏情况下的最少次数。首先选定一个楼层y，扔出第一颗鸡蛋。如果这颗鸡蛋破碎了，问题就转化为用n-1颗鸡蛋去测试m-1层楼的子问题；如果没碎，问题就转化为用n颗鸡蛋去测试m-y的子问题。</p><p>于是，在这种情况下的状态转移方程就为：f(m,n)=min(max(f(m-1,n-1), f(m-y,n)))+1，(0&lt; y&lt; m+1)。退出条件为当m==0时，需要0次；当n==1时，需要m次。</p><h3 id="推广情况程序实现"><a href="#推广情况程序实现" class="headerlink" title="推广情况程序实现"></a>推广情况程序实现</h3><p><em>以下这段代码参考自<a href="https://www.zhihu.com/question/19690210/answer/18079633" target="_blank" rel="noopener">吴育昕</a></em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache(maxsize=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> m==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">    res = min([max(test(n<span class="number">-1</span>, i<span class="number">-1</span>), test(n, m-i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>)])+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(test(<span class="number">2</span>,<span class="number">36</span>))</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="">https://www.zhihu.com/question/19690210/answer/18079633</a><br><a href="">http://www.raychase.net/1374</a><br><a href="">http://blog.csdn.net/baolinq/article/details/53047288</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-3-6/16293116.jpg&quot; alt=&quot;sister&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;逛知乎的时候偶然看到的一道算法问题，看了回答里大牛给的题解以后感觉解法十分巧妙，所以写一篇博客记载下来。&lt;br&gt;这个问题应该属于动态规划，但本人还没有怎么接触过算法这方面的知识，全属个人理解，所以文中可能有一些不标准的地方，还请见谅啦~，也欢迎指出来。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://arianx.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arianx.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>新学期开始</title>
    <link href="https://arianx.me/2018/03/03/%E6%96%B0%E5%AD%A6%E6%9C%9F/"/>
    <id>https://arianx.me/2018/03/03/新学期/</id>
    <published>2018-03-03T05:17:24.000Z</published>
    <updated>2018-09-19T01:50:50.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你永远不会知道，为了对生活感兴趣，我们究竟付出了多少努力。</p></blockquote><p>寒假偶然遇到一首很喜欢的音乐——雨降りお月さん（雨中的月亮），歌手为堀江由衣，是在补番过程中遇到的一首插曲。这首优美、朦胧，具有淡淡哀愁意境的歌在当时带给我十分深刻的印象。<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29091584&auto=0&height=66"></iframe><blockquote><p>雨降りお月さん （雨中的月亮，1925年）<br>作詞：野口雨情 作曲：中山晋平<br>歌词整理编译：九日旭（Guanxu）<br><br>雨降あめふりお月つきさん　雲くもの蔭かげ          雨中的月亮 躲在云背后<br>お嫁よめにゆくときゃ　誰だれとゆく      出嫁的时候 要和谁一起去<br>一人ひとりで傘からかさ　さして行ゆく          独自一人 撑伞前行<br>からかさないときゃ　誰だれとゆく    没有伞的话 又和谁一起呢<br>シャラシャラ　シャンシャン      叮叮当当<br>鈴すずつけた          铃声响   <br><br>お馬うまにゆられて　濡ぬれてゆく      在马上摇摇晃晃，冒雨前行<br>急いそがにゃお馬うまよ　夜よが明あけよう    马儿啊快些走 就要天亮了<br>手綱たづなの下したから ちょいと見みたりゃ   马儿从缰绳下面 瞄一下我<br>お袖そででお顔かほを　隠かくしてる          我用衣袖轻遮颜面<br>お袖そでは濡ぬれても　干ほしゃ乾かわく      衣袖湿了 晾晾就干<br>雨降あめふりお月つきさん　雲くもの蔭かげ          雨中的月亮 躲在云背后<br>お馬うまにゆられて　濡ぬれてゆく      在马上摇摇晃晃，冒雨前行<br><br>歌曲由两段原独立的两段歌词组成。第一段由野口雨情创作于大正14年（1925年）的儿童绘画杂志《コドモノクニ》一月号，并且刊登有相应杂志。后由作曲家中山晋平的建议改为歌曲，并受到大人孩子们的欢迎。为此，野口雨情以同一主题创作了一个续篇，以标题”雲の蔭“刊登在同年儿童绘画杂志《コドモノクニ》三月号上，同样配有装帧画并附带乐谱。在发售唱片时，因为原曲太短，两段词合起来作为一首歌。<br><br>歌曲描述了一位新娘子在骑马到婆家的雨路上的历程。配词充满童趣，同时引人幻想。然而，就如这隐隐约约透漏着哀愁、彷徨的旋律一样，这首歌具有这样的“黑色”背景：野口雨情的两个女儿都在年幼时夭折，而根据当地有这样的传说，如果新娘子是已经死去的女儿，那么她就会一个人独自启程去天国，而云背后（雲の蔭)的月亮正是隐喻中的天国。也许，这首歌正是野口雨情对其女儿亡灵的祝福。<br><br>参考自<a href="">https://blog.sina.com.cn/s/blog_4a4b274c0102wjwf.html</a></p></blockquote><p>除此之外，回过头来，整个寒假实在没有什么值得大肆回忆的内容。除了断断续续完成假期伊始订下的一些计划的日常（尽管到最后这些计划也没有来得及全部完成），就是一些琐碎的，在各种彷徨之中逝去的时间。旧的自己已经看起来渐渐消失，然而，新的自己尚没有来临，就是在这样的迷茫之中逝去的时间。</p><p>而新学期又要来临了。大学的第一个学期就这样完整的过去。到这里，也不再是可以以“新手”、“不适应”这样的话语来为自己找借口的时候了吧。</p><p>“给我振作起来啊，混蛋!”。希望新学期能够努力一点。</p><p><img src="https://arian-blogs.oss-cn-beijing.aliyuncs.com/18-3-3/20421160.jpg" alt="miku"><br>最后，为有miku的世界献上祝福。:p</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你永远不会知道，为了对生活感兴趣，我们究竟付出了多少努力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寒假偶然遇到一首很喜欢的音乐——雨降りお月さん（雨中的月亮），歌手为堀江由衣，是在补番过程中遇到的一首插曲。这首优美、朦胧，具有淡淡哀愁意境的歌在当时带给我十分深刻的印象。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://arianx.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="https://arianx.me/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随笔" scheme="https://arianx.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
